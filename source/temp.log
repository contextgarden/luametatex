./luametatex.c     61:     aux_set_interrupt_handler();
./libraries/libcerf/experimental.c     15: #define max_iter_int 10
./libraries/libcerf/experimental.c     21: double cerf_experimental_integration( int kind, double x, double y )
./libraries/libcerf/experimental.c     49:     static int Nm[num_range][max_iter_int];
./libraries/libcerf/experimental.c     50:     static int Np[num_range][max_iter_int];
./libraries/libcerf/experimental.c     51:     static long double *ak[2][num_range][max_iter_int];
./libraries/libcerf/experimental.c     52:     static long double *bk[2][num_range][max_iter_int];
./libraries/libcerf/experimental.c     86:     for ( iter=0; iter<max_iter_int; ++iter ) {
./libraries/libcerf/experimental.c    172:     return cerf_experimental_integration( 1, x, y );
./libraries/libcerf/experimental.c    177:     return cerf_experimental_integration( 0, x, y );
./libraries/mimalloc/src/alloc-aligned.c     21:   mi_assert_internal(size <= PTRDIFF_MAX);
./libraries/mimalloc/src/alloc-aligned.c     22:   mi_assert_internal(alignment != 0 && _mi_is_power_of_two(alignment));
./libraries/mimalloc/src/alloc-aligned.c     30:     mi_assert_internal(p == NULL || ((uintptr_t)p % alignment) == 0);
./libraries/mimalloc/src/alloc-aligned.c     62:   mi_assert_internal(adjust < alignment);
./libraries/mimalloc/src/alloc-aligned.c     71:   mi_assert_internal(mi_page_usable_block_size(_mi_ptr_page(p)) >= adjust + size);
./libraries/mimalloc/src/alloc-aligned.c     72:   mi_assert_internal(p == _mi_page_ptr_unalign(_mi_ptr_segment(aligned_p), _mi_ptr_page(aligned_p), aligned_p));
./libraries/mimalloc/src/alloc-aligned.c     73:   mi_assert_internal(((uintptr_t)aligned_p + offset) % alignment == 0);
./libraries/mimalloc/src/alloc-aligned.c     74:   mi_assert_internal(mi_usable_size(aligned_p)>=size);
./libraries/mimalloc/src/alloc-aligned.c     75:   mi_assert_internal(mi_usable_size(p) == mi_usable_size(aligned_p)+adjust);
./libraries/mimalloc/src/alloc-aligned.c    122:       mi_assert_internal(p != NULL);
./libraries/mimalloc/src/alloc-aligned.c    123:       mi_assert_internal(((uintptr_t)p + offset) % alignment == 0);
./libraries/mimalloc/src/alloc-override.c     67:   struct mi_interpose_s {
./libraries/mimalloc/src/alloc-override.c     74:   __attribute__((used)) static struct mi_interpose_s _mi_interposes[]  __attribute__((section("__DATA, __interpose"))) =
./libraries/mimalloc/src/alloc-override.c    115:   __attribute__((used)) static struct mi_interpose_s _mi_cxx_interposes[]  __attribute__((section("__DATA, __interpose"))) =
./libraries/mimalloc/src/alloc-posix.c     64:   mi_assert_internal(((uintptr_t)q % alignment) == 0);
./libraries/mimalloc/src/alloc-posix.c     71:   mi_assert_internal(((uintptr_t)p % alignment) == 0);
./libraries/mimalloc/src/alloc-posix.c     98:   mi_assert_internal(((uintptr_t)p % alignment) == 0);
./libraries/mimalloc/src/alloc.c     30:   mi_assert_internal(page->xblock_size==0||mi_page_block_size(page) >= size);
./libraries/mimalloc/src/alloc.c     35:   mi_assert_internal(block != NULL && _mi_ptr_page(block) == page);
./libraries/mimalloc/src/alloc.c     39:   mi_assert_internal(page->free == NULL || _mi_ptr_page(page->free) == page);
./libraries/mimalloc/src/alloc.c     53:     mi_assert_internal(page->xblock_size != 0); // do not call with zero'ing for huge blocks (see _mi_malloc_generic)
./libraries/mimalloc/src/alloc.c     54:     mi_assert_internal(page->xblock_size >= MI_PADDING_SIZE);
./libraries/mimalloc/src/alloc.c     88:   mi_assert_internal(delta >= 0 && mi_page_usable_block_size(page) >= (size - MI_PADDING_SIZE + delta));
./libraries/mimalloc/src/alloc.c    144:     mi_assert_internal(huge_alignment == 0);
./libraries/mimalloc/src/alloc.c    267:   mi_assert_internal(ok); mi_assert_internal(delta <= bsize);
./libraries/mimalloc/src/alloc.c    279:   mi_assert_internal(ok);
./libraries/mimalloc/src/alloc.c    281:   mi_assert_internal(bsize >= min_size);
./libraries/mimalloc/src/alloc.c    284:   mi_assert_internal(new_delta < bsize);
./libraries/mimalloc/src/alloc.c    311:   mi_assert_internal(bsize >= delta);
./libraries/mimalloc/src/alloc.c    451:     mi_assert_internal(heap != NULL);
./libraries/mimalloc/src/alloc.c    464:       mi_assert_internal(mi_tf_delayed(tfree) == MI_DELAYED_FREEING);
./libraries/mimalloc/src/alloc.c    502:   mi_assert_internal(page!=NULL && p!=NULL);
./libraries/mimalloc/src/alloc.c    532:   mi_assert_internal(segment != NULL);
./libraries/mimalloc/src/alloc.c    600:   mi_assert_internal(_mi_ptr_cookie(segment) == segment->cookie);
./libraries/mimalloc/src/alloc.c    601:   mi_assert_internal(_mi_thread_id() == segment->thread_id);
./libraries/mimalloc/src/alloc.c    626:   mi_assert_internal(adjust >= 0 && (size_t)adjust <= size);
./libraries/mimalloc/src/alloc.c    712:     mi_assert_internal(p!=NULL);
./libraries/mimalloc/src/alloc.c    814:   mi_assert_internal(m <= n);
./libraries/mimalloc/src/arena.c     79:   mi_assert_internal(arena_index < MI_MAX_ARENAS);
./libraries/mimalloc/src/arena.c    131:   mi_assert_internal(memid.memkind == MI_MEM_ARENA);
./libraries/mimalloc/src/arena.c    223:   mi_assert_internal(mi_arena_id_index(arena->id) == arena_index);
./libraries/mimalloc/src/arena.c    277:   mi_assert_internal(alignment <= MI_SEGMENT_ALIGN);
./libraries/mimalloc/src/arena.c    280:   mi_assert_internal(arena_index < mi_atomic_load_relaxed(&mi_arena_count));
./libraries/mimalloc/src/arena.c    281:   mi_assert_internal(size <= mi_arena_block_size(bcount));
./libraries/mimalloc/src/arena.c    296:   mi_assert_internal(p == NULL || _mi_is_aligned(p, alignment));
./libraries/mimalloc/src/arena.c    307:   mi_assert_internal(alignment <= MI_SEGMENT_ALIGN);
./libraries/mimalloc/src/arena.c    369:   mi_assert_internal(memid != NULL && tld != NULL);
./libraries/mimalloc/src/arena.c    370:   mi_assert_internal(size > 0);
./libraries/mimalloc/src/arena.c    385:         mi_assert_internal(req_arena_id == _mi_arena_id_none());
./libraries/mimalloc/src/arena.c    436:   mi_assert_internal(arena->blocks_committed != NULL);
./libraries/mimalloc/src/arena.c    437:   mi_assert_internal(arena->blocks_purge != NULL);
./libraries/mimalloc/src/arena.c    438:   mi_assert_internal(!arena->memid.is_pinned);
./libraries/mimalloc/src/arena.c    451:     mi_assert_internal(mi_option_is_enabled(mi_option_purge_decommits));
./libraries/mimalloc/src/arena.c    467:   mi_assert_internal(arena->blocks_purge != NULL);
./libraries/mimalloc/src/arena.c    600:   mi_assert_internal(size > 0 && stats != NULL);
./libraries/mimalloc/src/arena.c    601:   mi_assert_internal(committed_size <= size);
./libraries/mimalloc/src/arena.c    619:     mi_assert_internal(arena_idx < MI_MAX_ARENAS);
./libraries/mimalloc/src/arena.c    621:     mi_assert_internal(arena != NULL);
./libraries/mimalloc/src/arena.c    629:     mi_assert_internal(arena->field_count > mi_bitmap_index_field(bitmap_idx));
./libraries/mimalloc/src/arena.c    640:       mi_assert_internal(all_committed);
./libraries/mimalloc/src/arena.c    643:       mi_assert_internal(arena->blocks_committed != NULL);
./libraries/mimalloc/src/arena.c    644:       mi_assert_internal(arena->blocks_purge != NULL);
./libraries/mimalloc/src/arena.c    672:     mi_assert_internal(memid.memkind < MI_MEM_OS);
./libraries/mimalloc/src/arena.c    733:   mi_assert_internal(arena != NULL);
./libraries/mimalloc/src/arena.c    734:   mi_assert_internal((uintptr_t)mi_atomic_load_ptr_relaxed(uint8_t,&arena->start) % MI_SEGMENT_ALIGN == 0);
./libraries/mimalloc/src/arena.c    735:   mi_assert_internal(arena->block_count > 0);
./libraries/mimalloc/src/arena.c    755:     mi_assert_internal(memid.initially_committed && memid.is_pinned);
./libraries/mimalloc/src/arena.c    790:   mi_assert_internal(post >= 0);
./libraries/mimalloc/src/arena.c    901: int mi_reserve_huge_os_pages_interleave(size_t pages, size_t numa_nodes, size_t timeout_msecs) mi_attr_noexcept {
./libraries/mimalloc/src/arena.c    930:   _mi_warning_message("mi_reserve_huge_os_pages is deprecated: use mi_reserve_huge_os_pages_interleave/at instead\n");
./libraries/mimalloc/src/arena.c    932:   int err = mi_reserve_huge_os_pages_interleave(pages, 0, (size_t)(max_secs * 1000.0));
./libraries/mimalloc/src/bitmap.c     29:   mi_assert_internal(count + bitidx <= MI_BITMAP_FIELD_BITS);
./libraries/mimalloc/src/bitmap.c     30:   mi_assert_internal(count > 0);
./libraries/mimalloc/src/bitmap.c     45:   mi_assert_internal(bitmap_idx != NULL);
./libraries/mimalloc/src/bitmap.c     46:   mi_assert_internal(count <= MI_BITMAP_FIELD_BITS);
./libraries/mimalloc/src/bitmap.c     47:   mi_assert_internal(count > 0);
./libraries/mimalloc/src/bitmap.c     67:       mi_assert_internal((m >> bitidx) == mask); // no overflow?
./libraries/mimalloc/src/bitmap.c     69:       mi_assert_internal((newmap^map) >> bitidx == mask);
./libraries/mimalloc/src/bitmap.c     83:       mi_assert_internal(mapm != 0);
./libraries/mimalloc/src/bitmap.c     85:       mi_assert_internal(shift > 0 && shift <= count);
./libraries/mimalloc/src/bitmap.c    136:   mi_assert_internal(bitmap_fields > idx); MI_UNUSED(bitmap_fields);
./libraries/mimalloc/src/bitmap.c    137:   // mi_assert_internal((bitmap[idx] & mask) == mask);
./libraries/mimalloc/src/bitmap.c    149:   mi_assert_internal(bitmap_fields > idx); MI_UNUSED(bitmap_fields);
./libraries/mimalloc/src/bitmap.c    150:   //mi_assert_internal(any_zero != NULL || (bitmap[idx] & mask) == 0);
./libraries/mimalloc/src/bitmap.c    161:   mi_assert_internal(bitmap_fields > idx); MI_UNUSED(bitmap_fields);
./libraries/mimalloc/src/bitmap.c    173:   mi_assert_internal(bitmap_fields > idx); MI_UNUSED(bitmap_fields);
./libraries/mimalloc/src/bitmap.c    179:   mi_assert_internal((expected & mask) == 0);
./libraries/mimalloc/src/bitmap.c    205:   mi_assert_internal(bitmap_idx != NULL);
./libraries/mimalloc/src/bitmap.c    211:   mi_assert_internal(initial <= MI_BITMAP_FIELD_BITS);
./libraries/mimalloc/src/bitmap.c    223:     mi_assert_internal(mask_bits > 0 && mask_bits <= MI_BITMAP_FIELD_BITS);
./libraries/mimalloc/src/bitmap.c    228:   mi_assert_internal(field < &bitmap[bitmap_fields]);
./libraries/mimalloc/src/bitmap.c    255:   mi_assert_internal(field == final_field);
./libraries/mimalloc/src/bitmap.c    272:     mi_assert_internal(mi_atomic_load_relaxed(field) == map);
./libraries/mimalloc/src/bitmap.c    278:       mi_assert_internal((map & initial_mask) == initial_mask);
./libraries/mimalloc/src/bitmap.c    295:   mi_assert_internal(count > 0);
./libraries/mimalloc/src/bitmap.c    327:     mi_assert_internal(mi_bitmap_index_field(bitmap_idx) < bitmap_fields);
./libraries/mimalloc/src/bitmap.c    332:     mi_assert_internal(pre_bits < count);
./libraries/mimalloc/src/bitmap.c    339:     mi_assert_internal(mi_bitmap_index_field(bitmap_idx) + mid_count + (count==0 ? 0 : 1) < bitmap_fields);
./libraries/mimalloc/src/heap.c     42:       mi_assert_internal(mi_page_heap(page) == heap);
./libraries/mimalloc/src/heap.c     50:   mi_assert_internal(count == total);
./libraries/mimalloc/src/heap.c     60:   mi_assert_internal(mi_page_heap(page) == heap);
./libraries/mimalloc/src/heap.c     62:   mi_assert_internal(segment->thread_id == heap->thread_id);
./libraries/mimalloc/src/heap.c     69:   mi_assert_internal(heap!=NULL);
./libraries/mimalloc/src/heap.c     95:   mi_assert_internal(mi_heap_page_is_valid(heap, pq, page, NULL, NULL));
./libraries/mimalloc/src/heap.c    155:   mi_assert_internal( collect != MI_ABANDON || mi_atomic_load_ptr_acquire(mi_block_t,&heap->thread_delayed_free) == NULL );
./libraries/mimalloc/src/heap.c    202:   mi_assert_internal(heap!=NULL);
./libraries/mimalloc/src/heap.c    204:   mi_assert_internal(bheap!=NULL);
./libraries/mimalloc/src/heap.c    205:   mi_assert_internal(bheap->thread_id == _mi_thread_id());
./libraries/mimalloc/src/heap.c    242:   mi_assert_internal(heap != NULL);
./libraries/mimalloc/src/heap.c    243:   mi_assert_internal(mi_heap_is_initialized(heap));
./libraries/mimalloc/src/heap.c    254:   mi_assert_internal(mi_heap_is_initialized(heap));
./libraries/mimalloc/src/heap.c    271:   mi_assert_internal(curr == heap);
./libraries/mimalloc/src/heap.c    276:   mi_assert_internal(heap->tld->heaps != NULL);
./libraries/mimalloc/src/heap.c    319:   mi_assert_internal(mi_page_thread_free(page) == NULL);
./libraries/mimalloc/src/heap.c    387:   mi_assert_internal(heap!=NULL);
./libraries/mimalloc/src/heap.c    404:   mi_assert_internal(from->page_count == 0);
./libraries/mimalloc/src/heap.c    412:   mi_assert_internal(mi_atomic_load_ptr_relaxed(mi_block_t,&from->thread_delayed_free) == NULL);
./libraries/mimalloc/src/heap.c    435:   mi_assert_internal(heap->page_count==0);
./libraries/mimalloc/src/heap.c    461:   mi_assert_internal(valid);
./libraries/mimalloc/src/heap.c    518:   mi_assert_internal(page->local_free == NULL);
./libraries/mimalloc/src/heap.c    528:     mi_assert_internal(page->used == 1 && page->free == NULL);
./libraries/mimalloc/src/heap.c    544:     mi_assert_internal((uint8_t*)block >= pstart && (uint8_t*)block < (pstart + psize));
./libraries/mimalloc/src/heap.c    546:     mi_assert_internal(offset % bsize == 0);
./libraries/mimalloc/src/heap.c    548:     mi_assert_internal( blockidx < MI_MAX_BLOCKS);
./libraries/mimalloc/src/heap.c    553:   mi_assert_internal(page->capacity == (free_count + page->used));
./libraries/mimalloc/src/heap.c    574:   mi_assert_internal(page->used == used_count);
./libraries/mimalloc/src/init.c    289:     // mi_assert_internal(_mi_heap_main.thread_id != 0);  // can happen on freeBSD where alloc is called before any initialization
./libraries/mimalloc/src/init.c    293:     //mi_assert_internal(_mi_heap_default->tld->heap_backing == mi_prim_get_default_heap());
./libraries/mimalloc/src/init.c    336:       mi_assert_internal(!mi_heap_is_backing(curr));
./libraries/mimalloc/src/init.c    341:   mi_assert_internal(heap->tld->heaps == heap && heap->next == NULL);
./libraries/mimalloc/src/init.c    342:   mi_assert_internal(mi_heap_is_backing(heap));
./libraries/mimalloc/src/init.c    357:     // mi_assert_internal(heap->tld->segments.count == 0 || heap->thread_id != _mi_thread_id());
./libraries/mimalloc/src/init.c    365:     mi_assert_internal(heap->tld->heap_backing == &_mi_heap_main);
./libraries/mimalloc/src/init.c    454:   mi_assert_internal(heap != NULL);
./libraries/mimalloc/src/init.c    528:   mi_assert_internal(_mi_is_main_thread());
./libraries/mimalloc/src/init.c    605:       mi_reserve_huge_os_pages_interleave(pages, 0, pages*500);
./libraries/mimalloc/src/options.c    131:   mi_assert_internal(option == mi_option_reserve_os_memory || option == mi_option_arena_reserve);
./libraries/mimalloc/src/options.c    253:   mi_assert_internal(mi_out_default == NULL);
./libraries/mimalloc/src/options.c    566:     mi_assert_internal(desc->init != UNINIT);
./libraries/mimalloc/src/os.c    144:   mi_assert_internal((size % _mi_os_page_size()) == 0);
./libraries/mimalloc/src/os.c    192:   mi_assert_internal(size > 0 && (size % _mi_os_page_size()) == 0);
./libraries/mimalloc/src/os.c    193:   mi_assert_internal(is_zero != NULL);
./libraries/mimalloc/src/os.c    194:   mi_assert_internal(is_large != NULL);
./libraries/mimalloc/src/os.c    224:   mi_assert_internal(alignment >= _mi_os_page_size() && ((alignment & (alignment - 1)) == 0));
./libraries/mimalloc/src/os.c    225:   mi_assert_internal(size > 0 && (size % _mi_os_page_size()) == 0);
./libraries/mimalloc/src/os.c    226:   mi_assert_internal(is_large != NULL);
./libraries/mimalloc/src/os.c    227:   mi_assert_internal(is_zero != NULL);
./libraries/mimalloc/src/os.c    228:   mi_assert_internal(base != NULL);
./libraries/mimalloc/src/os.c    274:       mi_assert_internal(pre_size < over_size&& post_size < over_size&& mid_size >= size);
./libraries/mimalloc/src/os.c    283:   mi_assert_internal(p == NULL || (p != NULL && *base != NULL && ((uintptr_t)p % alignment) == 0));
./libraries/mimalloc/src/os.c    382:   mi_assert_internal((conservative && (size_t)diff <= size) || (!conservative && (size_t)diff >= size));
./libraries/mimalloc/src/os.c    425:   mi_assert_internal(needs_recommit!=NULL);
./libraries/mimalloc/src/os.c    439:   mi_assert_internal(err == 0);
./libraries/mimalloc/src/os.c    560:     mi_assert_internal(end % MI_SEGMENT_SIZE == 0);
./libraries/mimalloc/src/os.c    631:   mi_assert_internal(page*MI_HUGE_OS_PAGE_SIZE <= size);
./libraries/mimalloc/src/page-queue.c     89:     mi_assert_internal(bin < MI_BIN_HUGE);
./libraries/mimalloc/src/page-queue.c     91:   mi_assert_internal(bin > 0 && bin <= MI_BIN_HUGE);
./libraries/mimalloc/src/page-queue.c    121:   mi_assert_internal(page != NULL);
./libraries/mimalloc/src/page-queue.c    124:     mi_assert_internal(list->next == NULL || list->next->prev == list);
./libraries/mimalloc/src/page-queue.c    125:     mi_assert_internal(list->prev == NULL || list->prev->next == list);
./libraries/mimalloc/src/page-queue.c    143:   mi_assert_internal(heap != NULL && bin <= MI_BIN_FULL);
./libraries/mimalloc/src/page-queue.c    145:   mi_assert_internal(bin >= MI_BIN_HUGE || page->xblock_size == pq->block_size);
./libraries/mimalloc/src/page-queue.c    152:   mi_assert_internal(bin <= MI_BIN_FULL);
./libraries/mimalloc/src/page-queue.c    154:   mi_assert_internal(mi_page_is_in_full(page) || page->xblock_size == pq->block_size);
./libraries/mimalloc/src/page-queue.c    164:   mi_assert_internal(mi_heap_contains_queue(heap,pq));
./libraries/mimalloc/src/page-queue.c    207:   mi_assert_internal(page != NULL);
./libraries/mimalloc/src/page-queue.c    209:   mi_assert_internal(page->xblock_size == queue->block_size || (page->xblock_size > MI_MEDIUM_OBJ_SIZE_MAX && mi_page_queue_is_huge(queue))  || (mi_page_is_in_full(page) && mi_page_queue_is_full(queue)));
./libraries/mimalloc/src/page-queue.c    218:     mi_assert_internal(mi_heap_contains_queue(heap, queue));
./libraries/mimalloc/src/page-queue.c    230:   mi_assert_internal(mi_page_heap(page) == heap);
./libraries/mimalloc/src/page-queue.c    231:   mi_assert_internal(!mi_page_queue_contains(queue, page));
./libraries/mimalloc/src/page-queue.c    233:   mi_assert_internal(_mi_page_segment(page)->kind != MI_SEGMENT_HUGE);
./libraries/mimalloc/src/page-queue.c    235:   mi_assert_internal(page->xblock_size == queue->block_size ||
./libraries/mimalloc/src/page-queue.c    244:     mi_assert_internal(queue->first->prev == NULL);
./libraries/mimalloc/src/page-queue.c    259:   mi_assert_internal(page != NULL);
./libraries/mimalloc/src/page-queue.c    263:   mi_assert_internal((page->xblock_size == to->block_size && page->xblock_size == from->block_size) ||
./libraries/mimalloc/src/page-queue.c    276:     mi_assert_internal(mi_heap_contains_queue(heap, from));
./libraries/mimalloc/src/page-queue.c    283:     mi_assert_internal(heap == mi_page_heap(to->last));
./libraries/mimalloc/src/page-queue.c    298:   mi_assert_internal(mi_heap_contains_queue(heap,pq));
./libraries/mimalloc/src/page-queue.c    299:   mi_assert_internal(pq->block_size == append->block_size);
./libraries/mimalloc/src/page-queue.c    318:     mi_assert_internal(pq->first==NULL);
./libraries/mimalloc/src/page-queue.c    325:     mi_assert_internal(pq->last!=NULL);
./libraries/mimalloc/src/page-queue.c    326:     mi_assert_internal(append->first!=NULL);
./libraries/mimalloc/src/page.c     34:   mi_assert_internal(page != NULL);
./libraries/mimalloc/src/page.c     35:   mi_assert_internal(i <= page->reserved);
./libraries/mimalloc/src/page.c     46:     mi_assert_internal(page == _mi_ptr_page(head));
./libraries/mimalloc/src/page.c     81:   mi_assert_internal(page->xblock_size > 0);
./libraries/mimalloc/src/page.c     82:   mi_assert_internal(page->used <= page->capacity);
./libraries/mimalloc/src/page.c     83:   mi_assert_internal(page->capacity <= page->reserved);
./libraries/mimalloc/src/page.c     87:   mi_assert_internal(start == _mi_segment_page_start(segment,page,NULL));
./libraries/mimalloc/src/page.c     89:   //mi_assert_internal(start + page->capacity*page->block_size == page->top);
./libraries/mimalloc/src/page.c     91:   mi_assert_internal(mi_page_list_is_valid(page,page->free));
./libraries/mimalloc/src/page.c     92:   mi_assert_internal(mi_page_list_is_valid(page,page->local_free));
./libraries/mimalloc/src/page.c    105:   mi_assert_internal(mi_page_list_is_valid(page, tfree));
./libraries/mimalloc/src/page.c    107:   //mi_assert_internal(tfree_count <= page->thread_freed + 1);
./libraries/mimalloc/src/page.c    111:   mi_assert_internal(page->used + free_count == page->capacity);
./libraries/mimalloc/src/page.c    119:   mi_assert_internal(mi_page_is_valid_init(page));
./libraries/mimalloc/src/page.c    121:   mi_assert_internal(page->keys[0] != 0);
./libraries/mimalloc/src/page.c    126:     mi_assert_internal(!_mi_process_is_initialized || segment->thread_id==0 || segment->thread_id == mi_page_heap(page)->thread_id);
./libraries/mimalloc/src/page.c    132:       mi_assert_internal(mi_page_queue_contains(pq, page));
./libraries/mimalloc/src/page.c    133:       mi_assert_internal(pq->block_size==mi_page_block_size(page) || mi_page_block_size(page) > MI_MEDIUM_OBJ_SIZE_MAX || mi_page_is_in_full(page));
./libraries/mimalloc/src/page.c    134:       mi_assert_internal(mi_heap_contains_queue(mi_page_heap(page),pq));
./libraries/mimalloc/src/page.c    219:   mi_assert_internal(page!=NULL);
./libraries/mimalloc/src/page.c    248:   mi_assert_internal(!force || page->local_free == NULL);
./libraries/mimalloc/src/page.c    261:   mi_assert_internal(mi_page_heap(page) == heap);
./libraries/mimalloc/src/page.c    262:   mi_assert_internal(mi_page_thread_free_flag(page) != MI_NEVER_DELAYED_FREE);
./libraries/mimalloc/src/page.c    264:   mi_assert_internal(_mi_page_segment(page)->kind != MI_SEGMENT_HUGE);
./libraries/mimalloc/src/page.c    276:   mi_assert_internal(pq != NULL);
./libraries/mimalloc/src/page.c    277:   mi_assert_internal(mi_heap_contains_queue(heap, pq));
./libraries/mimalloc/src/page.c    278:   mi_assert_internal(page_alignment > 0 || block_size > MI_MEDIUM_OBJ_SIZE_MAX || block_size == pq->block_size);
./libraries/mimalloc/src/page.c    285:   mi_assert_internal(page_alignment >0 || block_size > MI_MEDIUM_OBJ_SIZE_MAX || _mi_page_segment(page)->kind != MI_SEGMENT_HUGE);
./libraries/mimalloc/src/page.c    286:   mi_assert_internal(pq!=NULL || page->xblock_size != 0);
./libraries/mimalloc/src/page.c    287:   mi_assert_internal(pq!=NULL || mi_page_block_size(page) >= block_size);
./libraries/mimalloc/src/page.c    290:   mi_assert_internal(full_block_size >= block_size);
./libraries/mimalloc/src/page.c    300:   mi_assert_internal(mi_heap_contains_queue(heap, pq));
./libraries/mimalloc/src/page.c    303:   mi_assert_internal(pq->block_size==mi_page_block_size(page));
./libraries/mimalloc/src/page.c    304:   mi_assert_internal(pq==mi_page_queue(heap, mi_page_block_size(page)));
./libraries/mimalloc/src/page.c    350:   mi_assert_internal(page != NULL);
./libraries/mimalloc/src/page.c    352:   mi_assert_internal(mi_page_is_in_full(page));
./libraries/mimalloc/src/page.c    364:   mi_assert_internal(pq == mi_page_queue_of(page));
./libraries/mimalloc/src/page.c    365:   mi_assert_internal(!mi_page_immediate_available(page));
./libraries/mimalloc/src/page.c    366:   mi_assert_internal(!mi_page_is_in_full(page));
./libraries/mimalloc/src/page.c    379:   mi_assert_internal(page != NULL);
./libraries/mimalloc/src/page.c    381:   mi_assert_internal(pq == mi_page_queue_of(page));
./libraries/mimalloc/src/page.c    382:   mi_assert_internal(mi_page_heap(page) != NULL);
./libraries/mimalloc/src/page.c    391:   mi_assert_internal(mi_page_thread_free_flag(page)==MI_NEVER_DELAYED_FREE);
./libraries/mimalloc/src/page.c    397:     mi_assert_internal(_mi_ptr_page(block) != page);
./libraries/mimalloc/src/page.c    402:   mi_assert_internal(mi_page_heap(page) == NULL);
./libraries/mimalloc/src/page.c    409:   mi_assert_internal(page != NULL);
./libraries/mimalloc/src/page.c    411:   mi_assert_internal(pq == mi_page_queue_of(page));
./libraries/mimalloc/src/page.c    412:   mi_assert_internal(mi_page_all_free(page));
./libraries/mimalloc/src/page.c    413:   mi_assert_internal(mi_page_thread_free_flag(page)!=MI_DELAYED_FREEING);
./libraries/mimalloc/src/page.c    441:   mi_assert_internal(page != NULL);
./libraries/mimalloc/src/page.c    443:   mi_assert_internal(mi_page_all_free(page));
./libraries/mimalloc/src/page.c    459:       mi_assert_internal(pq >= heap->pages);
./libraries/mimalloc/src/page.c    461:       mi_assert_internal(index < MI_BIN_FULL && index < MI_BIN_HUGE);
./libraries/mimalloc/src/page.c    464:       mi_assert_internal(mi_page_all_free(page));
./libraries/mimalloc/src/page.c    514:   mi_assert_internal(page->free == NULL);
./libraries/mimalloc/src/page.c    515:   mi_assert_internal(page->local_free == NULL);
./libraries/mimalloc/src/page.c    517:   mi_assert_internal(page->capacity + extend <= page->reserved);
./libraries/mimalloc/src/page.c    518:   mi_assert_internal(bsize == mi_page_block_size(page));
./libraries/mimalloc/src/page.c    529:   mi_assert_internal(slice_extend >= 1);
./libraries/mimalloc/src/page.c    572:   mi_assert_internal(page->free == NULL);
./libraries/mimalloc/src/page.c    573:   mi_assert_internal(page->local_free == NULL);
./libraries/mimalloc/src/page.c    575:   mi_assert_internal(page->capacity + extend <= page->reserved);
./libraries/mimalloc/src/page.c    576:   mi_assert_internal(bsize == mi_page_block_size(page));
./libraries/mimalloc/src/page.c    627:   mi_assert_internal(extend > 0);
./libraries/mimalloc/src/page.c    631:   mi_assert_internal(max_extend > 0);
./libraries/mimalloc/src/page.c    639:   mi_assert_internal(extend > 0 && extend + page->capacity <= page->reserved);
./libraries/mimalloc/src/page.c    640:   mi_assert_internal(extend < (1UL<<16));
./libraries/mimalloc/src/page.c    660:   mi_assert_internal(block_size > 0);
./libraries/mimalloc/src/page.c    668:   mi_assert_internal(mi_page_block_size(page) <= page_size);
./libraries/mimalloc/src/page.c    669:   mi_assert_internal(page_size <= page->slice_count*MI_SEGMENT_SLICE_SIZE);
./libraries/mimalloc/src/page.c    670:   mi_assert_internal(page_size / block_size < (1L<<16));
./libraries/mimalloc/src/page.c    672:   mi_assert_internal(page->reserved > 0);
./libraries/mimalloc/src/page.c    685:   mi_assert_internal(page->is_committed);
./libraries/mimalloc/src/page.c    686:   mi_assert_internal(page->capacity == 0);
./libraries/mimalloc/src/page.c    687:   mi_assert_internal(page->free == NULL);
./libraries/mimalloc/src/page.c    688:   mi_assert_internal(page->used == 0);
./libraries/mimalloc/src/page.c    689:   mi_assert_internal(page->xthread_free == 0);
./libraries/mimalloc/src/page.c    690:   mi_assert_internal(page->next == NULL);
./libraries/mimalloc/src/page.c    691:   mi_assert_internal(page->prev == NULL);
./libraries/mimalloc/src/page.c    692:   mi_assert_internal(page->retire_expire == 0);
./libraries/mimalloc/src/page.c    693:   mi_assert_internal(!mi_page_has_aligned(page));
./libraries/mimalloc/src/page.c    695:   mi_assert_internal(page->keys[0] != 0);
./libraries/mimalloc/src/page.c    696:   mi_assert_internal(page->keys[1] != 0);
./libraries/mimalloc/src/page.c    736:       mi_assert_internal(mi_page_immediate_available(page));
./libraries/mimalloc/src/page.c    742:     mi_assert_internal(!mi_page_is_in_full(page) && !mi_page_immediate_available(page));
./libraries/mimalloc/src/page.c    762:   mi_assert_internal(page == NULL || mi_page_immediate_available(page));
./libraries/mimalloc/src/page.c    776:       mi_assert_internal(mi_page_immediate_available(page));
./libraries/mimalloc/src/page.c    830:   mi_assert_internal(mi_bin(block_size) == MI_BIN_HUGE || page_alignment > 0);
./libraries/mimalloc/src/page.c    836:   mi_assert_internal(!is_huge || mi_page_queue_is_huge(pq));
./libraries/mimalloc/src/page.c    840:     mi_assert_internal(mi_page_immediate_available(page));
./libraries/mimalloc/src/page.c    843:       mi_assert_internal(_mi_page_segment(page)->kind == MI_SEGMENT_HUGE);
./libraries/mimalloc/src/page.c    844:       mi_assert_internal(_mi_page_segment(page)->used==1);
./libraries/mimalloc/src/page.c    846:       mi_assert_internal(_mi_page_segment(page)->thread_id==0); // abandoned, not in the huge queue
./libraries/mimalloc/src/page.c    851:       mi_assert_internal(_mi_page_segment(page)->kind != MI_SEGMENT_HUGE);
./libraries/mimalloc/src/page.c    885:     mi_assert_internal(size >= MI_PADDING_SIZE); 
./libraries/mimalloc/src/page.c    897:   mi_assert_internal(heap != NULL);
./libraries/mimalloc/src/page.c    904:   mi_assert_internal(mi_heap_is_initialized(heap));
./libraries/mimalloc/src/page.c    925:   mi_assert_internal(mi_page_immediate_available(page));
./libraries/mimalloc/src/page.c    926:   mi_assert_internal(mi_page_block_size(page) >= size);
./libraries/mimalloc/src/page.c    932:     mi_assert_internal(p != NULL);
./libraries/mimalloc/src/random.c    123:   mi_assert_internal(ctx->input[14] != ctx_new->input[14] || ctx->input[15] != ctx_new->input[15]); // do not reuse nonces!
./libraries/mimalloc/src/random.c    139:   mi_assert_internal(mi_random_is_initialized(ctx));
./libraries/mimalloc/src/random.c    140:   mi_assert_internal(ctx != ctx_new);
./libraries/mimalloc/src/random.c    145:   mi_assert_internal(mi_random_is_initialized(ctx));
./libraries/mimalloc/src/random.c    169:   mi_assert_internal(x != 0);
./libraries/mimalloc/src/random.c    223:   mi_assert_internal(array_equals(x, x_out, 4));
./libraries/mimalloc/src/random.c    236:   mi_assert_internal(array_equals(y, y_out, 16));
./libraries/mimalloc/src/random.c    252:   mi_assert_internal(array_equals(r.output, r_out, 16));
./libraries/mimalloc/src/segment-map.c     32:   mi_assert_internal(_mi_ptr_segment(segment + 1) == segment); // is it aligned on MI_SEGMENT_SIZE?
./libraries/mimalloc/src/segment-map.c     41:     mi_assert_internal(mapindex < MI_SEGMENT_MAP_WSIZE);
./libraries/mimalloc/src/segment-map.c     49:   mi_assert_internal(index <= MI_SEGMENT_MAP_WSIZE);
./libraries/mimalloc/src/segment-map.c     61:   mi_assert_internal(index <= MI_SEGMENT_MAP_WSIZE);
./libraries/mimalloc/src/segment-map.c     74:   mi_assert_internal(segment != NULL);
./libraries/mimalloc/src/segment-map.c    101:     mi_assert_internal(index > 0);
./libraries/mimalloc/src/segment-map.c    111:   mi_assert_internal(loindex < MI_SEGMENT_MAP_WSIZE);
./libraries/mimalloc/src/segment-map.c    117:   mi_assert_internal((void*)segment < p);
./libraries/mimalloc/src/segment-map.c    119:   mi_assert_internal(cookie_ok);
./libraries/mimalloc/src/segment-map.c    122:   mi_assert_internal(p >= (void*)segment && (uint8_t*)p < (uint8_t*)segment + mi_segment_size(segment));
./libraries/mimalloc/src/segment-map.c    148:   mi_assert_internal(page == NULL || (mi_segment_page_size(_mi_page_segment(page)) - (MI_SECURE == 0 ? 0 : _mi_os_page_size())) >= block_size);
./libraries/mimalloc/src/segment-map.c    150:   mi_assert_internal(page == NULL || mi_page_not_in_queue(page, tld));
./libraries/mimalloc/src/segment.c     37: static void mi_commit_mask_create_intersect(const mi_commit_mask_t* commit, const mi_commit_mask_t* cm, mi_commit_mask_t* res) {
./libraries/mimalloc/src/segment.c     56:   mi_assert_internal(bitidx < MI_COMMIT_MASK_BITS);
./libraries/mimalloc/src/segment.c     57:   mi_assert_internal((bitidx + bitcount) <= MI_COMMIT_MASK_BITS);
./libraries/mimalloc/src/segment.c     59:     mi_assert_internal(bitidx==0);
./libraries/mimalloc/src/segment.c     70:       mi_assert_internal(i < MI_COMMIT_MASK_FIELD_COUNT);
./libraries/mimalloc/src/segment.c     83:   mi_assert_internal((total%MI_COMMIT_MASK_BITS)==0);
./libraries/mimalloc/src/segment.c    129:       mi_assert_internal(ofs < MI_COMMIT_MASK_FIELD_BITS && (mask&1) == 1);
./libraries/mimalloc/src/segment.c    141:     mi_assert_internal(count > 0);
./libraries/mimalloc/src/segment.c    167:   mi_assert_internal(slice >= segment->slices && slice < mi_segment_slices_end(segment));
./libraries/mimalloc/src/segment.c    179:   mi_assert_internal(slice_count <= MI_SLICES_PER_SEGMENT);
./libraries/mimalloc/src/segment.c    188:   mi_assert_internal(slice_count*MI_SEGMENT_SLICE_SIZE <= MI_SEGMENT_SIZE);
./libraries/mimalloc/src/segment.c    189:   mi_assert_internal(mi_slice_bin8(MI_SLICES_PER_SEGMENT) <= MI_SEGMENT_BIN_MAX);
./libraries/mimalloc/src/segment.c    191:   mi_assert_internal(bin <= MI_SEGMENT_BIN_MAX);
./libraries/mimalloc/src/segment.c    198:   mi_assert_internal(index >= 0 && index < (ptrdiff_t)segment->slice_entries);
./libraries/mimalloc/src/segment.c    209:   mi_assert_internal(slice->prev == NULL && slice->next==NULL);
./libraries/mimalloc/src/segment.c    221:   mi_assert_internal(sq->slice_count >= slice_count);
./libraries/mimalloc/src/segment.c    226:   mi_assert_internal(slice->xblock_size==0 && slice->slice_count>0 && slice->slice_offset==0);
./libraries/mimalloc/src/segment.c    256:   mi_assert_internal(segment != NULL);
./libraries/mimalloc/src/segment.c    257:   mi_assert_internal(_mi_ptr_cookie(segment) == segment->cookie);
./libraries/mimalloc/src/segment.c    258:   mi_assert_internal(segment->abandoned <= segment->used);
./libraries/mimalloc/src/segment.c    259:   mi_assert_internal(segment->thread_id == 0 || segment->thread_id == _mi_thread_id());
./libraries/mimalloc/src/segment.c    260:   mi_assert_internal(mi_commit_mask_all_set(&segment->commit_mask, &segment->purge_mask)); // can only decommit committed blocks
./libraries/mimalloc/src/segment.c    261:   //mi_assert_internal(segment->segment_info_size % MI_SEGMENT_SLICE_SIZE == 0);
./libraries/mimalloc/src/segment.c    267:     mi_assert_internal(slice->slice_count > 0);
./libraries/mimalloc/src/segment.c    268:     mi_assert_internal(slice->slice_offset == 0);
./libraries/mimalloc/src/segment.c    274:         mi_assert_internal(segment->slices[index + i].slice_offset == i*sizeof(mi_slice_t));
./libraries/mimalloc/src/segment.c    275:         mi_assert_internal(i==0 || segment->slices[index + i].slice_count == 0);
./libraries/mimalloc/src/segment.c    276:         mi_assert_internal(i==0 || segment->slices[index + i].xblock_size == 1);
./libraries/mimalloc/src/segment.c    281:         mi_assert_internal(last->slice_offset == (slice->slice_count-1)*sizeof(mi_slice_t));
./libraries/mimalloc/src/segment.c    282:         mi_assert_internal(last->slice_count == 0);
./libraries/mimalloc/src/segment.c    283:         mi_assert_internal(last->xblock_size == 1);
./libraries/mimalloc/src/segment.c    289:         mi_assert_internal((uint8_t*)slice == (uint8_t*)last - last->slice_offset);
./libraries/mimalloc/src/segment.c    291:       mi_assert_internal(slice == last || last->slice_count == 0 );
./libraries/mimalloc/src/segment.c    292:       mi_assert_internal(last->xblock_size == 0 || (segment->kind==MI_SEGMENT_HUGE && last->xblock_size==1));
./libraries/mimalloc/src/segment.c    295:         mi_assert_internal(mi_span_queue_contains(sq,slice));
./libraries/mimalloc/src/segment.c    300:   mi_assert_internal(slice == end);
./libraries/mimalloc/src/segment.c    301:   mi_assert_internal(used_count == segment->used + 1);
./libraries/mimalloc/src/segment.c    335:   mi_assert_internal(page->xblock_size > 0 || _mi_ptr_page(p) == page);
./libraries/mimalloc/src/segment.c    336:   mi_assert_internal(_mi_ptr_segment(p) == segment);
./libraries/mimalloc/src/segment.c    359:   mi_assert_internal(segment_size % MI_SEGMENT_SLICE_SIZE == 0);
./libraries/mimalloc/src/segment.c    414:   mi_assert_internal(_mi_ptr_segment(p + 1) == segment);
./libraries/mimalloc/src/segment.c    415:   mi_assert_internal(segment->kind != MI_SEGMENT_HUGE);
./libraries/mimalloc/src/segment.c    423:   mi_assert_internal(pstart + size <= segsize);
./libraries/mimalloc/src/segment.c    431:     mi_assert_internal(start >= segstart);
./libraries/mimalloc/src/segment.c    432:     mi_assert_internal(end <= segsize);
./libraries/mimalloc/src/segment.c    446:   mi_assert_internal(start <= pstart && (pstart + size) <= end);
./libraries/mimalloc/src/segment.c    447:   mi_assert_internal(start % MI_COMMIT_SIZE==0 && end % MI_COMMIT_SIZE == 0);
./libraries/mimalloc/src/segment.c    453:   mi_assert_internal(bitidx < MI_COMMIT_MASK_BITS);
./libraries/mimalloc/src/segment.c    459:   mi_assert_internal((bitidx + bitcount) <= MI_COMMIT_MASK_BITS);
./libraries/mimalloc/src/segment.c    464:   mi_assert_internal(mi_commit_mask_all_set(&segment->commit_mask, &segment->purge_mask));
./libraries/mimalloc/src/segment.c    477:     mi_commit_mask_create_intersect(&segment->commit_mask, &mask, &cmask);
./libraries/mimalloc/src/segment.c    494:   mi_assert_internal(mi_commit_mask_all_set(&segment->commit_mask, &segment->purge_mask));
./libraries/mimalloc/src/segment.c    497:   mi_assert_internal(segment->kind != MI_SEGMENT_HUGE);
./libraries/mimalloc/src/segment.c    502:   mi_assert_internal(mi_commit_mask_all_set(&segment->commit_mask, &segment->purge_mask));
./libraries/mimalloc/src/segment.c    514:     mi_assert_internal((void*)start != (void*)segment);
./libraries/mimalloc/src/segment.c    515:     mi_assert_internal(segment->allow_decommit);
./libraries/mimalloc/src/segment.c    519:       mi_commit_mask_create_intersect(&segment->commit_mask, &mask, &cmask);
./libraries/mimalloc/src/segment.c    545:     mi_assert_internal(segment->purge_expire > 0 || mi_commit_mask_is_empty(&segment->purge_mask));      
./libraries/mimalloc/src/segment.c    547:     mi_commit_mask_create_intersect(&segment->commit_mask, &mask, &cmask);  // only purge what is committed; span_free may try to decommit more
./libraries/mimalloc/src/segment.c    590:   mi_assert_internal(mi_commit_mask_is_empty(&segment->purge_mask));
./libraries/mimalloc/src/segment.c    604:   mi_assert_internal(slice_index < segment->slice_entries);
./libraries/mimalloc/src/segment.c    608:   mi_assert_internal(slice_index + slice_count - 1 < segment->slice_entries);
./libraries/mimalloc/src/segment.c    613:   mi_assert_internal(slice->slice_count == slice_count); // no overflow?
./libraries/mimalloc/src/segment.c    636:   mi_assert_internal(slice->xblock_size==0 && slice->slice_count>0 && slice->slice_offset==0);
./libraries/mimalloc/src/segment.c    643:   mi_assert_internal(slice->slice_count > 0 && slice->slice_offset==0 && slice->xblock_size==0);
./libraries/mimalloc/src/segment.c    644:   mi_assert_internal(_mi_ptr_segment(slice)->kind != MI_SEGMENT_HUGE);
./libraries/mimalloc/src/segment.c    651:   mi_assert_internal(slice != NULL && slice->slice_count > 0 && slice->slice_offset == 0);
./libraries/mimalloc/src/segment.c    658:     mi_assert_internal((segment->used==0 && slice->xblock_size==0) || segment->used == 1);  // decreased right after this call in `mi_segment_page_clear`
./libraries/mimalloc/src/segment.c    668:   mi_assert_internal(next <= mi_segment_slices_end(segment));
./libraries/mimalloc/src/segment.c    671:     mi_assert_internal(next->slice_count > 0 && next->slice_offset==0);
./libraries/mimalloc/src/segment.c    677:     mi_assert_internal(prev >= segment->slices);
./libraries/mimalloc/src/segment.c    680:       mi_assert_internal(prev->slice_count > 0 && prev->slice_offset==0);
./libraries/mimalloc/src/segment.c    700:   mi_assert_internal(slice_index < segment->slice_entries);
./libraries/mimalloc/src/segment.c    702:   mi_assert_internal(slice->xblock_size==0 || slice->xblock_size==1);
./libraries/mimalloc/src/segment.c    712:   mi_assert_internal(slice->slice_count == slice_count);
./libraries/mimalloc/src/segment.c    716:   mi_assert_internal(mi_page_block_size(page) == bsize);
./libraries/mimalloc/src/segment.c    748:   mi_assert_internal(_mi_ptr_segment(slice) == segment);
./libraries/mimalloc/src/segment.c    749:   mi_assert_internal(slice->slice_count >= slice_count);
./libraries/mimalloc/src/segment.c    750:   mi_assert_internal(slice->xblock_size > 0); // no more in free queue
./libraries/mimalloc/src/segment.c    752:   mi_assert_internal(segment->kind != MI_SEGMENT_HUGE);
./libraries/mimalloc/src/segment.c    760:   mi_assert_internal(slice_count*MI_SEGMENT_SLICE_SIZE <= MI_LARGE_OBJ_SIZE_MAX);
./libraries/mimalloc/src/segment.c    776:           mi_assert_internal(slice != NULL && slice->slice_count == slice_count && slice->xblock_size > 0);
./libraries/mimalloc/src/segment.c    809:     // mi_assert_internal(huge_page != NULL);
./libraries/mimalloc/src/segment.c    810:     mi_assert_internal(page_alignment >= MI_SEGMENT_ALIGN);
./libraries/mimalloc/src/segment.c    833:     mi_assert_internal(commit_needed>0);
./libraries/mimalloc/src/segment.c    835:     mi_assert_internal(commit_needed*MI_COMMIT_SIZE >= (*pinfo_slices)*MI_SEGMENT_SLICE_SIZE);
./libraries/mimalloc/src/segment.c    841:   mi_assert_internal(segment != NULL && (uintptr_t)segment % MI_SEGMENT_SIZE == 0);
./libraries/mimalloc/src/segment.c    861:   mi_assert_internal((required==0 && huge_page==NULL) || (required>0 && huge_page != NULL));
./libraries/mimalloc/src/segment.c    906:     mi_assert_internal(mi_segment_info_size(segment) - os_pagesize >= pre_size);
./libraries/mimalloc/src/segment.c    917:   mi_assert_internal(page0!=NULL); if (page0==NULL) return NULL; // cannot fail as we always commit in advance  
./libraries/mimalloc/src/segment.c    918:   mi_assert_internal(segment->used == 1);
./libraries/mimalloc/src/segment.c    923:     mi_assert_internal(huge_page==NULL);
./libraries/mimalloc/src/segment.c    927:     mi_assert_internal(huge_page!=NULL);
./libraries/mimalloc/src/segment.c    928:     mi_assert_internal(mi_commit_mask_is_empty(&segment->purge_mask));
./libraries/mimalloc/src/segment.c    929:     mi_assert_internal(mi_commit_mask_is_full(&segment->commit_mask));
./libraries/mimalloc/src/segment.c    931:     mi_assert_internal(*huge_page != NULL); // cannot fail as we commit in advance 
./libraries/mimalloc/src/segment.c    941:   mi_assert_internal(segment != NULL);
./libraries/mimalloc/src/segment.c    942:   mi_assert_internal(segment->next == NULL);
./libraries/mimalloc/src/segment.c    943:   mi_assert_internal(segment->used == 0);
./libraries/mimalloc/src/segment.c    952:     mi_assert_internal(slice->slice_count > 0);
./libraries/mimalloc/src/segment.c    953:     mi_assert_internal(slice->slice_offset == 0);
./libraries/mimalloc/src/segment.c    954:     mi_assert_internal(mi_slice_index(slice)==0 || slice->xblock_size == 0); // no more used pages ..
./libraries/mimalloc/src/segment.c    963:   mi_assert_internal(page_count == 2); // first page is allocated by the segment itself
./libraries/mimalloc/src/segment.c    981:   mi_assert_internal(page->xblock_size > 0);
./libraries/mimalloc/src/segment.c    982:   mi_assert_internal(mi_page_all_free(page));
./libraries/mimalloc/src/segment.c    984:   mi_assert_internal(segment->used > 0);
./libraries/mimalloc/src/segment.c   1069:   mi_assert_internal(((uintptr_t)segment & MI_TAGGED_MASK) == 0);
./libraries/mimalloc/src/segment.c   1093:   mi_assert_internal(segment->thread_id == 0);
./libraries/mimalloc/src/segment.c   1094:   mi_assert_internal(mi_atomic_load_ptr_relaxed(mi_segment_t,&segment->abandoned_next) == NULL);
./libraries/mimalloc/src/segment.c   1095:   mi_assert_internal(segment->next == NULL);
./libraries/mimalloc/src/segment.c   1096:   mi_assert_internal(segment->used > 0);
./libraries/mimalloc/src/segment.c   1150:   mi_assert_internal(segment->thread_id == 0);
./libraries/mimalloc/src/segment.c   1151:   mi_assert_internal(mi_atomic_load_ptr_relaxed(mi_segment_t, &segment->abandoned_next) == NULL);
./libraries/mimalloc/src/segment.c   1152:   mi_assert_internal(segment->next == NULL);
./libraries/mimalloc/src/segment.c   1153:   mi_assert_internal(segment->used > 0);
./libraries/mimalloc/src/segment.c   1212:   mi_assert_internal(segment->used == segment->abandoned);
./libraries/mimalloc/src/segment.c   1213:   mi_assert_internal(segment->used > 0);
./libraries/mimalloc/src/segment.c   1214:   mi_assert_internal(mi_atomic_load_ptr_relaxed(mi_segment_t, &segment->abandoned_next) == NULL);
./libraries/mimalloc/src/segment.c   1215:   mi_assert_internal(segment->abandoned_visits == 0);
./libraries/mimalloc/src/segment.c   1222:     mi_assert_internal(slice->slice_count > 0);
./libraries/mimalloc/src/segment.c   1223:     mi_assert_internal(slice->slice_offset == 0);
./libraries/mimalloc/src/segment.c   1245:   mi_assert_internal(mi_page_thread_free_flag(page)==MI_NEVER_DELAYED_FREE);
./libraries/mimalloc/src/segment.c   1246:   mi_assert_internal(mi_page_heap(page) == NULL);
./libraries/mimalloc/src/segment.c   1253:   mi_assert_internal(segment->abandoned <= segment->used);
./libraries/mimalloc/src/segment.c   1267:   mi_assert_internal(slice->slice_count>0 && slice->xblock_size>0); // segment allocated page
./libraries/mimalloc/src/segment.c   1275:   mi_assert_internal(block_size < MI_HUGE_BLOCK_SIZE);
./libraries/mimalloc/src/segment.c   1276:   mi_assert_internal(mi_segment_is_abandoned(segment));
./libraries/mimalloc/src/segment.c   1283:     mi_assert_internal(slice->slice_count > 0);
./libraries/mimalloc/src/segment.c   1284:     mi_assert_internal(slice->slice_offset == 0);
./libraries/mimalloc/src/segment.c   1291:         mi_assert_internal(page->next == NULL && page->prev==NULL);
./libraries/mimalloc/src/segment.c   1295:         mi_assert_internal(!mi_slice_is_used(slice));
./libraries/mimalloc/src/segment.c   1321:   mi_assert_internal(mi_atomic_load_ptr_relaxed(mi_segment_t, &segment->abandoned_next) == NULL);
./libraries/mimalloc/src/segment.c   1328:   mi_assert_internal(segment->next == NULL);
./libraries/mimalloc/src/segment.c   1335:     mi_assert_internal(slice->slice_count > 0);
./libraries/mimalloc/src/segment.c   1336:     mi_assert_internal(slice->slice_offset == 0);
./libraries/mimalloc/src/segment.c   1340:       mi_assert_internal(page->is_committed);
./libraries/mimalloc/src/segment.c   1341:       mi_assert_internal(mi_page_thread_free_flag(page)==MI_NEVER_DELAYED_FREE);
./libraries/mimalloc/src/segment.c   1342:       mi_assert_internal(mi_page_heap(page) == NULL);
./libraries/mimalloc/src/segment.c   1343:       mi_assert_internal(page->next == NULL && page->prev==NULL);
./libraries/mimalloc/src/segment.c   1366:     mi_assert_internal(slice->slice_count>0 && slice->slice_offset==0);
./libraries/mimalloc/src/segment.c   1372:     mi_assert_internal(right_page_reclaimed == NULL || !(*right_page_reclaimed));
./libraries/mimalloc/src/segment.c   1458:   mi_assert_internal(block_size < MI_HUGE_BLOCK_SIZE);
./libraries/mimalloc/src/segment.c   1459:   mi_assert_internal(block_size <= MI_LARGE_OBJ_SIZE_MAX);
./libraries/mimalloc/src/segment.c   1466:     mi_assert_internal(segment != NULL);
./libraries/mimalloc/src/segment.c   1484:   mi_assert_internal(required <= MI_LARGE_OBJ_SIZE_MAX && page_kind <= MI_PAGE_LARGE);
./libraries/mimalloc/src/segment.c   1489:   mi_assert_internal(slices_needed * MI_SEGMENT_SLICE_SIZE == page_size);
./libraries/mimalloc/src/segment.c   1502:   mi_assert_internal(page != NULL && page->slice_count*MI_SEGMENT_SLICE_SIZE == page_size);
./libraries/mimalloc/src/segment.c   1503:   mi_assert_internal(_mi_ptr_segment(page)->thread_id == _mi_thread_id());
./libraries/mimalloc/src/segment.c   1519:   mi_assert_internal(segment->used==1);
./libraries/mimalloc/src/segment.c   1520:   mi_assert_internal(mi_page_block_size(page) >= size);  
./libraries/mimalloc/src/segment.c   1534:     mi_assert_internal(_mi_is_aligned(aligned_p, page_alignment));
./libraries/mimalloc/src/segment.c   1535:     mi_assert_internal(psize - (aligned_p - start) >= size);      
./libraries/mimalloc/src/segment.c   1548:   mi_assert_internal(segment->kind==MI_SEGMENT_HUGE);
./libraries/mimalloc/src/segment.c   1549:   mi_assert_internal(segment == _mi_page_segment(page));
./libraries/mimalloc/src/segment.c   1550:   mi_assert_internal(mi_atomic_load_relaxed(&segment->thread_id)==0);
./libraries/mimalloc/src/segment.c   1567:     mi_assert_internal(false);
./libraries/mimalloc/src/segment.c   1576:   mi_assert_internal(segment->kind == MI_SEGMENT_HUGE);
./libraries/mimalloc/src/segment.c   1577:   mi_assert_internal(segment == _mi_page_segment(page));
./libraries/mimalloc/src/segment.c   1578:   mi_assert_internal(page->used == 1); // this is called just before the free
./libraries/mimalloc/src/segment.c   1579:   mi_assert_internal(page->free == NULL);
./libraries/mimalloc/src/segment.c   1597:     mi_assert_internal(_mi_is_power_of_two(page_alignment));
./libraries/mimalloc/src/segment.c   1598:     mi_assert_internal(page_alignment >= MI_SEGMENT_SIZE);
./libraries/mimalloc/src/segment.c   1614:   mi_assert_internal(page == NULL || _mi_heap_memid_is_suitable(heap, _mi_page_segment(page)->memid));
./libraries/mimalloc/src/stats.c    295:     mi_assert_internal(buf->used < buf->count);
./libraries/mimalloc/src/prim/osx/alloc-override-zone.c    190: static malloc_introspection_t mi_introspect = {
./libraries/mimalloc/src/prim/osx/alloc-override-zone.c    218:   .introspect = &mi_introspect,
./libraries/mimalloc/src/prim/osx/alloc-override-zone.c    354: struct mi_interpose_s {
./libraries/mimalloc/src/prim/osx/alloc-override-zone.c    361: __attribute__((used)) static const struct mi_interpose_s _mi_zone_interposes[]  __attribute__((section("__DATA, __interpose"))) =
./libraries/mimalloc/src/prim/unix/prim.c    327:   mi_assert_internal(size > 0 && (size % _mi_os_page_size()) == 0);
./libraries/mimalloc/src/prim/unix/prim.c    328:   mi_assert_internal(commit || !allow_large);
./libraries/mimalloc/src/prim/unix/prim.c    329:   mi_assert_internal(try_alignment > 0);
./libraries/mimalloc/src/prim/unix/prim.c    831:   mi_assert_internal(_mi_heap_default_key == (pthread_key_t)(-1));
./libraries/mimalloc/src/prim/wasi/prim.c    113:   mi_assert_internal( p == NULL || try_alignment == 0 || (uintptr_t)p % try_alignment == 0 );
./libraries/mimalloc/src/prim/windows/prim.c    211:   mi_assert_internal(!(large_only && !allow_large));
./libraries/mimalloc/src/prim/windows/prim.c    244:   mi_assert_internal(size > 0 && (size % _mi_os_page_size()) == 0);
./libraries/mimalloc/src/prim/windows/prim.c    245:   mi_assert_internal(commit || !allow_large);
./libraries/mimalloc/src/prim/windows/prim.c    246:   mi_assert_internal(try_alignment > 0);
./libraries/mimalloc/src/prim/windows/prim.c    287:   mi_assert_internal(p == addr);
./libraries/mimalloc/src/prim/windows/prim.c    604:   mi_assert_internal(mi_fls_key != (DWORD)(-1));
./libraries/miniz/miniz.c    222:     pStream->state = (struct mz_internal_state *)pComp;
./libraries/miniz/miniz.c    395:     pStream->state = (struct mz_internal_state *)pDecomp;
./libraries/miniz/miniz.c   2446:     mz_int16 *pTrees[3];
./libraries/miniz/miniz.c   2580:                 mz_int16 *pLookUp;
./libraries/miniz/miniz.c   2581:                 mz_int16 *pTree;
./libraries/miniz/miniz.c   2613:                         mz_int16 k = (mz_int16)((code_size << 9) | sym_index);
./libraries/miniz/miniz.c   2623:                         pLookUp[rev_code & (TINFL_FAST_LOOKUP_SIZE - 1)] = (mz_int16)tree_next;
./libraries/miniz/miniz.c   2633:                             pTree[-tree_cur - 1] = (mz_int16)tree_next;
./libraries/miniz/miniz.c   2641:                     pTree[-tree_cur - 1] = (mz_int16)sym_index;
./libraries/miniz/miniz.c   3307: struct mz_zip_internal_state_tag
./libraries/miniz/miniz.c   3485: static mz_bool mz_zip_reader_init_internal(mz_zip_archive *pZip, mz_uint flags)
./libraries/miniz/miniz.c   3503:     if (NULL == (pZip->m_pState = (mz_zip_internal_state *)pZip->m_pAlloc(pZip->m_pAlloc_opaque, 1, sizeof(mz_zip_internal_state))))
./libraries/miniz/miniz.c   3506:     memset(pZip->m_pState, 0, sizeof(mz_zip_internal_state));
./libraries/miniz/miniz.c   3550:     mz_zip_internal_state *pState = pZip->m_pState;
./libraries/miniz/miniz.c   3600: static mz_bool mz_zip_reader_locate_header_sig(mz_zip_archive *pZip, mz_uint32 record_sig, mz_uint32 record_size, mz_int64 *pOfs)
./libraries/miniz/miniz.c   3602:     mz_int64 cur_file_ofs;
./libraries/miniz/miniz.c   3611:     cur_file_ofs = MZ_MAX((mz_int64)pZip->m_archive_size - (mz_int64)sizeof(buf_u32), 0);
./libraries/miniz/miniz.c   3650:     mz_int64 cur_file_ofs = 0;
./libraries/miniz/miniz.c   3904: static mz_bool mz_zip_reader_end_internal(mz_zip_archive *pZip, mz_bool set_last_error)
./libraries/miniz/miniz.c   3921:         mz_zip_internal_state *pState = pZip->m_pState;
./libraries/miniz/miniz.c   3953:     return mz_zip_reader_end_internal(pZip, MZ_TRUE);
./libraries/miniz/miniz.c   3960:     if (!mz_zip_reader_init_internal(pZip, flags))
./libraries/miniz/miniz.c   3968:         mz_zip_reader_end_internal(pZip, MZ_FALSE);
./libraries/miniz/miniz.c   3991:     if (!mz_zip_reader_init_internal(pZip, flags))
./libraries/miniz/miniz.c   4010:         mz_zip_reader_end_internal(pZip, MZ_FALSE);
./libraries/miniz/miniz.c   4021:     mz_int64 cur_ofs = MZ_FTELL64(pZip->m_pState->m_pFile);
./libraries/miniz/miniz.c   4025:     if (((mz_int64)file_ofs < 0) || (((cur_ofs != (mz_int64)file_ofs)) && (MZ_FSEEK64(pZip->m_pState->m_pFile, (mz_int64)file_ofs, SEEK_SET))))
./libraries/miniz/miniz.c   4068:     if (!mz_zip_reader_init_internal(pZip, flags))
./libraries/miniz/miniz.c   4083:         mz_zip_reader_end_internal(pZip, MZ_FALSE);
./libraries/miniz/miniz.c   4110:     if (!mz_zip_reader_init_internal(pZip, flags))
./libraries/miniz/miniz.c   4123:         mz_zip_reader_end_internal(pZip, MZ_FALSE);
./libraries/miniz/miniz.c   4221: static mz_bool mz_zip_file_stat_internal(mz_zip_archive *pZip, mz_uint file_index, const mz_uint8 *pCentral_dir_header, mz_zip_archive_file_stat *pStat, mz_bool *pFound_zip64_extra_data)
./libraries/miniz/miniz.c   4245:     pStat->m_internal_attr = MZ_READ_LE16(p + MZ_ZIP_CDH_INTERNAL_ATTR_OFS);
./libraries/miniz/miniz.c   4371:     mz_zip_internal_state *pState = pZip->m_pState;
./libraries/miniz/miniz.c   4385:         mz_int64 l = 0, h = (mz_int64)size - 1;
./libraries/miniz/miniz.c   4389:             mz_int64 m = l + ((h - l) >> 1);
./libraries/miniz/miniz.c   5293:     mz_zip_internal_state *pState;
./libraries/miniz/miniz.c   5319:     if (!mz_zip_file_stat_internal(pZip, file_index, pCentral_dir_header, &file_stat, &found_zip64_ext_data_in_cdir))
./libraries/miniz/miniz.c   5507:     mz_zip_internal_state *pState;
./libraries/miniz/miniz.c   5583:     if (!mz_zip_reader_end_internal(&zip, success))
./libraries/miniz/miniz.c   5625:     if (!mz_zip_reader_end_internal(&zip, success))
./libraries/miniz/miniz.c   5668:     mz_zip_internal_state *pState = pZip->m_pState;
./libraries/miniz/miniz.c   5703: static mz_bool mz_zip_writer_end_internal(mz_zip_archive *pZip, mz_bool set_last_error)
./libraries/miniz/miniz.c   5705:     mz_zip_internal_state *pState;
./libraries/miniz/miniz.c   5780:     if (NULL == (pZip->m_pState = (mz_zip_internal_state *)pZip->m_pAlloc(pZip->m_pAlloc_opaque, 1, sizeof(mz_zip_internal_state))))
./libraries/miniz/miniz.c   5783:     memset(pZip->m_pState, 0, sizeof(mz_zip_internal_state));
./libraries/miniz/miniz.c   5822:             mz_zip_writer_end_internal(pZip, MZ_FALSE);
./libraries/miniz/miniz.c   5840:     mz_int64 cur_ofs = MZ_FTELL64(pZip->m_pState->m_pFile);
./libraries/miniz/miniz.c   5844:     if (((mz_int64)file_ofs < 0) || (((cur_ofs != (mz_int64)file_ofs)) && (MZ_FSEEK64(pZip->m_pState->m_pFile, (mz_int64)file_ofs, SEEK_SET))))
./libraries/miniz/miniz.c   5928:     mz_zip_internal_state *pState;
./libraries/miniz/miniz.c   5975:                 mz_zip_reader_end_internal(pZip, MZ_FALSE);
./libraries/miniz/miniz.c   6129:     mz_zip_internal_state *pState = pZip->m_pState;
./libraries/miniz/miniz.c   6215:     mz_zip_internal_state *pState;
./libraries/miniz/miniz.c   6502:     mz_zip_internal_state *pState;
./libraries/miniz/miniz.c   6855: 	mz_int64 cur_ofs = MZ_FTELL64(pSrc_file);
./libraries/miniz/miniz.c   6857: 	if (((mz_int64)file_ofs < 0) || (((cur_ofs != (mz_int64)file_ofs)) && (MZ_FSEEK64(pSrc_file, (mz_int64)file_ofs, SEEK_SET))))
./libraries/miniz/miniz.c   6991:     mz_zip_internal_state *pState;
./libraries/miniz/miniz.c   7040:     if (!mz_zip_file_stat_internal(pSource_zip, src_file_index, pSrc_central_header, &src_file_stat, NULL))
./libraries/miniz/miniz.c   7346:     mz_zip_internal_state *pState;
./libraries/miniz/miniz.c   7459:     return mz_zip_writer_end_internal(pZip, MZ_TRUE);
./libraries/miniz/miniz.c   7522:             mz_zip_reader_end_internal(&zip_archive, MZ_FALSE);
./libraries/miniz/miniz.c   7540:     if (!mz_zip_writer_end_internal(&zip_archive, status))
./libraries/miniz/miniz.c   7592:     mz_zip_reader_end_internal(&zip_archive, p != NULL);
./libraries/miniz/miniz.c   7811:     return mz_zip_file_stat_internal(pZip, file_index, mz_zip_get_cdh(pZip, file_index), pStat, NULL);
./libraries/pplib/pparray.c     37: int pparray_get_int (pparray *array, size_t index, ppint *v)
./libraries/pplib/pparray.c     40:   return (obj = pparray_get(array, index)) != NULL ? ppobj_get_int(obj, *v) : 0;
./libraries/pplib/pparray.c     43: int pparray_rget_int (pparray *array, size_t index, ppint *v)
./libraries/pplib/pparray.c     46:   return (obj = pparray_get(array, index)) != NULL ? ppobj_rget_int(obj, *v) : 0;
./libraries/pplib/ppcrypt.c    517:   if (!ppdict_get_int(encrypt, "P", &crypt->permissions))
./libraries/pplib/ppcrypt.c    749:   cryptkeystring = ppstring_internal(crypt->cryptkey, crypt->cryptkeylength, heap);
./libraries/pplib/ppdict.c     58: int ppdict_get_int (ppdict *dict, const char *name, ppint *v)
./libraries/pplib/ppdict.c     61:   return (obj = ppdict_get_obj(dict, name)) != NULL ? ppobj_get_int(obj, *v) : 0;
./libraries/pplib/ppdict.c     64: int ppdict_rget_int (ppdict *dict, const char *name, ppint *v)
./libraries/pplib/ppdict.c     67:   return (obj = ppdict_get_obj(dict, name)) != NULL ? ppobj_rget_int(obj, *v) : 0;
./libraries/pplib/ppload.c    180: static ppname * ppname_internal (const void *data, size_t size, int flags, ppheap *heap)
./libraries/pplib/ppload.c    193: #define ppexec_internal(data, size, heap) ppname_internal(data, size, PPNAME_EXEC, heap)
./libraries/pplib/ppload.c    415: ppstring * ppstring_internal (const void *data, size_t size, ppheap *heap)
./libraries/pplib/ppload.c    792:   iof_scan_integer(I, c, integer);
./libraries/pplib/ppload.c   1227:             obj->name = ppexec_internal("EI", 2, stack->heap);
./libraries/pplib/ppload.c   1699:     if (!ppdict_get_int(xrefstream->dict, "Size", &sectionmock[1].integer))
./libraries/pplib/ppstream.c     29:   if (!ppdict_get_int(params, "Predictor", &predictor) || predictor <= 1)
./libraries/pplib/ppstream.c     31:   if (!ppdict_get_int(params, "Columns", &rowsamples) || rowsamples == 0) // sanity, filter probably expects >0
./libraries/pplib/ppstream.c     33:   if (!ppdict_get_int(params, "Colors", &components) || components == 0) // ditto
./libraries/pplib/ppstream.c     35:   if (!ppdict_get_int(params, "BitsPerComponent", &samplebits) || samplebits == 0)
./libraries/pplib/ppstream.c     70:       if (params != NULL && ppdict_get_int(params, "EarlyChange", &earlychange) && earlychange == 0) // integer, not boolean
./libraries/pplib/util/utiliof.c   1302: int iof_get_int32 (iof *I, int32_t *number)
./libraries/pplib/util/utiliof.c   1307:   iof_read_integer(I, c, *number);
./libraries/pplib/util/utiliof.c   1317:   iof_read_integer(I, c, *number);
./libraries/pplib/util/utiliof.c   1322: int iof_get_int64 (iof *I, int64_t *number)
./libraries/pplib/util/utiliof.c   1327:   iof_read_integer(I, c, *number);
./libraries/pplib/util/utiliof.c   1336:   iof_read_integer(I, c, *number);
./libraries/pplib/util/utiliof.c   1344:   iof_read_integer(I, c, *number);
./libraries/pplib/util/utiliof.c   1352:   iof_read_integer(I, c, *number);
./libraries/pplib/util/utiliof.c   1360:   iof_read_integer(I, c, *number);
./libraries/pplib/util/utiliof.c   1364: int iof_get_int32_radix (iof *I, int32_t *number, int radix)
./libraries/pplib/util/utiliof.c   1385: int iof_get_int64_radix (iof *I, int64_t *number, int radix)
./libraries/pplib/util/utiliof.c   1600: size_t iof_put_int32 (iof *O, int32_t number)
./libraries/pplib/util/utiliof.c   1616: size_t iof_put_int64 (iof *O, int64_t number)
./libraries/pplib/util/utiliof.c   1656: size_t iof_put_int32_radix (iof *O, int32_t number, int radix, int uc)
./libraries/pplib/util/utiliof.c   1672: size_t iof_put_int64_radix (iof *O, int64_t number, int radix, int uc)
./libraries/pplib/util/utilnumber.c     94: #define string_scan_integer(s, c, number) _scan_integer(c, number, *++s)
./libraries/pplib/util/utilnumber.c     96: #define string_read_integer(s, c, number) _read_integer(c, number, *++s)
./libraries/pplib/util/utilnumber.c     99: const char * string_to_int32 (const char *s, int32_t *number)
./libraries/pplib/util/utilnumber.c    103:   string_scan_integer(s, c, *number);
./libraries/pplib/util/utilnumber.c    112:   string_scan_integer(s, c, *number);
./libraries/pplib/util/utilnumber.c    117: const char * string_to_int64 (const char *s, int64_t *number)
./libraries/pplib/util/utilnumber.c    121:   string_scan_integer(s, c, *number);
./libraries/pplib/util/utilnumber.c    129:   string_scan_integer(s, c, *number);
./libraries/pplib/util/utilnumber.c    136:   string_scan_integer(s, c, *number);
./libraries/pplib/util/utilnumber.c    143:   string_scan_integer(s, c, *number);
./libraries/pplib/util/utilnumber.c    150:   string_scan_integer(s, c, *number);
./libraries/pplib/util/utilnumber.c    154: const char * radix_to_int32 (const char *s, int32_t *number, int radix)
./libraries/pplib/util/utilnumber.c    172: const char * radix_to_int64 (const char *s, int64_t *number, int radix)
./libraries/pplib/util/utilnumber.c    299: #define end_of_integer_buffer(integer_buffer) (integer_buffer + MAX_INTEGER_DIGITS - 1)
./libraries/pplib/util/utilnumber.c    317:   e = p = end_of_integer_buffer(ibuf); *p = '\0'; \
./libraries/pplib/util/utilnumber.c    324:   e = p = end_of_integer_buffer(ibuf); *p = '\0'; \
./libraries/pplib/util/utilnumber.c    412:   e = p = end_of_integer_buffer(ibuf); *p = '\0'; \
./libraries/pplib/util/utilnumber.c    419:   e = p = end_of_integer_buffer(ibuf); *p = '\0'; \
./libraries/pplib/util/utilnumber.c    521:   e = p = end_of_integer_buffer(ibuf); *p = '\0'; \
./libraries/pplib/util/utilsha.c     94:  * the native archtecture.   Most BSD systems and Linux define u_intXX_t
./libraries/pplib/util/utilsha.c     99:  * Machines that support neither u_intXX_t nor inttypes.h's uintXX_t
./libraries/pplib/util/utilsha.c    103:  * Thank you, Jun-ichiro itojun Hagino, for suggesting using u_intXX_t
./libraries/softposit/source/c_int.c     45: int_fast64_t p8_int( posit8_t pA ) {
./libraries/softposit/source/c_int.c     77: int_fast64_t p16_int( posit16_t pA ){
./libraries/softposit/source/c_int.c    112: int64_t p32_int( posit32_t pA ){
./libraries/softposit/source/c_int.c    150: int64_t pX2_int( posit_2_t pA ){
./libraries/softposit/source/c_int.c    152: 	return p32_int(p32);
./lua/lmtcallbacklib.c    113:             case callback_integer_key:
./lua/lmtcallbacklib.c    197:             case callback_integer_key:
./lua/lmtcallbacklib.c    589:     lua_push_integer_at_key(L, saved,    lmt_lua_state.saved_callback_count);
./lua/lmtcallbacklib.c    590:     lua_push_integer_at_key(L, file,     lmt_lua_state.file_callback_count);
./lua/lmtcallbacklib.c    591:     lua_push_integer_at_key(L, direct,   lmt_lua_state.direct_callback_count);
./lua/lmtcallbacklib.c    592:     lua_push_integer_at_key(L, function, lmt_lua_state.function_callback_count);
./lua/lmtcallbacklib.c    593:     lua_push_integer_at_key(L, value,    lmt_lua_state.value_callback_count);
./lua/lmtcallbacklib.c    594:     lua_push_integer_at_key(L, local,    lmt_lua_state.local_callback_count);
./lua/lmtcallbacklib.c    595:     lua_push_integer_at_key(L, bytecode, lmt_lua_state.bytecode_callback_count);
./lua/lmtcallbacklib.c    596:     lua_push_integer_at_key(L, message,  lmt_lua_state.message_callback_count);
./lua/lmtcallbacklib.c    597:     lua_push_integer_at_key(L, count,
./lua/lmtenginelib.c    641:     lmt_initialize_interface();
./lua/lmtenginelib.c   1120:             dump_int(f, x);
./lua/lmtenginelib.c   1132:     undump_int(f, x);
./lua/lmtfontlib.c     38:         for (int i = 1; lmt_interface.math_font_parameter_values[i].name; i++) {
./lua/lmtfontlib.c     39:             if (lmt_interface.math_font_parameter_values[i].name == s) {
./lua/lmtinterface.c     43: lmt_interface_info lmt_interface = {
./lua/lmtinterface.c     69: void lmt_initialize_interface(void)
./lua/lmtinterface.c     71:     lmt_interface.pack_type_values = lmt_aux_allocate_value_info(packing_adapted);
./lua/lmtinterface.c     73:     # define set_pack_type_value(n,k) lmt_interface.pack_type_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c     81:     lmt_interface.group_code_values = lmt_aux_allocate_value_info(lua_group);
./lua/lmtinterface.c     83:     # define set_group_code_value(n,k) lmt_interface.group_code_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c    121:     lmt_interface.par_context_values = lmt_aux_allocate_value_info(reset_par_context);
./lua/lmtinterface.c    123:     # define set_par_context_value(n,k) lmt_interface.par_context_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c    139:     lmt_interface.page_context_values = lmt_aux_allocate_value_info(alignment_page_context);
./lua/lmtinterface.c    141:     # define set_page_context_value(n,k) lmt_interface.page_context_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c    157:     lmt_interface.append_line_context_values = lmt_aux_allocate_value_info(post_migrate_append_line_context);
./lua/lmtinterface.c    159:     # define set_append_line_context_value(n,k) lmt_interface.append_line_context_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c    168:     lmt_interface.alignment_context_values = lmt_aux_allocate_value_info(wrapup_pass_alignment_context);
./lua/lmtinterface.c    170:     # define set_alignment_context_value(n,k) lmt_interface.alignment_context_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c    177:     lmt_interface.break_context_values = lmt_aux_allocate_value_info(wrapup_show_breaks_context);
./lua/lmtinterface.c    179:     # define set_break_context_value(n,k) lmt_interface.break_context_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c    191:     lmt_interface.build_context_values = lmt_aux_allocate_value_info(wrapup_show_build_context);
./lua/lmtinterface.c    193:     # define set_build_context_value(n,k) lmt_interface.build_context_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c    203:     lmt_interface.par_begin_values = lmt_aux_allocate_value_info(vrule_char_par_begin);
./lua/lmtinterface.c    205:     # define set_par_begin_value(n,k) lmt_interface.par_begin_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c    222:     lmt_interface.par_mode_values = lmt_aux_allocate_value_info(math_par_subtype);
./lua/lmtinterface.c    224:     # define set_par_mode_value(n,k) lmt_interface.par_mode_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c    232:     lmt_interface.math_style_name_values = lmt_aux_allocate_value_info(cramped_script_script_style);
./lua/lmtinterface.c    234:     # define set_math_style_name_value(n,k) lmt_interface.math_style_name_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c    245:     lmt_interface.math_style_variant_values = lmt_aux_allocate_value_info(math_double_superscript_variant);
./lua/lmtinterface.c    247:     # define set_math_style_variant_value(n,k) lmt_interface.math_style_variant_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c    259:     lmt_interface.lua_function_values = lmt_aux_allocate_value_info(lua_value_conditional_code);
./lua/lmtinterface.c    261:     # define set_lua_function_value(n,k) lmt_interface.lua_function_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c    264:     set_lua_function_value(lua_value_integer_code,     integer);
./lua/lmtinterface.c    275:     lmt_interface.direction_values = lmt_aux_allocate_value_info(dir_righttoleft);
./lua/lmtinterface.c    277:     # define set_direction_value(n,k) lmt_interface.direction_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c    282:     lmt_interface.field_type_values = lmt_aux_allocate_value_info(attribute_field);
./lua/lmtinterface.c    284:     # define set_field_type_value(n,k) lmt_interface.field_type_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c    300:     lmt_interface.node_fill_values = lmt_aux_allocate_value_info(filll_glue_order);
./lua/lmtinterface.c    302:     # define set_node_fill_value(n,k) lmt_interface.node_fill_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c    310:     lmt_interface.page_contribute_values = lmt_aux_allocate_value_info(contribute_rule);
./lua/lmtinterface.c    312:     # define set_page_contribute_value(n,k) lmt_interface.page_contribute_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c    319:     lmt_interface.math_style_values = lmt_aux_allocate_value_info(cramped_script_script_style);
./lua/lmtinterface.c    321:     # define set_math_style_value(n,k) lmt_interface.math_style_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c    332:     lmt_interface.math_indirect_values = lmt_aux_allocate_value_info(last_math_indirect);
./lua/lmtinterface.c    334:     # define set_math_indirect_value(n,k) lmt_interface.math_indirect_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .id = n }
./lua/lmtinterface.c    338:     set_math_indirect_value(indirect_math_integer,             integer);
./lua/lmtinterface.c    342:     set_math_indirect_value(indirect_math_register_integer,    registerinteger);
./lua/lmtinterface.c    346:     set_math_indirect_value(indirect_math_internal_integer,    internalinteger);
./lua/lmtinterface.c    347:     set_math_indirect_value(indirect_math_internal_dimension,  internaldimension);
./lua/lmtinterface.c    348:     set_math_indirect_value(indirect_math_internal_dimension,  internalgluespec);
./lua/lmtinterface.c    349:     set_math_indirect_value(indirect_math_internal_mugluespec, internalmugluespec);
./lua/lmtinterface.c    351:     lmt_interface.math_parameter_values = lmt_aux_allocate_value_info(last_math_parameter);
./lua/lmtinterface.c    353:     # define set_math_parameter_value(n,t,k) lmt_interface.math_parameter_values[n] = (value_info) { .lua = lua_key_index(k), .name = lua_key(k), .type = t }
./lua/lmtinterface.c    361:     set_math_parameter_value(math_parameter_x_scale,                          math_int_parameter,   xscale);
./lua/lmtinterface.c    362:     set_math_parameter_value(math_parameter_y_scale,                          math_int_parameter,   yscale);
./lua/lmtinterface.c    375:     set_math_parameter_value(math_parameter_radical_degree_raise,             math_int_parameter,   radicaldegreeraise);
./lua/lmtinterface.c    431:     set_math_parameter_value(math_parameter_prime_raise,                        math_int_parameter,    primeraise);
./lua/lmtinterface.c    432:     set_math_parameter_value(math_parameter_prime_raise_composed,               math_int_parameter,    primeraisecomposed);
./lua/lmtinterface.c    436:     set_math_parameter_value(math_parameter_prime_width,                        math_int_parameter,    primewidth);
./lua/lmtinterface.c    455:     set_math_parameter_value(math_parameter_accent_top_overshoot,               math_int_parameter,    accenttopovershoot);
./lua/lmtinterface.c    456:     set_math_parameter_value(math_parameter_accent_bottom_overshoot,            math_int_parameter,    accentbottomovershoot);
./lua/lmtinterface.c    458:     set_math_parameter_value(math_parameter_accent_superscript_percent,         math_int_parameter,    accentsuperscriptpercent);
./lua/lmtinterface.c    459:     set_math_parameter_value(math_parameter_accent_extend_margin,               math_int_parameter,    accentextendmargin);
./lua/lmtinterface.c    463:     set_math_parameter_value(math_parameter_delimiter_percent,                  math_int_parameter,    delimiterpercent);
./lua/lmtinterface.c    489:     lmt_interface.math_font_parameter_values = lmt_aux_allocate_value_info(math_parameter_last_code + 1);
./lua/lmtinterface.c    491:     # define set_math_font_parameter(n, t) lmt_interface.math_font_parameter_values[n] = (value_info) { .lua = lua_key_index(n), .name = lua_key(n), .type = t }
./lua/lmtinterface.c    493:     set_math_font_parameter(ScriptPercentScaleDown,                   math_int_parameter);
./lua/lmtinterface.c    494:     set_math_font_parameter(ScriptScriptPercentScaleDown,             math_int_parameter);
./lua/lmtinterface.c    551:     set_math_font_parameter(RadicalDegreeBottomRaisePercent,          math_int_parameter);
./lua/lmtinterface.c    558:     set_math_font_parameter(NoLimitSubFactor,                         math_int_parameter);
./lua/lmtinterface.c    559:     set_math_font_parameter(NoLimitSupFactor,                         math_int_parameter);
./lua/lmtinterface.c    560:     set_math_font_parameter(PrimeRaisePercent,                        math_int_parameter);
./lua/lmtinterface.c    561:     set_math_font_parameter(PrimeRaiseComposedPercent,                math_int_parameter);
./lua/lmtinterface.c    566:     set_math_font_parameter(PrimeWidthPercent,                        math_int_parameter);
./lua/lmtinterface.c    570:     set_math_font_parameter(AccentTopOvershoot,                       math_int_parameter);
./lua/lmtinterface.c    571:     set_math_font_parameter(AccentBottomOvershoot,                    math_int_parameter);
./lua/lmtinterface.c    573:     set_math_font_parameter(AccentSuperscriptPercent,                 math_int_parameter);
./lua/lmtinterface.c    577:     set_math_font_parameter(DelimiterPercent,                         math_int_parameter);
./lua/lmtlualib.c     36:     dump_int(f, lmt_lua_state.version_number);
./lua/lmtlualib.c     37:     dump_int(f, lmt_lua_state.release_number);
./lua/lmtlualib.c     38:     dump_int(f, lmt_lua_state.integer_size);
./lua/lmtlualib.c     39:     dump_int(f, lmt_lua_state.bytecode_max);
./lua/lmtlualib.c     47:         dump_int(f, n);
./lua/lmtlualib.c     51:                 dump_int(f, k);
./lua/lmtlualib.c     52:                 dump_int(f, b.size);
./lua/lmtlualib.c     64:     undump_int(f, version_number);
./lua/lmtlualib.c     68:     undump_int(f, release_number);
./lua/lmtlualib.c     72:     undump_int(f, integer_size);
./lua/lmtlualib.c     76:     undump_int(f, lmt_lua_state.bytecode_max);
./lua/lmtlualib.c     90:             undump_int(f, n);
./lua/lmtlualib.c     94:                 undump_int(f, slot);
./lua/lmtlualib.c     95:                 undump_int(f, size);
./lua/lmtmplib.c     56: static const char *mplib_interaction_options[] = {
./lua/lmtmplib.c    163:     "interim",         /* mp_interim_command             */ /* interim */
./lua/lmtmplib.c    165:     "newinternal",     /* mp_new_internal_command        */ /* newinternal */
./lua/lmtmplib.c    190:     "internal",        /* mp_internal_quantity_command   */ /* */
./lua/lmtmplib.c    557: static int mplib_aux_run_internal_function(lua_State *L, MP_options *options)
./lua/lmtmplib.c    559:     options->run_internal_id = mplib_aux_register_function(L, options->run_internal_id);
./lua/lmtmplib.c    560:     return (! options->run_internal_id);
./lua/lmtmplib.c    769: static void mplib_aux_run_internal(MP mp, int action, int n, int type, const char *name)
./lua/lmtmplib.c    771:     if (mp->run_internal_id) {
./lua/lmtmplib.c    774:         lua_rawgeti(L, LUA_REGISTRYINDEX, mp->run_internal_id);
./lua/lmtmplib.c   1155:                     lua_push_integer_at_key(L, state, st);
./lua/lmtmplib.c   1319: static int mplib_scan_integer(lua_State *L)
./lua/lmtmplib.c   1492: static int mplib_inject_integer(lua_State *L)
./lua/lmtmplib.c   1497:         mp_push_integer_value(mp, i);
./lua/lmtmplib.c   1621:         options->run_internal    = mplib_aux_run_internal;
./lua/lmtmplib.c   1639:                         options->interaction = luaL_checkoption(L, -1, "silent", mplib_interaction_options);
./lua/lmtmplib.c   1651:                     } else if (lua_key_eq(s, run_internal)) {
./lua/lmtmplib.c   1652:                         if (mplib_aux_run_internal_function(L, options)) {
./lua/lmtmplib.c   1732:         mplib_collect_id((mp)->run_internal_id);
./lua/lmtmplib.c   1778:     lua_push_integer_at_key(L, status, status);
./lua/lmtmplib.c   1908:         lua_push_integer_at_key(L, memory,     mp->var_used);                     /* bytes of node memory */
./lua/lmtmplib.c   1909:         lua_push_integer_at_key(L, hash,       mp->st_count);
./lua/lmtmplib.c   1910:         lua_push_integer_at_key(L, parameters, mp->max_param_stack);              /* allocated: mp->param_size */
./lua/lmtmplib.c   1911:         lua_push_integer_at_key(L, input,      mp->max_in_stack);                 /* allocated: mp->stack_size */
./lua/lmtmplib.c   1912:         lua_push_integer_at_key(L, tokens,     mp->num_token_nodes);
./lua/lmtmplib.c   1913:         lua_push_integer_at_key(L, pairs,      mp->num_pair_nodes);
./lua/lmtmplib.c   1914:         lua_push_integer_at_key(L, knots,      mp->num_knot_nodes);
./lua/lmtmplib.c   1915:         lua_push_integer_at_key(L, nodes,      mp->num_value_nodes);
./lua/lmtmplib.c   1916:         lua_push_integer_at_key(L, symbols,    mp->num_symbolic_nodes);
./lua/lmtmplib.c   1917:         lua_push_integer_at_key(L, characters, mp->max_pl_used);
./lua/lmtmplib.c   1918:         lua_push_integer_at_key(L, strings,    mp->max_strs_used);
./lua/lmtmplib.c   1919:         lua_push_integer_at_key(L, internals,  mp->int_ptr);                      /* allocates: mp->max_internal */
./lua/lmtmplib.c   1920:      /* lua_push_integer_at_key(L, buffer,     mp->max_buf_stack + 1); */         /* allocated: mp->buf_size */
./lua/lmtmplib.c   1921:      /* lua_push_integer_at_key(L, open,       mp->in_open_max - file_bottom); */ /* allocated: mp->max_in_open - file_bottom */
./lua/lmtmplib.c   2740:     lua_push_integer_at_key(L, file,       mplib_state.file_callbacks);
./lua/lmtmplib.c   2741:     lua_push_integer_at_key(L, text,       mplib_state.text_callbacks);
./lua/lmtmplib.c   2742:     lua_push_integer_at_key(L, script,     mplib_state.script_callbacks);
./lua/lmtmplib.c   2743:     lua_push_integer_at_key(L, log,        mplib_state.log_callbacks);
./lua/lmtmplib.c   2744:     lua_push_integer_at_key(L, overloaded, mplib_state.overload_callbacks);
./lua/lmtmplib.c   2745:     lua_push_integer_at_key(L, error,      mplib_state.error_callbacks);
./lua/lmtmplib.c   2746:     lua_push_integer_at_key(L, warning,    mplib_state.warning_callbacks);
./lua/lmtmplib.c   2747:     lua_push_integer_at_key(L, count,
./lua/lmtmplib.c   2949:                         lmt_error_state.last_intercept = 0;
./lua/lmtmplib.c   2955:                         if (! lmt_error_state.last_intercept) {
./lua/lmtmplib.c   2968:                 case lua_value_integer_code:
./lua/lmtmplib.c   2980:                         lmt_error_state.last_intercept = 0;
./lua/lmtmplib.c   2981:                         value = tex_scan_int(0, NULL);
./lua/lmtmplib.c   2986:                         if (lmt_error_state.last_intercept) {
./lua/lmtmplib.c   3087:     { "scaninteger",      mplib_scan_integer     },
./lua/lmtmplib.c   3101:     { "injectinteger",    mplib_inject_integer   },
./lua/lmtnodelib.c    294:             i = nodelib_aux_get_node_type_id_from_name(L, n, lmt_interface.node_data);
./lua/lmtnodelib.c    319:             i = nodelib_aux_get_field_index_from_name(L, n, lmt_interface.math_style_values);
./lua/lmtnodelib.c    337:             i = nodelib_aux_get_field_index_from_name(L, n, lmt_interface.math_parameter_values);
./lua/lmtnodelib.c    410:         lua_push_integer(L, n);
./lua/lmtnodelib.c    432:         int i = nodelib_aux_get_node_type_id_from_name(L, 1, lmt_interface.node_data);
./lua/lmtnodelib.c    856:                 lua_push_integer(L, get_noad_main_class(n)); 
./lua/lmtnodelib.c    857:                 lua_push_integer(L, get_noad_left_class(n)); 
./lua/lmtnodelib.c    858:                 lua_push_integer(L, get_noad_right_class(n));
./lua/lmtnodelib.c   3707:                     lua_push_integer_at_key(L, hsize,                              tex_get_par_par(p, par_hsize_code));
./lua/lmtnodelib.c   3708:                     lua_push_integer_at_key(L, leftskip,               glue_amount(tex_get_par_par(p, par_left_skip_code)));
./lua/lmtnodelib.c   3709:                     lua_push_integer_at_key(L, rightskip,              glue_amount(tex_get_par_par(p, par_right_skip_code)));
./lua/lmtnodelib.c   3710:                     lua_push_integer_at_key(L, hangindent,                         tex_get_par_par(p, par_hang_indent_code));
./lua/lmtnodelib.c   3711:                     lua_push_integer_at_key(L, hangafter,                          tex_get_par_par(p, par_hang_after_code));
./lua/lmtnodelib.c   3712:                     lua_push_integer_at_key(L, parindent,                          tex_get_par_par(p, par_par_indent_code));
./lua/lmtnodelib.c   3713:                     lua_push_integer_at_key(L, prevgraf,                           par_prev_graf(p));
./lua/lmtnodelib.c   3715:                         lua_push_integer_at_key(L, parfillleftskip,    glue_amount(tex_get_par_par(p, par_par_fill_left_skip_code)));
./lua/lmtnodelib.c   3716:                         lua_push_integer_at_key(L, parfillskip,        glue_amount(tex_get_par_par(p, par_par_fill_right_skip_code)));
./lua/lmtnodelib.c   3717:                         lua_push_integer_at_key(L, parinitleftskip,    glue_amount(tex_get_par_par(p, par_par_init_left_skip_code)));
./lua/lmtnodelib.c   3718:                         lua_push_integer_at_key(L, parinitrightskip,   glue_amount(tex_get_par_par(p, par_par_init_right_skip_code)));
./lua/lmtnodelib.c   3719:                         lua_push_integer_at_key(L, emergencyleftskip,  glue_amount(tex_get_par_par(p, emergency_left_skip_code)));
./lua/lmtnodelib.c   3720:                         lua_push_integer_at_key(L, emergencyrightskip, glue_amount(tex_get_par_par(p, emergency_right_skip_code)));
./lua/lmtnodelib.c   3721:                         lua_push_integer_at_key(L, adjustspacing,                  tex_get_par_par(p, par_adjust_spacing_code));
./lua/lmtnodelib.c   3722:                         lua_push_integer_at_key(L, protrudechars,                  tex_get_par_par(p, par_protrude_chars_code));
./lua/lmtnodelib.c   3723:                         lua_push_integer_at_key(L, pretolerance,                   tex_get_par_par(p, par_pre_tolerance_code));
./lua/lmtnodelib.c   3724:                         lua_push_integer_at_key(L, tolerance,                      tex_get_par_par(p, par_tolerance_code));
./lua/lmtnodelib.c   3725:                         lua_push_integer_at_key(L, emergencystretch,               tex_get_par_par(p, par_emergency_stretch_code));
./lua/lmtnodelib.c   3726:                         lua_push_integer_at_key(L, looseness,                      tex_get_par_par(p, par_looseness_code));
./lua/lmtnodelib.c   3727:                         lua_push_integer_at_key(L, lastlinefit,                    tex_get_par_par(p, par_last_line_fit_code));
./lua/lmtnodelib.c   3728:                         lua_push_integer_at_key(L, linepenalty,                    tex_get_par_par(p, par_line_penalty_code));
./lua/lmtnodelib.c   3729:                         lua_push_integer_at_key(L, interlinepenalty,               tex_get_par_par(p, par_inter_line_penalty_code));
./lua/lmtnodelib.c   3730:                         lua_push_integer_at_key(L, clubpenalty,                    tex_get_par_par(p, par_club_penalty_code));
./lua/lmtnodelib.c   3731:                         lua_push_integer_at_key(L, widowpenalty,                   tex_get_par_par(p, par_widow_penalty_code));
./lua/lmtnodelib.c   3732:                         lua_push_integer_at_key(L, displaywidowpenalty,            tex_get_par_par(p, par_display_widow_penalty_code));
./lua/lmtnodelib.c   3733:                         lua_push_integer_at_key(L, orphanpenalty,                  tex_get_par_par(p, par_orphan_penalty_code));
./lua/lmtnodelib.c   3734:                         lua_push_integer_at_key(L, singlelinepenalty,              tex_get_par_par(p, par_single_line_penalty_code));
./lua/lmtnodelib.c   3735:                         lua_push_integer_at_key(L, brokenpenalty,                  tex_get_par_par(p, par_broken_penalty_code));
./lua/lmtnodelib.c   3736:                         lua_push_integer_at_key(L, adjdemerits,                    tex_get_par_par(p, par_adj_demerits_code));
./lua/lmtnodelib.c   3737:                         lua_push_integer_at_key(L, doubleadjdemerits,              tex_get_par_par(p, par_double_adj_demerits_code));
./lua/lmtnodelib.c   3738:                         lua_push_integer_at_key(L, doublehyphendemerits,           tex_get_par_par(p, par_double_hyphen_demerits_code));
./lua/lmtnodelib.c   3739:                         lua_push_integer_at_key(L, finalhyphendemerits,            tex_get_par_par(p, par_final_hyphen_demerits_code));
./lua/lmtnodelib.c   3740:                         lua_push_integer_at_key(L, baselineskip,       glue_amount(tex_get_par_par(p, par_baseline_skip_code)));
./lua/lmtnodelib.c   3741:                         lua_push_integer_at_key(L, lineskip,           glue_amount(tex_get_par_par(p, par_line_skip_code)));
./lua/lmtnodelib.c   3742:                         lua_push_integer_at_key(L, lineskiplimit,                  tex_get_par_par(p, par_line_skip_limit_code));
./lua/lmtnodelib.c   3743:                         lua_push_integer_at_key(L, shapingpenaltiesmode,           tex_get_par_par(p, par_shaping_penalties_mode_code));
./lua/lmtnodelib.c   3744:                         lua_push_integer_at_key(L, shapingpenalty,                 tex_get_par_par(p, par_shaping_penalty_code));
./lua/lmtnodelib.c   3745:                         lua_push_integer_at_key(L, emergencyextrastretch,          tex_get_par_par(p, par_emergency_extra_stretch_code));
./lua/lmtnodelib.c   3749:                         lua_push_specification_at_key(L, interlinepenalties,       tex_get_par_par(p, par_inter_line_penalties_code));
./lua/lmtnodelib.c   3775:             lua_push_key_by_index(lmt_interface.node_data[i].lua);
./lua/lmtnodelib.c   3799:             i = nodelib_aux_get_node_type_id_from_name(L, 1, lmt_interface.node_data);
./lua/lmtnodelib.c   3809:                 j = nodelib_aux_get_node_subtype_id_from_name(L, 2, lmt_interface.node_data[i].subtypes);
./lua/lmtnodelib.c   4054:     lua_push_integer(L, count);
./lua/lmtnodelib.c   4839:         value_info *fields = lmt_interface.node_data[t].fields;
./lua/lmtnodelib.c   4890:     for (int i = 0; lmt_interface.node_data[i].id != -1; i++) {
./lua/lmtnodelib.c   4891:         if (lmt_interface.node_data[i].visible) {
./lua/lmtnodelib.c   4892:             lua_pushstring(L, lmt_interface.node_data[i].name);
./lua/lmtnodelib.c   4893:             lua_rawseti(L, -2, lmt_interface.node_data[i].id);
./lua/lmtnodelib.c   4906:     value_info *fields = lmt_interface.node_data[t].fields;
./lua/lmtnodelib.c   4930:                 lua_push_key_by_index(lmt_interface.field_type_values[fields[i].type].lua);
./lua/lmtnodelib.c   4971: //             return lmt_push_info_values(L, lmt_interface.node_fill_values);
./lua/lmtnodelib.c   4974: //             return lmt_push_info_values(L, lmt_interface.direction_values);
./lua/lmtnodelib.c   4977: //             return lmt_push_info_keys(L, lmt_interface.math_parameter_values);
./lua/lmtnodelib.c   4980: //             return lmt_push_info_values(L, lmt_interface.math_style_values);
./lua/lmtnodelib.c   4983: //             return lmt_push_info_values(L, lmt_interface.page_contribute_values);
./lua/lmtnodelib.c   4998:                      if (lua_key_eq(s, glyph))     subtypes = lmt_interface.node_data[glyph_node]    .subtypes;
./lua/lmtnodelib.c   4999:                 else if (lua_key_eq(s, glue))      subtypes = lmt_interface.node_data[glue_node]     .subtypes;
./lua/lmtnodelib.c   5000:                 else if (lua_key_eq(s, dir))       subtypes = lmt_interface.node_data[dir_node]      .subtypes;
./lua/lmtnodelib.c   5001:                 else if (lua_key_eq(s, mark))      subtypes = lmt_interface.node_data[mark_node]     .subtypes;
./lua/lmtnodelib.c   5002:                 else if (lua_key_eq(s, boundary))  subtypes = lmt_interface.node_data[boundary_node] .subtypes;
./lua/lmtnodelib.c   5003:                 else if (lua_key_eq(s, penalty))   subtypes = lmt_interface.node_data[penalty_node]  .subtypes;
./lua/lmtnodelib.c   5004:                 else if (lua_key_eq(s, kern))      subtypes = lmt_interface.node_data[kern_node]     .subtypes;
./lua/lmtnodelib.c   5005:                 else if (lua_key_eq(s, rule))      subtypes = lmt_interface.node_data[rule_node]     .subtypes;
./lua/lmtnodelib.c   5008:                      ||  lua_key_eq(s, vlist))     subtypes = lmt_interface.node_data[hlist_node]    .subtypes; /* too many but ok as reserved */
./lua/lmtnodelib.c   5009:                 else if (lua_key_eq(s, adjust))    subtypes = lmt_interface.node_data[adjust_node]   .subtypes;
./lua/lmtnodelib.c   5010:                 else if (lua_key_eq(s, disc))      subtypes = lmt_interface.node_data[disc_node]     .subtypes;
./lua/lmtnodelib.c   5011:                 else if (lua_key_eq(s, math))      subtypes = lmt_interface.node_data[math_node]     .subtypes;
./lua/lmtnodelib.c   5012:                 else if (lua_key_eq(s, noad))      subtypes = lmt_interface.node_data[simple_noad]   .subtypes;
./lua/lmtnodelib.c   5013:                 else if (lua_key_eq(s, radical))   subtypes = lmt_interface.node_data[radical_noad]  .subtypes;
./lua/lmtnodelib.c   5014:                 else if (lua_key_eq(s, accent))    subtypes = lmt_interface.node_data[accent_noad]   .subtypes;
./lua/lmtnodelib.c   5015:                 else if (lua_key_eq(s, fence))     subtypes = lmt_interface.node_data[fence_noad]    .subtypes;
./lua/lmtnodelib.c   5016:                 else if (lua_key_eq(s, choice))    subtypes = lmt_interface.node_data[choice_node]   .subtypes;
./lua/lmtnodelib.c   5017:                 else if (lua_key_eq(s, par))       subtypes = lmt_interface.node_data[par_node]      .subtypes;
./lua/lmtnodelib.c   5018:                 else if (lua_key_eq(s, attribute)) subtypes = lmt_interface.node_data[attribute_node].subtypes;
./lua/lmtnodelib.c   5023:                 case glyph_node:     subtypes = lmt_interface.node_data[glyph_node]    .subtypes; break;
./lua/lmtnodelib.c   5024:                 case glue_node:      subtypes = lmt_interface.node_data[glue_node]     .subtypes; break;
./lua/lmtnodelib.c   5025:                 case dir_node:       subtypes = lmt_interface.node_data[dir_node]      .subtypes; break;
./lua/lmtnodelib.c   5026:                 case boundary_node:  subtypes = lmt_interface.node_data[boundary_node] .subtypes; break;
./lua/lmtnodelib.c   5027:                 case penalty_node:   subtypes = lmt_interface.node_data[penalty_node]  .subtypes; break;
./lua/lmtnodelib.c   5028:                 case kern_node:      subtypes = lmt_interface.node_data[kern_node]     .subtypes; break;
./lua/lmtnodelib.c   5029:                 case rule_node:      subtypes = lmt_interface.node_data[rule_node]     .subtypes; break;
./lua/lmtnodelib.c   5030:                 case hlist_node:     subtypes = lmt_interface.node_data[hlist_node]    .subtypes; break;
./lua/lmtnodelib.c   5031:                 case vlist_node:     subtypes = lmt_interface.node_data[vlist_node]    .subtypes; break;
./lua/lmtnodelib.c   5032:                 case adjust_node:    subtypes = lmt_interface.node_data[adjust_node]   .subtypes; break;
./lua/lmtnodelib.c   5033:                 case disc_node:      subtypes = lmt_interface.node_data[disc_node]     .subtypes; break;
./lua/lmtnodelib.c   5034:                 case math_node:      subtypes = lmt_interface.node_data[math_node]     .subtypes; break;
./lua/lmtnodelib.c   5035:                 case simple_noad:    subtypes = lmt_interface.node_data[simple_noad]   .subtypes; break;
./lua/lmtnodelib.c   5036:                 case radical_noad:   subtypes = lmt_interface.node_data[radical_noad]  .subtypes; break;
./lua/lmtnodelib.c   5037:                 case accent_noad:    subtypes = lmt_interface.node_data[accent_noad]   .subtypes; break;
./lua/lmtnodelib.c   5038:                 case fence_noad:     subtypes = lmt_interface.node_data[fence_noad]    .subtypes; break;
./lua/lmtnodelib.c   5039:                 case choice_node:    subtypes = lmt_interface.node_data[choice_node]   .subtypes; break;
./lua/lmtnodelib.c   5040:                 case par_node:       subtypes = lmt_interface.node_data[par_node]      .subtypes; break;
./lua/lmtnodelib.c   5041:                 case attribute_node: subtypes = lmt_interface.node_data[attribute_node].subtypes; break;
./lua/lmtnodelib.c   6708:                                 lua_pushinteger(L, tex_get_local_interline_penalty(n));
./lua/lmtnodelib.c   6950:                                 lua_push_integer(L, split_insert_index(n));
./lua/lmtnodelib.c   7394:                                 tex_set_local_interline_penalty(n, lmt_tohalfword(L, 3));
./lua/lmtnodelib.c   7743:                             return luaL_error(L, "you can't assign to a %s node (%d)\n", lmt_interface.node_data[t].name, n);
./lua/lmtnodelib.c   7746:                     return luaL_error(L,"you can't set field %s in a %s node (%d)", s, lmt_interface.node_data[t].name, n);
./lua/lmtnodelib.c   7792:     node_info nd = lmt_interface.node_data[t];
./lua/lmtnodelib.c   8255:             lua_pushstring(L, lmt_interface.node_data[i].name);
./lua/lmtnodelib.c   8282:             lua_pushstring(L, lmt_interface.node_data[i].name);
./lua/lmtnodelib.c   9232:         lua_push_integer_at_key(L, leftskip, ls);
./lua/lmtnodelib.c   9233:         lua_push_integer_at_key(L, rightskip, rs);
./lua/lmtnodelib.c   9234:         lua_push_integer_at_key(L, lefthangskip, lh);
./lua/lmtnodelib.c   9235:         lua_push_integer_at_key(L, righthangskip, rh);
./lua/lmtnodelib.c   9236:         lua_push_integer_at_key(L, indent, is);
./lua/lmtnodelib.c   9237:         lua_push_integer_at_key(L, parfillleftskip, pl);
./lua/lmtnodelib.c   9238:         lua_push_integer_at_key(L, parfillrightskip, pr);
./lua/lmtnodelib.c   9239:         lua_push_integer_at_key(L, parinitleftskip, il);
./lua/lmtnodelib.c   9240:         lua_push_integer_at_key(L, parinitrightskip, ir);
./lua/lmtnodelib.c   9241:         lua_push_integer_at_key(L, correctionskip, cs);
./lua/lmtnodelib.c   9242:         lua_push_integer_at_key(L, first, first); /* points to a skip */
./lua/lmtnodelib.c   9243:         lua_push_integer_at_key(L, last, last);   /* points to a skip */
./lua/lmtnodelib.c   9244:         lua_push_integer_at_key(L, head, head);
./lua/lmtnodelib.c   9245:         lua_push_integer_at_key(L, tail, tail);
./lua/lmtnodelib.c   9248:             lua_push_integer_at_key(L, width, box_width(n));
./lua/lmtnodelib.c   9249:             lua_push_integer_at_key(L, height, box_height(n));
./lua/lmtnodelib.c   9250:             lua_push_integer_at_key(L, depth, box_depth(n));
./lua/lmtnodelib.c   9251:             lua_push_integer_at_key(L, left, ls + lh + pl + il);
./lua/lmtnodelib.c   9252:             lua_push_integer_at_key(L, right, rs + rh + pr + ir);
./lua/lmtnodelib.c   9253:             lua_push_integer_at_key(L, size, ns);
./lua/lmtnodelib.c  10606: # define get_integer_par(P,A,B) \
./lua/lmtnodelib.c  10636:                 lua_push_integer(L, identifier);
./lua/lmtnodelib.c  10637:                 lua_push_integer(L, callback);
./lua/lmtnodelib.c  10638:                 lua_push_integer(L, overfull);
./lua/lmtnodelib.c  10639:                 lua_push_integer(L, underfull);
./lua/lmtnodelib.c  10640:                 lua_push_integer(L, verdict);
./lua/lmtnodelib.c  10641:                 lua_push_integer(L, classified);
./lua/lmtnodelib.c  10642:                 lua_push_integer(L, threshold);
./lua/lmtnodelib.c  10643:                 lua_push_integer(L, badness);
./lua/lmtnodelib.c  10644:                 lua_push_integer(L, classes);
./lua/lmtnodelib.c  10658:                                 get_integer_par(v, tolerance, 0);
./lua/lmtnodelib.c  10663:                                 get_integer_par(v, linepenalty, 0);
./lua/lmtnodelib.c  10667:                                 get_integer_par(v, orphanpenalty, 0);
./lua/lmtnodelib.c  10671:                                 get_integer_par(v, singlelinepenalty, 0);
./lua/lmtnodelib.c  10675:                                 get_integer_par(v, extrahyphenpenalty, 0);
./lua/lmtnodelib.c  10679:                                 get_integer_par(v, doublehyphendemerits, 0);
./lua/lmtnodelib.c  10683:                                 get_integer_par(v, finalhyphendemerits, 0);
./lua/lmtnodelib.c  10687:                                 get_integer_par(v, adjdemerits, 0);
./lua/lmtnodelib.c  10691:                                 get_integer_par(v, doubleadjdemerits, 0);
./lua/lmtnodelib.c  10695:                                 get_integer_par(v, linebreakcriterion, 0);
./lua/lmtnodelib.c  10703:                                 get_integer_par(v, looseness, 0);
./lua/lmtnodelib.c  10707:                                 get_integer_par(v, adjustspacingstep, 0);
./lua/lmtnodelib.c  10711:                                 get_integer_par(v, adjustspacingshrink, 0);
./lua/lmtnodelib.c  10715:                                 get_integer_par(v, adjustspacingstretch, 0);
./lua/lmtnodelib.c  10719:                                 get_integer_par(v, adjustspacing, 0);
./lua/lmtnodelib.c  10724:                                     get_integer_par(v, optional, 0);
./lua/lmtstatuslib.c     59:     lua_set_integer_by_key(L, "approximate", (int) approximate);
./lua/lmtstatuslib.c     66:     lua_set_integer_by_key(L, "functionsize",   lmt_lua_state.function_table_size);
./lua/lmtstatuslib.c     67:     lua_set_integer_by_key(L, "propertiessize", lmt_node_memory_state.node_properties_table_size);
./lua/lmtstatuslib.c     68:     lua_set_integer_by_key(L, "bytecodes",      lmt_lua_state.bytecode_max);
./lua/lmtstatuslib.c     69:     lua_set_integer_by_key(L, "bytecodebytes",  lmt_lua_state.bytecode_bytes);
./lua/lmtstatuslib.c     70:     lua_set_integer_by_key(L, "statebytes",     lmt_lua_state.used_bytes);
./lua/lmtstatuslib.c     71:     lua_set_integer_by_key(L, "statebytesmax",  lmt_lua_state.used_bytes_max);
./lua/lmtstatuslib.c    105:     lua_set_integer_by_key(L, "set", data->size);
./lua/lmtstatuslib.c    106:     lua_set_integer_by_key(L, "min", data->minimum);
./lua/lmtstatuslib.c    107:     lua_set_integer_by_key(L, "max", data->maximum);
./lua/lmtstatuslib.c    108:     lua_set_integer_by_key(L, "top", data->top);
./lua/lmtstatuslib.c    115:     lua_set_integer_by_key(L, "set", data->size); /*tex Can |memory_data_unset|. */
./lua/lmtstatuslib.c    116:     lua_set_integer_by_key(L, "min", data->minimum);
./lua/lmtstatuslib.c    117:     lua_set_integer_by_key(L, "max", data->maximum);
./lua/lmtstatuslib.c    118:     lua_set_integer_by_key(L, "mem", data->allocated);
./lua/lmtstatuslib.c    119:     lua_set_integer_by_key(L, "all", data->allocated > 0 ? (int) lmt_rounded(((double) data->allocated) * ((double) data->itemsize)) : data->allocated);
./lua/lmtstatuslib.c    120:     lua_set_integer_by_key(L, "top", data->top - data->offset);
./lua/lmtstatuslib.c    121:     lua_set_integer_by_key(L, "ptr", data->ptr - data->offset);
./lua/lmtstatuslib.c    122:     lua_set_integer_by_key(L, "ini", data->initial); /*tex Can |memory_data_unset|. */
./lua/lmtstatuslib.c    123:     lua_set_integer_by_key(L, "stp", data->step);
./lua/lmtstatuslib.c    124:  // lua_set_integer_by_key(L, "off", data->offset);
./lua/lmtstatuslib.c    154:     lua_set_integer_by_key(L, "iocode",         lmt_input_state.cur_input.name > io_file_input_code ? io_file_input_code : lmt_input_state.cur_input.name);
./lua/lmtstatuslib.c    155:     lua_set_integer_by_key(L, "linenumber",     lmt_input_state.input_line);
./lua/lmtstatuslib.c    156:     lua_set_integer_by_key(L, "skiplinenumber", lmt_condition_state.skip_line);
./lua/lmtstatuslib.c    167:     lua_set_integer_by_key(L, "luatex_version",  lmt_version_state.version);
./lua/lmtstatuslib.c    168:     lua_set_integer_by_key(L, "luatex_revision", lmt_version_state.revision);
./lua/lmtstatuslib.c    169:     lua_set_integer_by_key(L, "luatex_release",  lmt_version_state.release);
./lua/lmtstatuslib.c    171:     lua_set_integer_by_key(L, "development_id",  lmt_version_state.developmentid);
./lua/lmtstatuslib.c    173:     lua_set_integer_by_key(L, "format_id",       lmt_version_state.formatid);
./lua/lmtstatuslib.c    174:     lua_set_integer_by_key(L, "tex_hash_size",   hash_size);
./lua/lmtstatuslib.c    177:     lua_set_integer_by_key(L, "run_state",       lmt_main_state.run_state);
./lua/lmtstatuslib.c    260:     lua_set_integer_by_key(L, "no_catcode_table",               no_catcode_table_preset);
./lua/lmtstatuslib.c    261:     lua_set_integer_by_key(L, "default_catcode_table",          default_catcode_table_preset);
./lua/lmtstatuslib.c    265:     lua_set_integer_by_key(L, "max_integer",                    max_integer);
./lua/lmtstatuslib.c    266:     lua_set_integer_by_key(L, "min_integer",                    min_integer);
./lua/lmtstatuslib.c    267:     lua_set_integer_by_key(L, "max_dimen",                      max_dimension); /* obsolete */
./lua/lmtstatuslib.c    268:     lua_set_integer_by_key(L, "min_dimen",                      min_dimension); /* obsolete */
./lua/lmtstatuslib.c    269:     lua_set_integer_by_key(L, "max_dimension",                  max_dimension);
./lua/lmtstatuslib.c    270:     lua_set_integer_by_key(L, "min_dimension",                  min_dimension);
./lua/lmtstatuslib.c    271:     lua_set_integer_by_key(L, "min_data_value",                 min_data_value);
./lua/lmtstatuslib.c    272:     lua_set_integer_by_key(L, "max_data_value",                 max_data_value);
./lua/lmtstatuslib.c    273:     lua_set_integer_by_key(L, "max_half_value",                 max_half_value);
./lua/lmtstatuslib.c    275:     lua_set_integer_by_key(L, "max_limited_scale",              max_limited_scale);
./lua/lmtstatuslib.c    277:     lua_set_integer_by_key(L, "one_bp",                         one_bp);
./lua/lmtstatuslib.c    279:     lua_set_integer_by_key(L, "infinity",                       max_infinity);
./lua/lmtstatuslib.c    280:     lua_set_integer_by_key(L, "min_infinity",                   min_infinity);
./lua/lmtstatuslib.c    281:     lua_set_integer_by_key(L, "awful_bad",                      awful_bad);
./lua/lmtstatuslib.c    282:     lua_set_integer_by_key(L, "infinite_bad",                   infinite_bad);
./lua/lmtstatuslib.c    283:     lua_set_integer_by_key(L, "infinite_penalty",               infinite_penalty);
./lua/lmtstatuslib.c    284:     lua_set_integer_by_key(L, "eject_penalty",                  eject_penalty);
./lua/lmtstatuslib.c    285:     lua_set_integer_by_key(L, "deplorable",                     deplorable);
./lua/lmtstatuslib.c    286:     lua_set_integer_by_key(L, "large_width_excess",             large_width_excess);
./lua/lmtstatuslib.c    287:     lua_set_integer_by_key(L, "small_stretchability",           small_stretchability);
./lua/lmtstatuslib.c    288:     lua_set_integer_by_key(L, "decent_criterion",               decent_criterion);
./lua/lmtstatuslib.c    289:     lua_set_integer_by_key(L, "loose_criterion",                loose_criterion);
./lua/lmtstatuslib.c    291:     lua_set_integer_by_key(L, "default_rule",                   default_rule);
./lua/lmtstatuslib.c    292:     lua_set_integer_by_key(L, "ignore_depth",                   ignore_depth);
./lua/lmtstatuslib.c    294:     lua_set_integer_by_key(L, "min_quarterword",                min_quarterword);
./lua/lmtstatuslib.c    295:     lua_set_integer_by_key(L, "max_quarterword",                max_quarterword);
./lua/lmtstatuslib.c    297:     lua_set_integer_by_key(L, "min_halfword",                   min_halfword);
./lua/lmtstatuslib.c    298:     lua_set_integer_by_key(L, "max_halfword",                   max_halfword);
./lua/lmtstatuslib.c    300:     lua_set_integer_by_key(L, "null_flag",                      null_flag);
./lua/lmtstatuslib.c    301:     lua_set_integer_by_key(L, "zero_glue",                      zero_glue);
./lua/lmtstatuslib.c    302:     lua_set_integer_by_key(L, "unity",                          unity);
./lua/lmtstatuslib.c    303:     lua_set_integer_by_key(L, "two",                            two);
./lua/lmtstatuslib.c    304:     lua_set_integer_by_key(L, "null",                           null);
./lua/lmtstatuslib.c    305:     lua_set_integer_by_key(L, "null_font",                      null_font);
./lua/lmtstatuslib.c    307:     lua_set_integer_by_key(L, "unused_attribute_value",         unused_attribute_value);
./lua/lmtstatuslib.c    308:     lua_set_integer_by_key(L, "unused_state_value",             unused_state_value);
./lua/lmtstatuslib.c    309:     lua_set_integer_by_key(L, "unused_script_value",            unused_script_value);
./lua/lmtstatuslib.c    311:     lua_set_integer_by_key(L, "preset_rule_thickness",          preset_rule_thickness);
./lua/lmtstatuslib.c    312:     lua_set_integer_by_key(L, "running_rule",                   null_flag);
./lua/lmtstatuslib.c    314:     lua_set_integer_by_key(L, "min_space_factor",               min_space_factor);
./lua/lmtstatuslib.c    315:     lua_set_integer_by_key(L, "max_space_factor",               max_space_factor);
./lua/lmtstatuslib.c    316:     lua_set_integer_by_key(L, "default_space_factor",           default_space_factor);
./lua/lmtstatuslib.c    317:     lua_set_integer_by_key(L, "default_tolerance",              default_tolerance);
./lua/lmtstatuslib.c    318:     lua_set_integer_by_key(L, "default_hangafter",              default_hangafter);
./lua/lmtstatuslib.c    319:     lua_set_integer_by_key(L, "default_deadcycles",             default_deadcycles);
./lua/lmtstatuslib.c    320:     lua_set_integer_by_key(L, "default_pre_display_gap",        default_pre_display_gap);
./lua/lmtstatuslib.c    321:     lua_set_integer_by_key(L, "default_eqno_gap_step",          default_eqno_gap_step);
./lua/lmtstatuslib.c    323:     lua_set_integer_by_key(L, "default_output_box",             default_output_box);
./lua/lmtstatuslib.c    325:     lua_set_integer_by_key(L, "max_n_of_fonts",                 max_n_of_fonts);
./lua/lmtstatuslib.c    326:     lua_set_integer_by_key(L, "max_n_of_bytecodes",             max_n_of_bytecodes);
./lua/lmtstatuslib.c    327:     lua_set_integer_by_key(L, "max_n_of_math_families",         max_n_of_math_families);
./lua/lmtstatuslib.c    328:     lua_set_integer_by_key(L, "max_n_of_languages",             max_n_of_languages);
./lua/lmtstatuslib.c    329:     lua_set_integer_by_key(L, "max_n_of_catcode_tables",        max_n_of_catcode_tables);
./lua/lmtstatuslib.c    330:  /* lua_set_integer_by_key(L, "max_n_of_hjcode_tables",         max_n_of_hjcode_tables); */ /* meaningless */
./lua/lmtstatuslib.c    331:     lua_set_integer_by_key(L, "max_n_of_marks",                 max_n_of_marks);
./lua/lmtstatuslib.c    333:     lua_set_integer_by_key(L, "max_character_code",             max_character_code);
./lua/lmtstatuslib.c    334:     lua_set_integer_by_key(L, "max_mark_index",                 max_mark_index);
./lua/lmtstatuslib.c    336:     lua_set_integer_by_key(L, "max_toks_register_index",        max_toks_register_index);
./lua/lmtstatuslib.c    337:     lua_set_integer_by_key(L, "max_box_register_index",         max_box_register_index);
./lua/lmtstatuslib.c    338:     lua_set_integer_by_key(L, "max_int_register_index",         max_int_register_index);
./lua/lmtstatuslib.c    339:     lua_set_integer_by_key(L, "max_float_register_index",       max_posit_register_index);
./lua/lmtstatuslib.c    340:     lua_set_integer_by_key(L, "max_dimension_register_index",   max_dimension_register_index);
./lua/lmtstatuslib.c    341:     lua_set_integer_by_key(L, "max_dimen_register_index",       max_dimension_register_index); /* obsolete */
./lua/lmtstatuslib.c    342:     lua_set_integer_by_key(L, "max_attribute_register_index",   max_attribute_register_index);
./lua/lmtstatuslib.c    343:     lua_set_integer_by_key(L, "max_glue_register_index",        max_glue_register_index);
./lua/lmtstatuslib.c    344:     lua_set_integer_by_key(L, "max_mu_glue_register_index",     max_mu_glue_register_index);
./lua/lmtstatuslib.c    346:     lua_set_integer_by_key(L, "max_bytecode_index",             max_bytecode_index);
./lua/lmtstatuslib.c    347:     lua_set_integer_by_key(L, "max_math_family_index",          max_math_family_index);
./lua/lmtstatuslib.c    348:     lua_set_integer_by_key(L, "max_math_class_code",            max_math_class_code);
./lua/lmtstatuslib.c    349:     lua_set_integer_by_key(L, "max_function_reference",         max_function_reference);
./lua/lmtstatuslib.c    350:     lua_set_integer_by_key(L, "max_category_code",              max_category_code);
./lua/lmtstatuslib.c    352:     lua_set_integer_by_key(L, "max_newline_character",          max_newline_character);
./lua/lmtstatuslib.c    354:     lua_set_integer_by_key(L, "max_size_of_word",               max_size_of_word);
./lua/lmtstatuslib.c    356:     lua_set_integer_by_key(L, "tex_hash_size",                  hash_size);
./lua/lmtstatuslib.c    357:     lua_set_integer_by_key(L, "tex_hash_prime",                 hash_prime);
./lua/lmtstatuslib.c    358:     lua_set_integer_by_key(L, "tex_eqtb_size",                  eqtb_size);
./lua/lmtstatuslib.c    360:     lua_set_integer_by_key(L, "math_begin_class",               math_begin_class);
./lua/lmtstatuslib.c    361:     lua_set_integer_by_key(L, "math_end_class",                 math_end_class);
./lua/lmtstatuslib.c    362:     lua_set_integer_by_key(L, "unused_math_family",             unused_math_family);
./lua/lmtstatuslib.c    363:     lua_set_integer_by_key(L, "unused_math_style",              unused_math_style);
./lua/lmtstatuslib.c    364:     lua_set_integer_by_key(L, "assumed_math_control",           assumed_math_control);
./lua/lmtstatuslib.c    366:     lua_set_integer_by_key(L, "undefined_math_parameter",       undefined_math_parameter);
./lua/lmtstatuslib.c    368:     lua_set_integer_by_key(L, "max_calculated_badness",         max_calculated_badness);
./lua/lmtstatuslib.c    370:     lua_set_integer_by_key(L, "max_math_scaling_factor",        max_math_scaling_factor);   
./lua/lmtstatuslib.c    371:     lua_set_integer_by_key(L, "math_default_penalty",           math_default_penalty);   
./lua/lmtstatuslib.c    373:     lua_set_integer_by_key(L, "max_font_adjust_step",           max_font_adjust_step);            
./lua/lmtstatuslib.c    374:     lua_set_integer_by_key(L, "max_font_adjust_stretch_factor", max_font_adjust_stretch_factor);
./lua/lmtstatuslib.c    375:     lua_set_integer_by_key(L, "max_font_adjust_shrink_factor",  max_font_adjust_shrink_factor);
./lua/lmttexlib.c    833: static const char *texlib_aux_scan_integer_part(lua_State *L, const char *ss, int *ret, int *radix_ret)
./lua/lmttexlib.c    864:                             if (result > max_integer) {
./lua/lmttexlib.c    891:                             if (result > max_integer) {
./lua/lmttexlib.c    912:                             if (result > max_integer) {
./lua/lmttexlib.c    925:         result = max_integer;
./lua/lmttexlib.c    967:         str = texlib_aux_scan_integer_part(L, ss, &result, &radix);
./lua/lmttexlib.c   1256: static int texlib_aux_integer_to_number(lua_State *L, const char *s)
./lua/lmttexlib.c   1260:     const char *d = texlib_aux_scan_integer_part(L, s, &result, &radix);
./lua/lmttexlib.c   1293:             i = texlib_aux_integer_to_number(L, lua_tostring(L, 1));
./lua/lmttexlib.c   1358:         case register_int_cmd       : index = eq_value(cs) - register_int_base;       break;
./lua/lmttexlib.c   1825:     return texlib_aux_checked_register(L, register_int_cmd, register_int_base, max_int_register_index, integer_cmd);
./lua/lmttexlib.c   1833:     int state = texlib_aux_check_for_index(L, slot++, "count", &index, internal_int_cmd, register_int_cmd, internal_int_base, register_int_base, max_int_register_index, integer_cmd);
./lua/lmttexlib.c   1841:                 tex_update_par_par(internal_int_cmd, index);
./lua/lmttexlib.c   1851:     int state = texlib_aux_check_for_index(L, 1, "count", &index, internal_int_cmd, register_int_cmd, internal_int_base, register_int_base, max_int_register_index, integer_cmd);
./lua/lmttexlib.c   2056:                     case register_int_cmd:
./lua/lmttexlib.c   2057:                         index = register_int_number(eq_value(cs));
./lua/lmttexlib.c   2702:     lua_push_integer_at_key(L, hsize, hsize_par);
./lua/lmttexlib.c   2703:     lua_push_integer_at_key(L, leftskip, left_skip_par ? glue_amount(left_skip_par) : 0);
./lua/lmttexlib.c   2704:     lua_push_integer_at_key(L, rightskip, right_skip_par ? glue_amount(right_skip_par) : 0);
./lua/lmttexlib.c   2705:     lua_push_integer_at_key(L, hangindent, hang_indent_par);
./lua/lmttexlib.c   2706:     lua_push_integer_at_key(L, hangafter, hang_after_par);
./lua/lmttexlib.c   2707:     lua_push_integer_at_key(L, parindent, par_indent_par);
./lua/lmttexlib.c   2723:                 case internal_int_cmd:
./lua/lmttexlib.c   2724:                 case register_int_cmd: /* ? */
./lua/lmttexlib.c   2729:                                 if (cmd == register_int_cmd) {
./lua/lmttexlib.c   2732:                                     tex_assign_internal_int_value(lua_toboolean(L, slot) ? add_frozen_flag(flags) : flags, eq_value(cs), n);
./lua/lmttexlib.c   2750:                                     tex_assign_internal_posit_value(lua_toboolean(L, slot) ? add_frozen_flag(flags) : flags, eq_value(cs), n);
./lua/lmttexlib.c   2771:                             tex_assign_internal_dimension_value(lua_toboolean(L, slot) ? add_frozen_flag(flags) : flags, eq_value(cs), n);
./lua/lmttexlib.c   2798:                                     tex_assign_internal_skip_value(lua_toboolean(L, slot) ? add_frozen_flag(flags) : flags, eq_value(cs), value);
./lua/lmttexlib.c   2809:                                         tex_assign_internal_skip_value(lua_toboolean(L, slot) ? add_frozen_flag(flags) : flags, eq_value(cs), n);
./lua/lmttexlib.c   2939:         case to_integer_code:          /* arg int */
./lua/lmttexlib.c   2975: static int texlib_aux_scan_internal(lua_State *L, int cmd, int code, int values)
./lua/lmttexlib.c   3057:         case last_chk_integer_code:
./lua/lmttexlib.c   3160:             return texlib_aux_scan_internal(L, some_item_cmd, code, -1);
./lua/lmttexlib.c   3207:                 case math_int_parameter:
./lua/lmttexlib.c   3238:                     case math_int_parameter:
./lua/lmttexlib.c   3301: static int texlib_get_internal(lua_State *L, int index, int all)
./lua/lmttexlib.c   3342:                     case internal_int_cmd:
./lua/lmttexlib.c   3343:                     case register_int_cmd:
./lua/lmttexlib.c   3362:                         return texlib_aux_scan_internal(L, cmd, code, -1);
./lua/lmttexlib.c   3367:                         return texlib_aux_scan_internal(L, cmd, code, all);
./lua/lmttexlib.c   3383:     int ret = texlib_get_internal(L, 1, (lua_type(L, 2) == LUA_TBOOLEAN) ? lua_toboolean(L, 2) : -1);
./lua/lmttexlib.c   3395:     int ret = texlib_get_internal(L, 2, -1);
./lua/lmttexlib.c   3983: # define get_integer_par(P,A,B) \
./lua/lmttexlib.c   4146:         get_integer_par  (properties.tracing_paragraphs,      tracingparagraphs,     tracing_paragraphs_par);
./lua/lmttexlib.c   4147:         get_integer_par  (properties.pretolerance,            pretolerance,          tex_get_par_par(par, par_pre_tolerance_code));
./lua/lmttexlib.c   4148:         get_integer_par  (properties.tolerance,               tolerance,             tex_get_par_par(par, par_tolerance_code));
./lua/lmttexlib.c   4151:         get_integer_par  (properties.looseness,               looseness,             tex_get_par_par(par, par_looseness_code));
./lua/lmttexlib.c   4152:         get_integer_par  (properties.adjust_spacing,          adjustspacing,         tex_get_par_par(par, par_adjust_spacing_code));
./lua/lmttexlib.c   4153:         get_integer_par  (properties.protrude_chars,          protrudechars,         tex_get_par_par(par, par_protrude_chars_code));
./lua/lmttexlib.c   4154:         get_integer_par  (properties.adj_demerits,            adjdemerits,           tex_get_par_par(par, par_adj_demerits_code));
./lua/lmttexlib.c   4155:         get_integer_par  (properties.double_adj_demerits,     doubleadjdemerits,     tex_get_par_par(par, par_double_adj_demerits_code));
./lua/lmttexlib.c   4156:         get_integer_par  (properties.line_penalty,            linepenalty,           tex_get_par_par(par, par_line_penalty_code));
./lua/lmttexlib.c   4157:         get_integer_par  (properties.last_line_fit,           lastlinefit,           tex_get_par_par(par, par_last_line_fit_code));
./lua/lmttexlib.c   4158:         get_integer_par  (properties.double_hyphen_demerits,  doublehyphendemerits,  tex_get_par_par(par, par_double_hyphen_demerits_code));
./lua/lmttexlib.c   4159:         get_integer_par  (properties.final_hyphen_demerits,   finalhyphendemerits,   tex_get_par_par(par, par_final_hyphen_demerits_code));
./lua/lmttexlib.c   4166:         get_integer_par  (properties.hang_after,              hangafter,             tex_get_par_par(par, par_hang_after_code));
./lua/lmttexlib.c   4167:         get_integer_par  (properties.inter_line_penalty,      interlinepenalty,      tex_get_par_par(par, par_inter_line_penalty_code));
./lua/lmttexlib.c   4168:         get_integer_par  (properties.club_penalty,            clubpenalty,           tex_get_par_par(par, par_club_penalty_code));
./lua/lmttexlib.c   4169:         get_integer_par  (properties.widow_penalty,           widowpenalty,          tex_get_par_par(par, par_widow_penalty_code));
./lua/lmttexlib.c   4170:         get_integer_par  (properties.display_widow_penalty,   displaywidowpenalty,   tex_get_par_par(par, par_display_widow_penalty_code));
./lua/lmttexlib.c   4171:         get_integer_par  (properties.orphan_penalty,          orphanpenalty,         tex_get_par_par(par, par_orphan_penalty_code));
./lua/lmttexlib.c   4172:         get_integer_par  (properties.single_line_penalty,     singlelinepenalty,     tex_get_par_par(par, par_single_line_penalty_code));
./lua/lmttexlib.c   4173:         get_integer_par  (properties.broken_penalty,          brokenpenalty,         tex_get_par_par(par, par_broken_penalty_code));
./lua/lmttexlib.c   4177:         get_integer_par  (properties.adjust_spacing,          adjustspacing,         tex_get_par_par(par, par_adjust_spacing_code));
./lua/lmttexlib.c   4178:         get_integer_par  (properties.adjust_spacing_step,     adjustspacingstep,     tex_get_par_par(par, par_adjust_spacing_step_code));
./lua/lmttexlib.c   4179:         get_integer_par  (properties.adjust_spacing_shrink,   adjustspacingshrink,   tex_get_par_par(par, par_adjust_spacing_shrink_code));
./lua/lmttexlib.c   4180:         get_integer_par  (properties.adjust_spacing_stretch,  adjustspacingstretch,  tex_get_par_par(par, par_adjust_spacing_stretch_code));
./lua/lmttexlib.c   4181:         get_integer_par  (properties.hyphenation_mode,        hyphenationmode,       tex_get_par_par(par, par_hyphenation_mode_code));
./lua/lmttexlib.c   4182:         get_integer_par  (properties.shaping_penalties_mode,  shapingpenaltiesmode,  tex_get_par_par(par, par_shaping_penalties_mode_code));
./lua/lmttexlib.c   4183:         get_integer_par  (properties.shaping_penalty,         shapingpenalty,        tex_get_par_par(par, par_shaping_penalty_code));
./lua/lmttexlib.c   4185:         get_penalties_par(properties.inter_line_penalties,    interlinepenalties,    tex_get_par_par(par, par_inter_line_penalties_code), inter_line_penalties_code);
./lua/lmttexlib.c   4191:         get_integer_par  (properties.tracing_passes,          tracingpasses,         tracing_passes_par);
./lua/lmttexlib.c   4192:         get_integer_par  (properties.line_break_criterion,    linebreakcriterion,    line_break_criterion_par);
./lua/lmttexlib.c   4193:         get_integer_par  (properties.line_break_optional,     linebreakoptional,     line_break_optional_par);
./lua/lmttexlib.c   4238:             /* set_integer_by_key(L, demerits, fewest_demerits); */
./lua/lmttexlib.c   4242:             /* set_integer_by_key(L, looseness, actual_looseness); */
./lua/lmttexlib.c   4246:             /* set_integer_by_key(L, prevdepth, cur_list.prev_depth); */
./lua/lmttexlib.c   4250:             /* set_integer_by_key(L, prevgraf, cur_list.prev_graf); */
./lua/lmttexlib.c   4257:         if (properties.inter_line_penalties    != tex_get_par_par(par, par_inter_line_penalties_code))    { tex_flush_node(properties.inter_line_penalties); }
./lua/lmttexlib.c   4569:                     lmt_error_state.last_intercept = 0;
./lua/lmttexlib.c   4575:                     if (! lmt_error_state.last_intercept) {
./lua/lmttexlib.c   4586:             case lua_value_integer_code:
./lua/lmttexlib.c   4598:                     lmt_error_state.last_intercept = 0;
./lua/lmttexlib.c   4599:                     value = tex_scan_integer(0, NULL);
./lua/lmttexlib.c   4604:                     if (lmt_error_state.last_intercept) {
./lua/lmttexlib.c   4927:             if (value >= min_integer && value <= max_integer) {
./lua/lmttexlib.c   4930:                 tex_formatted_error("lua", "integer only accepts values in the range %i-%i", min_integer, max_integer);
./lua/lmttexlib.c   5624:     return lmt_push_info_values(L, lmt_interface.group_code_values);
./lua/lmttexlib.c   5629:     return lmt_push_info_keys(L, lmt_interface.math_parameter_values);
./lua/lmttexlib.c   5634:     return lmt_push_info_values(L, lmt_interface.math_style_values);
./lua/lmttexlib.c   5639:     return lmt_push_info_values(L, lmt_interface.pack_type_values);
./lua/lmttexlib.c   5644:     return lmt_push_info_values(L, lmt_interface.par_context_values);
./lua/lmttexlib.c   5649:     return lmt_push_info_values(L, lmt_interface.page_context_values);
./lua/lmttexlib.c   5654:     return lmt_push_info_values(L, lmt_interface.append_line_context_values);
./lua/lmttexlib.c   5659:     return lmt_push_info_values(L, lmt_interface.alignment_context_values);
./lua/lmttexlib.c   5664:     return lmt_push_info_values(L, lmt_interface.break_context_values);
./lua/lmttexlib.c   5669:     return lmt_push_info_values(L, lmt_interface.build_context_values);
./lua/lmttexlib.c   5674:     return lmt_push_info_values(L, lmt_interface.par_begin_values);
./lua/lmttexlib.c   5679:     return lmt_push_info_values(L, lmt_interface.par_mode_values);
./lua/lmttexlib.c   5684:     return lmt_push_info_values(L, lmt_interface.math_style_name_values);
./lua/lmttexlib.c   5689:     return lmt_push_info_values(L, lmt_interface.math_style_variant_values);
./lua/lmttexlib.c   5783:     return lmt_push_info_values(L, lmt_interface.node_fill_values);
./lua/lmttexlib.c   5788:     return lmt_push_info_values(L, lmt_interface.direction_values);
./lua/lmttokenlib.c     76:     lmt_interface.command_names = lmt_memory_malloc((register_dimension_reference_cmd + 2) * sizeof(command_item));
./lua/lmttokenlib.c     78:     lmt_interface.command_names[escape_cmd]                           = (command_item) { .id = escape_cmd,                         .lua = lua_key_index(escape),                       .name = lua_key(escape),                           .kind = character_command_item, .min = 0,                         .max = max_character_code,           .base = 0,                       .fixedvalue = too_big_char };
./lua/lmttokenlib.c     79:     lmt_interface.command_names[left_brace_cmd]                       = (command_item) { .id = left_brace_cmd,                     .lua = lua_key_index(left_brace),                   .name = lua_key(left_brace),                       .kind = character_command_item, .min = 0,                         .max = max_character_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c     80:     lmt_interface.command_names[right_brace_cmd]                      = (command_item) { .id = right_brace_cmd,                    .lua = lua_key_index(right_brace),                  .name = lua_key(right_brace),                      .kind = character_command_item, .min = 0,                         .max = max_character_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c     81:     lmt_interface.command_names[math_shift_cmd]                       = (command_item) { .id = math_shift_cmd,                     .lua = lua_key_index(math_shift),                   .name = lua_key(math_shift),                       .kind = character_command_item, .min = 0,                         .max = max_character_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c     82:     lmt_interface.command_names[alignment_tab_cmd]                    = (command_item) { .id = alignment_tab_cmd,                  .lua = lua_key_index(alignment_tab),                .name = lua_key(alignment_tab),                    .kind = character_command_item, .min = 0,                         .max = max_character_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c     83:     lmt_interface.command_names[end_line_cmd]                         = (command_item) { .id = end_line_cmd,                       .lua = lua_key_index(end_line),                     .name = lua_key(end_line),                         .kind = character_command_item, .min = 0,                         .max = max_character_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c     84:     lmt_interface.command_names[parameter_cmd]                        = (command_item) { .id = parameter_cmd,                      .lua = lua_key_index(parameter),                    .name = lua_key(parameter),                        .kind = character_command_item, .min = 0,                         .max = max_character_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c     85:     lmt_interface.command_names[superscript_cmd]                      = (command_item) { .id = superscript_cmd,                    .lua = lua_key_index(superscript),                  .name = lua_key(superscript),                      .kind = character_command_item, .min = 0,                         .max = max_character_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c     86:     lmt_interface.command_names[subscript_cmd]                        = (command_item) { .id = subscript_cmd,                      .lua = lua_key_index(subscript),                    .name = lua_key(subscript),                        .kind = character_command_item, .min = 0,                         .max = max_character_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c     87:     lmt_interface.command_names[ignore_cmd]                           = (command_item) { .id = ignore_cmd,                         .lua = lua_key_index(ignore),                       .name = lua_key(ignore),                           .kind = character_command_item, .min = 0,                         .max = max_character_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c     88:     lmt_interface.command_names[spacer_cmd]                           = (command_item) { .id = spacer_cmd,                         .lua = lua_key_index(spacer),                       .name = lua_key(spacer),                           .kind = character_command_item, .min = 0,                         .max = max_character_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c     89:     lmt_interface.command_names[letter_cmd]                           = (command_item) { .id = letter_cmd,                         .lua = lua_key_index(letter),                       .name = lua_key(letter),                           .kind = character_command_item, .min = 0,                         .max = max_character_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c     90:     lmt_interface.command_names[other_char_cmd]                       = (command_item) { .id = other_char_cmd,                     .lua = lua_key_index(other_char),                   .name = lua_key(other_char),                       .kind = character_command_item, .min = 0,                         .max = max_character_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c     91:     lmt_interface.command_names[active_char_cmd]                      = (command_item) { .id = active_char_cmd,                    .lua = lua_key_index(active_char),                  .name = lua_key(active_char),                      .kind = character_command_item, .min = 0,                         .max = max_character_code,           .base = 0,                       .fixedvalue = too_big_char };
./lua/lmttokenlib.c     92:     lmt_interface.command_names[comment_cmd]                          = (command_item) { .id = comment_cmd,                        .lua = lua_key_index(comment),                      .name = lua_key(comment),                          .kind = character_command_item, .min = 0,                         .max = max_character_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c     93:     lmt_interface.command_names[invalid_char_cmd]                     = (command_item) { .id = invalid_char_cmd,                   .lua = lua_key_index(invalid_char),                 .name = lua_key(invalid_char),                     .kind = character_command_item, .min = 0,                         .max = max_character_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c     94:     lmt_interface.command_names[relax_cmd]                            = (command_item) { .id = relax_cmd,                          .lua = lua_key_index(relax),                        .name = lua_key(relax),                            .kind = regular_command_item,   .min = 0,                         .max = last_relax_code,              .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c     95:     lmt_interface.command_names[end_template_cmd]                     = (command_item) { .id = end_template_cmd,                   .lua = lua_key_index(alignment),                    .name = lua_key(alignment),                        .kind = regular_command_item,   .min = 0,                         .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c     96:     lmt_interface.command_names[alignment_cmd]                        = (command_item) { .id = alignment_cmd,                      .lua = lua_key_index(end_template),                 .name = lua_key(end_template),                     .kind = regular_command_item,   .min = 0,                         .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c     97:     lmt_interface.command_names[match_cmd]                            = (command_item) { .id = match_cmd,                          .lua = lua_key_index(match),                        .name = lua_key(match),                            .kind = regular_command_item,   .min = 0,                         .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c     98:     lmt_interface.command_names[end_match_cmd]                        = (command_item) { .id = end_match_cmd,                      .lua = lua_key_index(end_match),                    .name = lua_key(end_match),                        .kind = regular_command_item,   .min = 0,                         .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c     99:     lmt_interface.command_names[parameter_reference_cmd]              = (command_item) { .id = parameter_reference_cmd,            .lua = lua_key_index(parameter_reference),          .name = lua_key(parameter_reference),              .kind = regular_command_item,   .min = 0,                         .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    100:     lmt_interface.command_names[end_paragraph_cmd]                    = (command_item) { .id = end_paragraph_cmd,                  .lua = lua_key_index(end_paragraph),                .name = lua_key(end_paragraph),                    .kind = regular_command_item,   .min = 0,                         .max = last_end_paragraph_code,      .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    101:     lmt_interface.command_names[end_job_cmd]                          = (command_item) { .id = end_job_cmd,                        .lua = lua_key_index(end_job),                      .name = lua_key(end_job),                          .kind = regular_command_item,   .min = 0,                         .max = last_end_job_code,            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    102:     lmt_interface.command_names[delimiter_number_cmd]                 = (command_item) { .id = delimiter_number_cmd,               .lua = lua_key_index(delimiter_number),             .name = lua_key(delimiter_number),                 .kind = regular_command_item,   .min = 0,                         .max = last_math_delimiter_code,     .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    103:     lmt_interface.command_names[char_number_cmd]                      = (command_item) { .id = char_number_cmd,                    .lua = lua_key_index(char_number),                  .name = lua_key(char_number),                      .kind = regular_command_item,   .min = 0,                         .max = last_char_number_code,        .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    104:     lmt_interface.command_names[math_char_number_cmd]                 = (command_item) { .id = math_char_number_cmd,               .lua = lua_key_index(math_char_number),             .name = lua_key(math_char_number),                 .kind = regular_command_item,   .min = 0,                         .max = last_math_char_number_code,   .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    105:     lmt_interface.command_names[set_mark_cmd]                         = (command_item) { .id = set_mark_cmd,                       .lua = lua_key_index(set_mark),                     .name = lua_key(set_mark),                         .kind = regular_command_item,   .min = 0,                         .max = last_set_mark_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    106:     lmt_interface.command_names[node_cmd]                             = (command_item) { .id = node_cmd,                           .lua = lua_key_index(node),                         .name = lua_key(node),                             .kind = node_command_item,      .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    107:     lmt_interface.command_names[xray_cmd]                             = (command_item) { .id = xray_cmd,                           .lua = lua_key_index(xray),                         .name = lua_key(xray),                             .kind = regular_command_item,   .min = 0,                         .max = last_xray_code,               .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    108:     lmt_interface.command_names[make_box_cmd]                         = (command_item) { .id = make_box_cmd,                       .lua = lua_key_index(make_box),                     .name = lua_key(make_box),                         .kind = regular_command_item,   .min = 0,                         .max = last_nu_box_code,             .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    109:     lmt_interface.command_names[hmove_cmd]                            = (command_item) { .id = hmove_cmd,                          .lua = lua_key_index(hmove),                        .name = lua_key(hmove),                            .kind = regular_command_item,   .min = 0,                         .max = last_move_code,               .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    110:     lmt_interface.command_names[vmove_cmd]                            = (command_item) { .id = vmove_cmd,                          .lua = lua_key_index(vmove),                        .name = lua_key(vmove),                            .kind = regular_command_item,   .min = 0,                         .max = last_move_code,               .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    111:     lmt_interface.command_names[un_hbox_cmd]                          = (command_item) { .id = un_hbox_cmd,                        .lua = lua_key_index(un_hbox),                      .name = lua_key(un_hbox),                          .kind = regular_command_item,   .min = 0,                         .max = last_un_box_code,             .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    112:     lmt_interface.command_names[un_vbox_cmd]                          = (command_item) { .id = un_vbox_cmd,                        .lua = lua_key_index(un_vbox),                      .name = lua_key(un_vbox),                          .kind = regular_command_item,   .min = 0,                         .max = last_un_box_code,             .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    113:     lmt_interface.command_names[remove_item_cmd]                      = (command_item) { .id = remove_item_cmd,                    .lua = lua_key_index(remove_item),                  .name = lua_key(remove_item),                      .kind = regular_command_item,   .min = 0,                         .max = last_remove_item_code,        .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    114:     lmt_interface.command_names[hskip_cmd]                            = (command_item) { .id = hskip_cmd,                          .lua = lua_key_index(hskip),                        .name = lua_key(hskip),                            .kind = regular_command_item,   .min = first_skip_code,           .max = last_skip_code,               .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    115:     lmt_interface.command_names[vskip_cmd]                            = (command_item) { .id = vskip_cmd,                          .lua = lua_key_index(vskip),                        .name = lua_key(vskip),                            .kind = regular_command_item,   .min = first_skip_code,           .max = last_skip_code,               .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    116:     lmt_interface.command_names[mskip_cmd]                            = (command_item) { .id = mskip_cmd,                          .lua = lua_key_index(mskip),                        .name = lua_key(mskip),                            .kind = regular_command_item,   .min = 0,                         .max = last_mskip_code,              .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    117:     lmt_interface.command_names[kern_cmd]                             = (command_item) { .id = kern_cmd,                           .lua = lua_key_index(kern),                         .name = lua_key(kern),                             .kind = regular_command_item,   .min = 0,                         .max = last_kern_code,               .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    118:     lmt_interface.command_names[mkern_cmd]                            = (command_item) { .id = mkern_cmd,                          .lua = lua_key_index(mkern),                        .name = lua_key(mkern),                            .kind = regular_command_item,   .min = 0,                         .max = 0,                            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    119:     lmt_interface.command_names[leader_cmd]                           = (command_item) { .id = leader_cmd,                         .lua = lua_key_index(leader),                       .name = lua_key(leader),                           .kind = regular_command_item,   .min = first_leader_code,         .max = last_leader_code,             .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    120:     lmt_interface.command_names[legacy_cmd]                           = (command_item) { .id = legacy_cmd,                         .lua = lua_key_index(legacy),                       .name = lua_key(legacy),                           .kind = regular_command_item,   .min = first_legacy_code,         .max = last_legacy_code ,            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    121:     lmt_interface.command_names[local_box_cmd]                        = (command_item) { .id = local_box_cmd,                      .lua = lua_key_index(local_box),                    .name = lua_key(local_box),                        .kind = regular_command_item,   .min = first_local_box_code,      .max = last_local_box_code,          .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    122:     lmt_interface.command_names[halign_cmd]                           = (command_item) { .id = halign_cmd,                         .lua = lua_key_index(halign),                       .name = lua_key(halign),                           .kind = regular_command_item,   .min = 0,                         .max = 0,                            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    123:     lmt_interface.command_names[valign_cmd]                           = (command_item) { .id = valign_cmd,                         .lua = lua_key_index(valign),                       .name = lua_key(valign),                           .kind = regular_command_item,   .min = 0,                         .max = 0,                            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    124:     lmt_interface.command_names[vrule_cmd]                            = (command_item) { .id = vrule_cmd,                          .lua = lua_key_index(vrule),                        .name = lua_key(vrule),                            .kind = regular_command_item,   .min = first_rule_code,           .max = last_rule_code,               .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    125:     lmt_interface.command_names[hrule_cmd]                            = (command_item) { .id = hrule_cmd,                          .lua = lua_key_index(hrule),                        .name = lua_key(hrule),                            .kind = regular_command_item,   .min = first_rule_code,           .max = last_rule_code,               .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    126:     lmt_interface.command_names[insert_cmd]                           = (command_item) { .id = insert_cmd,                         .lua = lua_key_index(insert),                       .name = lua_key(insert),                           .kind = regular_command_item,   .min = 0,                         .max = 0,                            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    127:     lmt_interface.command_names[vadjust_cmd]                          = (command_item) { .id = vadjust_cmd,                        .lua = lua_key_index(vadjust),                      .name = lua_key(vadjust),                          .kind = regular_command_item,   .min = 0,                         .max = 0,                            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    128:     lmt_interface.command_names[ignore_something_cmd]                 = (command_item) { .id = ignore_something_cmd,               .lua = lua_key_index(ignore_something),             .name = lua_key(ignore_something),                 .kind = regular_command_item,   .min = 0,                         .max = last_ignore_something_code,   .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    129:     lmt_interface.command_names[after_something_cmd]                  = (command_item) { .id = after_something_cmd,                .lua = lua_key_index(after_something),              .name = lua_key(after_something),                  .kind = regular_command_item,   .min = 0,                         .max = last_after_something_code,    .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    130:     lmt_interface.command_names[penalty_cmd]                          = (command_item) { .id = penalty_cmd,                        .lua = lua_key_index(penalty),                      .name = lua_key(penalty),                          .kind = regular_command_item,   .min = 0,                         .max = 0,                            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    131:     lmt_interface.command_names[begin_paragraph_cmd]                  = (command_item) { .id = begin_paragraph_cmd,                .lua = lua_key_index(begin_paragraph),              .name = lua_key(begin_paragraph),                  .kind = regular_command_item,   .min = 0,                         .max = last_begin_paragraph_code,    .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    132:     lmt_interface.command_names[italic_correction_cmd]                = (command_item) { .id = italic_correction_cmd,              .lua = lua_key_index(italic_correction),            .name = lua_key(italic_correction),                .kind = regular_command_item,   .min = 0,                         .max = 0,                            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    133:     lmt_interface.command_names[accent_cmd]                           = (command_item) { .id = accent_cmd,                         .lua = lua_key_index(accent),                       .name = lua_key(accent),                           .kind = regular_command_item,   .min = 0,                         .max = 0,                            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    134:     lmt_interface.command_names[math_accent_cmd]                      = (command_item) { .id = math_accent_cmd,                    .lua = lua_key_index(math_accent),                  .name = lua_key(math_accent),                      .kind = regular_command_item,   .min = 0,                         .max = last_math_accent_code,        .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    135:     lmt_interface.command_names[discretionary_cmd]                    = (command_item) { .id = discretionary_cmd,                  .lua = lua_key_index(discretionary),                .name = lua_key(discretionary),                    .kind = regular_command_item,   .min = 0,                         .max = last_discretionary_code,      .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    136:     lmt_interface.command_names[equation_number_cmd]                  = (command_item) { .id = equation_number_cmd,                .lua = lua_key_index(equation_number),              .name = lua_key(equation_number),                  .kind = regular_command_item,   .min = first_location_code,       .max = last_location_code,           .base = 0,                       .fixedvalue = 0            }; /* maybe dedicated codes */
./lua/lmttokenlib.c    137:     lmt_interface.command_names[math_fence_cmd]                       = (command_item) { .id = math_fence_cmd,                     .lua = lua_key_index(math_fence),                   .name = lua_key(math_fence),                       .kind = regular_command_item,   .min = first_fence_code,          .max = last_fence_code,              .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    138:     lmt_interface.command_names[math_component_cmd]                   = (command_item) { .id = math_component_cmd,                 .lua = lua_key_index(math_component),               .name = lua_key(math_component),                   .kind = regular_command_item,   .min = first_math_component_type, .max = last_math_component_type,     .base = 0,                       .fixedvalue = 0            }; /* a bit too tolerant */
./lua/lmttokenlib.c    139:     lmt_interface.command_names[math_modifier_cmd]                    = (command_item) { .id = math_modifier_cmd,                  .lua = lua_key_index(math_modifier),                .name = lua_key(math_modifier),                    .kind = regular_command_item,   .min = first_math_modifier_code,  .max = last_math_modifier_code,      .base = 0,                       .fixedvalue = 0            }; /* a bit too tolerant */
./lua/lmttokenlib.c    140:     lmt_interface.command_names[math_fraction_cmd]                    = (command_item) { .id = math_fraction_cmd,                  .lua = lua_key_index(math_fraction),                .name = lua_key(math_fraction),                    .kind = regular_command_item,   .min = 0,                         .max = last_math_fraction_code,      .base = 0,                       .fixedvalue = 0            }; /* partial */
./lua/lmttokenlib.c    141:     lmt_interface.command_names[math_style_cmd]                       = (command_item) { .id = math_style_cmd,                     .lua = lua_key_index(math_style),                   .name = lua_key(math_style),                       .kind = regular_command_item,   .min = 0,                         .max = last_math_style,              .base = 0,                       .fixedvalue = 0            }; /* partial */
./lua/lmttokenlib.c    142:     lmt_interface.command_names[math_choice_cmd]                      = (command_item) { .id = math_choice_cmd,                    .lua = lua_key_index(math_choice),                  .name = lua_key(math_choice),                      .kind = regular_command_item,   .min = 0,                         .max = last_math_choice_code,        .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    143:     lmt_interface.command_names[vcenter_cmd]                          = (command_item) { .id = vcenter_cmd,                        .lua = lua_key_index(vcenter),                      .name = lua_key(vcenter),                          .kind = regular_command_item,   .min = 0,                         .max = 0,                            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    144:     lmt_interface.command_names[case_shift_cmd]                       = (command_item) { .id = case_shift_cmd,                     .lua = lua_key_index(case_shift),                   .name = lua_key(case_shift),                       .kind = regular_command_item,   .min = 0,                         .max = last_case_shift_code,         .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    145:     lmt_interface.command_names[message_cmd]                          = (command_item) { .id = message_cmd,                        .lua = lua_key_index(message),                      .name = lua_key(message),                          .kind = regular_command_item,   .min = 0,                         .max = last_message_code,            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    146:     lmt_interface.command_names[catcode_table_cmd]                    = (command_item) { .id = catcode_table_cmd,                  .lua = lua_key_index(catcode_table),                .name = lua_key(catcode_table),                    .kind = regular_command_item,   .min = 0,                         .max = last_catcode_table_code,      .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    147:     lmt_interface.command_names[end_local_cmd]                        = (command_item) { .id = end_local_cmd,                      .lua = lua_key_index(end_local),                    .name = lua_key(end_local),                        .kind = regular_command_item,   .min = 0,                         .max = 0,                            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    148:     lmt_interface.command_names[lua_function_call_cmd]                = (command_item) { .id = lua_function_call_cmd,              .lua = lua_key_index(lua_function_call),            .name = lua_key(lua_function_call),                .kind = reference_command_item, .min = 0,                         .max = max_function_reference,       .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    149:     lmt_interface.command_names[lua_protected_call_cmd]               = (command_item) { .id = lua_protected_call_cmd,             .lua = lua_key_index(lua_protected_call),           .name = lua_key(lua_protected_call),               .kind = reference_command_item, .min = 0,                         .max = max_function_reference,       .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    150:     lmt_interface.command_names[lua_semi_protected_call_cmd]          = (command_item) { .id = lua_semi_protected_call_cmd,        .lua = lua_key_index(lua_semiprotected_call),       .name = lua_key(lua_semiprotected_call),           .kind = reference_command_item, .min = 0,                         .max = max_function_reference,       .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    151:     lmt_interface.command_names[begin_group_cmd]                      = (command_item) { .id = begin_group_cmd,                    .lua = lua_key_index(begin_group),                  .name = lua_key(begin_group),                      .kind = regular_command_item,   .min = 0,                         .max = last_begin_group_code,        .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    152:     lmt_interface.command_names[end_group_cmd]                        = (command_item) { .id = end_group_cmd,                      .lua = lua_key_index(end_group),                    .name = lua_key(end_group),                        .kind = regular_command_item,   .min = 0,                         .max = 0,                            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    153:     lmt_interface.command_names[explicit_space_cmd]                   = (command_item) { .id = explicit_space_cmd,                 .lua = lua_key_index(explicit_space),               .name = lua_key(explicit_space),                   .kind = regular_command_item,   .min = 0,                         .max = 0,                            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    154:     lmt_interface.command_names[boundary_cmd]                         = (command_item) { .id = boundary_cmd,                       .lua = lua_key_index(boundary),                     .name = lua_key(boundary),                         .kind = regular_command_item,   .min = 0,                         .max = last_boundary_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    155:     lmt_interface.command_names[math_radical_cmd]                     = (command_item) { .id = math_radical_cmd,                   .lua = lua_key_index(math_radical),                 .name = lua_key(math_radical),                     .kind = regular_command_item,   .min = 0,                         .max = last_radical_code,            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    156:     lmt_interface.command_names[math_script_cmd]                      = (command_item) { .id = math_script_cmd,                    .lua = lua_key_index(math_script),                  .name = lua_key(math_script),                      .kind = regular_command_item,   .min = 0,                         .max = last_math_script_code,        .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    157:     lmt_interface.command_names[math_shift_cs_cmd]                    = (command_item) { .id = math_shift_cs_cmd,                  .lua = lua_key_index(math_shift_cs),                .name = lua_key(math_shift_cs),                    .kind = regular_command_item,   .min = 0,                         .max = last_math_shift_cs_code,      .base = 0,                       .fixedvalue = 0            }; /* a bit too tolerant */
./lua/lmttokenlib.c    158:     lmt_interface.command_names[end_cs_name_cmd]                      = (command_item) { .id = end_cs_name_cmd,                    .lua = lua_key_index(end_cs_name),                  .name = lua_key(end_cs_name),                      .kind = regular_command_item,   .min = 0,                         .max = 0,                            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    159:     lmt_interface.command_names[char_given_cmd]                       = (command_item) { .id = char_given_cmd,                     .lua = lua_key_index(char_given),                   .name = lua_key(char_given),                       .kind = character_command_item, .min = 0,                         .max = max_character_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    160:     lmt_interface.command_names[some_item_cmd]                        = (command_item) { .id = some_item_cmd,                      .lua = lua_key_index(some_item),                    .name = lua_key(some_item),                        .kind = regular_command_item,   .min = 0,                         .max = last_some_item_code,          .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    161:     lmt_interface.command_names[internal_toks_cmd]                    = (command_item) { .id = internal_toks_cmd,                  .lua = lua_key_index(internal_toks),                .name = lua_key(internal_toks),                    .kind = internal_command_item,  .min = first_toks_code,           .max = last_toks_code,               .base = internal_toks_base,      .fixedvalue = 0            };
./lua/lmttokenlib.c    162:     lmt_interface.command_names[register_toks_cmd]                    = (command_item) { .id = register_toks_cmd,                  .lua = lua_key_index(register_toks),                .name = lua_key(register_toks),                    .kind = register_command_item,  .min = 0,                         .max = biggest_reg,                  .base = register_toks_base,      .fixedvalue = 0            };
./lua/lmttokenlib.c    163:     lmt_interface.command_names[internal_int_cmd]                     = (command_item) { .id = internal_int_cmd,                   .lua = lua_key_index(internal_int),                 .name = lua_key(internal_int),                     .kind = internal_command_item,  .min = first_int_code,            .max = last_int_code,                .base = internal_int_base,       .fixedvalue = 0            };
./lua/lmttokenlib.c    164:     lmt_interface.command_names[register_int_cmd]                     = (command_item) { .id = register_int_cmd,                   .lua = lua_key_index(register_int),                 .name = lua_key(register_int),                     .kind = register_command_item,  .min = 0,                         .max = max_int_register_index,       .base = register_int_base,       .fixedvalue = 0            };
./lua/lmttokenlib.c    165:     lmt_interface.command_names[internal_attribute_cmd]               = (command_item) { .id = internal_attribute_cmd,             .lua = lua_key_index(internal_attribute),           .name = lua_key(internal_attribute),               .kind = unused_command_item,    .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    166:     lmt_interface.command_names[register_attribute_cmd]               = (command_item) { .id = register_attribute_cmd,             .lua = lua_key_index(register_attribute),           .name = lua_key(register_attribute),               .kind = register_command_item,  .min = 0,                         .max = max_attribute_register_index, .base = register_attribute_base, .fixedvalue = 0            };
./lua/lmttokenlib.c    167:     lmt_interface.command_names[internal_posit_cmd]                   = (command_item) { .id = internal_posit_cmd,                 .lua = lua_key_index(internal_posit),               .name = lua_key(internal_posit),                   .kind = unused_command_item,    .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    168:     lmt_interface.command_names[register_posit_cmd]                   = (command_item) { .id = register_posit_cmd,                 .lua = lua_key_index(register_posit),               .name = lua_key(register_posit),                   .kind = register_command_item,  .min = 0,                         .max = max_posit_register_index,     .base = register_posit_base,     .fixedvalue = 0            };
./lua/lmttokenlib.c    169:     lmt_interface.command_names[internal_dimension_cmd]               = (command_item) { .id = internal_dimension_cmd,             .lua = lua_key_index(internal_dimension),           .name = lua_key(internal_dimension),               .kind = internal_command_item,  .min = first_dimension_code,      .max = last_dimension_code,          .base = internal_dimension_base, .fixedvalue = 0            };
./lua/lmttokenlib.c    170:     lmt_interface.command_names[register_dimension_cmd]               = (command_item) { .id = register_dimension_cmd,             .lua = lua_key_index(register_dimension),           .name = lua_key(register_dimension),               .kind = register_command_item,  .min = 0,                         .max = max_dimension_register_index, .base = register_dimension_base, .fixedvalue = 0            };
./lua/lmttokenlib.c    171:     lmt_interface.command_names[internal_glue_cmd]                    = (command_item) { .id = internal_glue_cmd,                  .lua = lua_key_index(internal_glue),                .name = lua_key(internal_glue),                    .kind = internal_command_item,  .min = first_glue_code,           .max = last_glue_code,               .base = internal_glue_base,      .fixedvalue = 0            };
./lua/lmttokenlib.c    172:     lmt_interface.command_names[register_glue_cmd]                    = (command_item) { .id = register_glue_cmd,                  .lua = lua_key_index(register_glue),                .name = lua_key(register_glue),                    .kind = register_command_item,  .min = 0,                         .max = max_glue_register_index,      .base = register_glue_base,      .fixedvalue = 0            };
./lua/lmttokenlib.c    173:     lmt_interface.command_names[internal_mu_glue_cmd]                 = (command_item) { .id = internal_mu_glue_cmd,               .lua = lua_key_index(internal_mu_glue),             .name = lua_key(internal_mu_glue),                 .kind = internal_command_item,  .min = first_mu_glue_code,        .max = last_mu_glue_code,            .base = internal_mu_glue_base,   .fixedvalue = 0            };
./lua/lmttokenlib.c    174:     lmt_interface.command_names[register_mu_glue_cmd]                 = (command_item) { .id = register_mu_glue_cmd,               .lua = lua_key_index(register_mu_glue),             .name = lua_key(register_mu_glue),                 .kind = register_command_item,  .min = 0,                         .max = max_mu_glue_register_index,   .base = register_mu_glue_base,   .fixedvalue = 0            };
./lua/lmttokenlib.c    175:     lmt_interface.command_names[lua_value_cmd]                        = (command_item) { .id = lua_value_cmd,                      .lua = lua_key_index(lua_value),                    .name = lua_key(lua_value),                        .kind = reference_command_item, .min = 0,                         .max = max_function_reference,       .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    176:     lmt_interface.command_names[iterator_value_cmd]                   = (command_item) { .id = iterator_value_cmd,                 .lua = lua_key_index(iterator_value),               .name = lua_key(iterator_value),                   .kind = data_command_item,      .min = min_iterator_value,        .max = max_iterator_value,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    177:     lmt_interface.command_names[set_font_property_cmd]                = (command_item) { .id = set_font_property_cmd,              .lua = lua_key_index(set_font_property),            .name = lua_key(set_font_property),                .kind = regular_command_item,   .min = 0,                         .max = last_font_property_code,      .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    178:     lmt_interface.command_names[set_auxiliary_cmd]                    = (command_item) { .id = set_auxiliary_cmd,                  .lua = lua_key_index(set_auxiliary),                .name = lua_key(set_auxiliary),                    .kind = regular_command_item,   .min = 0,                         .max = last_auxiliary_code,          .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    179:     lmt_interface.command_names[set_page_property_cmd]                = (command_item) { .id = set_page_property_cmd,              .lua = lua_key_index(set_page_property),            .name = lua_key(set_page_property),                .kind = regular_command_item,   .min = 0,                         .max = last_page_property_code,      .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    180:     lmt_interface.command_names[set_box_property_cmd]                 = (command_item) { .id = set_box_property_cmd,               .lua = lua_key_index(set_box_property),             .name = lua_key(set_box_property),                 .kind = regular_command_item,   .min = 0,                         .max = last_box_property_code,       .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    181:     lmt_interface.command_names[set_specification_cmd]                = (command_item) { .id = set_specification_cmd,              .lua = lua_key_index(set_specification),            .name = lua_key(set_specification),                .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    182:     lmt_interface.command_names[define_char_code_cmd]                 = (command_item) { .id = define_char_code_cmd,               .lua = lua_key_index(define_char_code),             .name = lua_key(define_char_code),                 .kind = regular_command_item,   .min = 0,                         .max = last_charcode_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    183:     lmt_interface.command_names[define_family_cmd]                    = (command_item) { .id = define_family_cmd,                  .lua = lua_key_index(define_family),                .name = lua_key(define_family),                    .kind = regular_command_item,   .min = 0,                         .max = last_math_size,               .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    184:     lmt_interface.command_names[set_math_parameter_cmd]               = (command_item) { .id = set_math_parameter_cmd,             .lua = lua_key_index(set_math_parameter),           .name = lua_key(set_math_parameter),               .kind = regular_command_item,   .min = 0,                         .max = last_math_parameter,          .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    185:  // lmt_interface.command_names[set_font_cmd]                         = (command_item) { .id = set_font_cmd,                       .lua = lua_key_index(set_font),                     .name = lua_key(set_font),                         .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    186:     lmt_interface.command_names[set_font_cmd]                         = (command_item) { .id = set_font_cmd,                       .lua = lua_key_index(set_font),                     .name = lua_key(set_font),                         .kind = data_command_item,      .min = 0,                         .max = max_font_size,                .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    187:     lmt_interface.command_names[define_font_cmd]                      = (command_item) { .id = define_font_cmd,                    .lua = lua_key_index(define_font),                  .name = lua_key(define_font),                      .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    188:     lmt_interface.command_names[integer_cmd]                          = (command_item) { .id = integer_cmd,                        .lua = lua_key_index(integer),                      .name = lua_key(integer),                          .kind = data_command_item,      .min = min_integer,               .max = max_integer,                  .base = direct_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    189:     lmt_interface.command_names[posit_cmd]                            = (command_item) { .id = posit_cmd,                          .lua = lua_key_index(posit),                        .name = lua_key(posit),                            .kind = data_command_item,      .min = min_posit,                 .max = max_posit,                    .base = direct_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    190:     lmt_interface.command_names[dimension_cmd]                        = (command_item) { .id = dimension_cmd,                      .lua = lua_key_index(dimension),                    .name = lua_key(dimension),                        .kind = data_command_item,      .min = min_dimension,             .max = max_dimension,                .base = direct_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    191:     lmt_interface.command_names[gluespec_cmd]                         = (command_item) { .id = gluespec_cmd,                       .lua = lua_key_index(gluespec),                     .name = lua_key(gluespec),                         .kind = regular_command_item,   .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    192:     lmt_interface.command_names[mugluespec_cmd]                       = (command_item) { .id = mugluespec_cmd,                     .lua = lua_key_index(mugluespec),                   .name = lua_key(mugluespec),                       .kind = regular_command_item,   .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    193:     lmt_interface.command_names[mathspec_cmd]                         = (command_item) { .id = mathspec_cmd,                       .lua = lua_key_index(mathspec),                     .name = lua_key(fontspec),                         .kind = regular_command_item,   .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    194:     lmt_interface.command_names[fontspec_cmd]                         = (command_item) { .id = fontspec_cmd,                       .lua = lua_key_index(fontspec),                     .name = lua_key(fontspec),                         .kind = regular_command_item,   .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    195:     lmt_interface.command_names[register_cmd]                         = (command_item) { .id = register_cmd,                       .lua = lua_key_index(register),                     .name = lua_key(register),                         .kind = regular_command_item,   .min = first_value_level,         .max = last_value_level,             .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    196:     lmt_interface.command_names[combine_toks_cmd]                     = (command_item) { .id = combine_toks_cmd,                   .lua = lua_key_index(combine_toks),                 .name = lua_key(combine_toks),                     .kind = regular_command_item,   .min = 0,                         .max = last_combine_toks_code,       .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    197:     lmt_interface.command_names[arithmic_cmd]                         = (command_item) { .id = arithmic_cmd,                       .lua = lua_key_index(arithmic),                     .name = lua_key(arithmic),                         .kind = regular_command_item,   .min = 0,                         .max = last_arithmic_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    198:     lmt_interface.command_names[prefix_cmd]                           = (command_item) { .id = prefix_cmd,                         .lua = lua_key_index(prefix),                       .name = lua_key(prefix),                           .kind = regular_command_item,   .min = 0,                         .max = last_prefix_code,             .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    199:     lmt_interface.command_names[let_cmd]                              = (command_item) { .id = let_cmd,                            .lua = lua_key_index(let),                          .name = lua_key(let),                              .kind = regular_command_item,   .min = 0,                         .max = last_let_code,                .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    200:     lmt_interface.command_names[shorthand_def_cmd]                    = (command_item) { .id = shorthand_def_cmd,                  .lua = lua_key_index(shorthand_def),                .name = lua_key(shorthand_def),                    .kind = regular_command_item,   .min = 0,                         .max = last_shorthand_def_code,      .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    201:     lmt_interface.command_names[association_cmd]                      = (command_item) { .id = association_cmd,                    .lua = lua_key_index(association),                  .name = lua_key(association),                      .kind = regular_command_item,   .min = 0,                         .max = last_association_code,        .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    202:     lmt_interface.command_names[def_cmd]                              = (command_item) { .id = def_cmd,                            .lua = lua_key_index(def),                          .name = lua_key(def),                              .kind = regular_command_item,   .min = 0,                         .max = last_def_code,                .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    203:     lmt_interface.command_names[set_box_cmd]                          = (command_item) { .id = set_box_cmd,                        .lua = lua_key_index(set_box),                      .name = lua_key(set_box),                          .kind = regular_command_item,   .min = 0,                         .max = 0,                            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    204:     lmt_interface.command_names[hyphenation_cmd]                      = (command_item) { .id = hyphenation_cmd,                    .lua = lua_key_index(hyphenation),                  .name = lua_key(hyphenation),                      .kind = regular_command_item,   .min = 0,                         .max = last_hyphenation_code,        .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    205:     lmt_interface.command_names[set_interaction_cmd]                  = (command_item) { .id = set_interaction_cmd,                .lua = lua_key_index(set_interaction),              .name = lua_key(set_interaction),                  .kind = regular_command_item,   .min = 0,                         .max = last_interaction_level,       .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    206:     lmt_interface.command_names[undefined_cs_cmd]                     = (command_item) { .id = undefined_cs_cmd,                   .lua = lua_key_index(undefined_cs),                 .name = lua_key(undefined_cs),                     .kind = regular_command_item,   .min = 0,                         .max = 0,                            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    207:     lmt_interface.command_names[expand_after_cmd]                     = (command_item) { .id = expand_after_cmd,                   .lua = lua_key_index(expand_after),                 .name = lua_key(expand_after),                     .kind = regular_command_item,   .min = 0,                         .max = last_expand_after_code,       .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    208:     lmt_interface.command_names[no_expand_cmd]                        = (command_item) { .id = no_expand_cmd,                      .lua = lua_key_index(no_expand),                    .name = lua_key(no_expand),                        .kind = regular_command_item,   .min = 0,                         .max = 0,                            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    209:     lmt_interface.command_names[input_cmd]                            = (command_item) { .id = input_cmd,                          .lua = lua_key_index(input),                        .name = lua_key(input),                            .kind = regular_command_item,   .min = 0,                         .max = last_input_code,              .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    210:     lmt_interface.command_names[lua_call_cmd]                         = (command_item) { .id = lua_call_cmd,                       .lua = lua_key_index(lua_call),                     .name = lua_key(lua_call),                         .kind = reference_command_item, .min = 0,                         .max = max_function_reference,       .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    211:     lmt_interface.command_names[lua_local_call_cmd]                   = (command_item) { .id = lua_local_call_cmd,                 .lua = lua_key_index(lua_local_call),               .name = lua_key(lua_local_call),                   .kind = reference_command_item, .min = 0,                         .max = max_function_reference,       .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    212:     lmt_interface.command_names[begin_local_cmd]                      = (command_item) { .id = begin_local_cmd,                    .lua = lua_key_index(begin_local),                  .name = lua_key(begin_local),                      .kind = regular_command_item,   .min = 0,                         .max = 0,                            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    213:     lmt_interface.command_names[if_test_cmd]                          = (command_item) { .id = if_test_cmd,                        .lua = lua_key_index(if_test),                      .name = lua_key(if_test),                          .kind = regular_command_item,   .min = first_if_test_code,        .max = last_if_test_code,            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    214:     lmt_interface.command_names[cs_name_cmd]                          = (command_item) { .id = cs_name_cmd,                        .lua = lua_key_index(cs_name),                      .name = lua_key(cs_name),                          .kind = regular_command_item,   .min = 0,                         .max = last_cs_name_code,            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    215:     lmt_interface.command_names[convert_cmd]                          = (command_item) { .id = convert_cmd,                        .lua = lua_key_index(convert),                      .name = lua_key(convert),                          .kind = regular_command_item,   .min = 0,                         .max = last_convert_code,            .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    216:     lmt_interface.command_names[the_cmd]                              = (command_item) { .id = the_cmd,                            .lua = lua_key_index(the),                          .name = lua_key(the),                              .kind = regular_command_item,   .min = 0,                         .max = last_the_code,                .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    217:     lmt_interface.command_names[get_mark_cmd]                         = (command_item) { .id = get_mark_cmd,                       .lua = lua_key_index(get_mark),                     .name = lua_key(get_mark),                         .kind = regular_command_item,   .min = 0,                         .max = last_get_mark_code,           .base = 0,                       .fixedvalue = 0            };
./lua/lmttokenlib.c    218:     lmt_interface.command_names[call_cmd]                             = (command_item) { .id = call_cmd,                           .lua = lua_key_index(call),                         .name = lua_key(call),                             .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    219:     lmt_interface.command_names[protected_call_cmd]                   = (command_item) { .id = protected_call_cmd,                 .lua = lua_key_index(protected_call),               .name = lua_key(protected_call),                   .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    220:     lmt_interface.command_names[semi_protected_call_cmd]              = (command_item) { .id = semi_protected_call_cmd,            .lua = lua_key_index(semi_protected_call),          .name = lua_key(semi_protected_call),              .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    221:     lmt_interface.command_names[constant_call_cmd]                    = (command_item) { .id = constant_call_cmd,                  .lua = lua_key_index(constant_call),                .name = lua_key(constant_call),                    .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    222:     lmt_interface.command_names[tolerant_call_cmd]                    = (command_item) { .id = tolerant_call_cmd,                  .lua = lua_key_index(tolerant_call),                .name = lua_key(tolerant_call),                    .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    223:     lmt_interface.command_names[tolerant_protected_call_cmd]          = (command_item) { .id = tolerant_protected_call_cmd,        .lua = lua_key_index(tolerant_protected_call),      .name = lua_key(tolerant_protected_call),          .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    224:     lmt_interface.command_names[tolerant_semi_protected_call_cmd]     = (command_item) { .id = tolerant_semi_protected_call_cmd,   .lua = lua_key_index(tolerant_semi_protected_call), .name = lua_key(tolerant_semi_protected_call),     .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    225:     lmt_interface.command_names[deep_frozen_end_template_cmd]         = (command_item) { .id = deep_frozen_end_template_cmd,       .lua = lua_key_index(deep_frozen_end_template),     .name = lua_key(deep_frozen_end_template),         .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    226:     lmt_interface.command_names[deep_frozen_dont_expand_cmd]          = (command_item) { .id = deep_frozen_dont_expand_cmd,        .lua = lua_key_index(deep_frozen_dont_expand),      .name = lua_key(deep_frozen_dont_expand),          .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    227:     lmt_interface.command_names[deep_frozen_keep_constant_cmd]        = (command_item) { .id = deep_frozen_keep_constant_cmd,      .lua = lua_key_index(deep_frozen_keep_constant),    .name = lua_key(deep_frozen_keep_constant),        .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    228:     lmt_interface.command_names[internal_glue_reference_cmd]          = (command_item) { .id = internal_glue_reference_cmd,        .lua = lua_key_index(internal_glue_reference),      .name = lua_key(internal_glue_reference),          .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    229:     lmt_interface.command_names[register_glue_reference_cmd]          = (command_item) { .id = register_glue_reference_cmd,        .lua = lua_key_index(register_glue_reference),      .name = lua_key(register_glue_reference),          .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    230:     lmt_interface.command_names[internal_mu_glue_reference_cmd]       = (command_item) { .id = internal_mu_glue_reference_cmd,     .lua = lua_key_index(internal_mu_glue_reference),   .name = lua_key(internal_mu_glue_reference),       .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    231:     lmt_interface.command_names[register_mu_glue_reference_cmd]       = (command_item) { .id = register_mu_glue_reference_cmd,     .lua = lua_key_index(register_mu_glue_reference),   .name = lua_key(register_mu_glue_reference),       .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    232:     lmt_interface.command_names[internal_box_reference_cmd]           = (command_item) { .id = internal_box_reference_cmd,         .lua = lua_key_index(specification_reference),      .name = lua_key(specification_reference),          .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    233:     lmt_interface.command_names[register_box_reference_cmd]           = (command_item) { .id = register_box_reference_cmd,         .lua = lua_key_index(internal_box_reference),       .name = lua_key(internal_box_reference),           .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    234:     lmt_interface.command_names[internal_toks_reference_cmd]          = (command_item) { .id = internal_toks_reference_cmd,        .lua = lua_key_index(internal_toks_reference),      .name = lua_key(register_box_reference),           .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    235:     lmt_interface.command_names[register_toks_reference_cmd]          = (command_item) { .id = register_toks_reference_cmd,        .lua = lua_key_index(register_toks_reference),      .name = lua_key(register_toks_reference),          .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    236:     lmt_interface.command_names[specification_reference_cmd]          = (command_item) { .id = specification_reference_cmd,        .lua = lua_key_index(specification_reference),      .name = lua_key(specification_reference),          .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    237:     lmt_interface.command_names[unit_reference_cmd]                   = (command_item) { .id = unit_reference_cmd,                 .lua = lua_key_index(unit_reference),               .name = lua_key(unit_reference),                   .kind = token_command_item,     .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    238:     lmt_interface.command_names[internal_int_reference_cmd]           = (command_item) { .id = internal_int_reference_cmd,         .lua = lua_key_index(internal_int_reference),       .name = lua_key(internal_int_reference),           .kind = regular_command_item,   .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    239:     lmt_interface.command_names[register_int_reference_cmd]           = (command_item) { .id = register_int_reference_cmd,         .lua = lua_key_index(register_int_reference),       .name = lua_key(register_int_reference),           .kind = regular_command_item,   .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    240:     lmt_interface.command_names[internal_attribute_reference_cmd]     = (command_item) { .id = internal_attribute_reference_cmd,   .lua = lua_key_index(internal_attribute_reference), .name = lua_key(internal_attribute_reference),     .kind = regular_command_item,   .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    241:     lmt_interface.command_names[register_attribute_reference_cmd]     = (command_item) { .id = register_attribute_reference_cmd,   .lua = lua_key_index(register_attribute_reference), .name = lua_key(register_attribute_reference),     .kind = regular_command_item,   .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    242:     lmt_interface.command_names[internal_posit_reference_cmd]         = (command_item) { .id = internal_posit_reference_cmd,       .lua = lua_key_index(internal_posit_reference),     .name = lua_key(internal_posit_reference),         .kind = regular_command_item,   .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    243:     lmt_interface.command_names[register_posit_reference_cmd]         = (command_item) { .id = register_posit_reference_cmd,       .lua = lua_key_index(register_posit_reference),     .name = lua_key(register_posit_reference),         .kind = regular_command_item,   .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    244:     lmt_interface.command_names[internal_dimension_reference_cmd]     = (command_item) { .id = internal_dimension_reference_cmd,   .lua = lua_key_index(internal_dimension_reference),     .name = lua_key(internal_dimension_reference), .kind = regular_command_item,   .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    245:     lmt_interface.command_names[register_dimension_reference_cmd]     = (command_item) { .id = register_dimension_reference_cmd,   .lua = lua_key_index(register_dimension_reference),     .name = lua_key(register_dimension_reference), .kind = regular_command_item,   .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    246:     lmt_interface.command_names[register_dimension_reference_cmd + 1] = (command_item) { .id = unknown_value,                      .lua = 0,                                           .name = NULL,                                      .kind = unused_command_item,    .min = ignore_entry,              .max = ignore_entry,                 .base = ignore_entry,            .fixedvalue = 0            };
./lua/lmttokenlib.c    248:     if (lmt_interface.command_names[last_cmd].id != last_cmd) {
./lua/lmttokenlib.c    279:     for (int i = 0; lmt_interface.command_names[i].id != -1; i++) {
./lua/lmttokenlib.c    280:         if (s == lmt_interface.command_names[i].name) {
./lua/lmttokenlib.c    305:     command_item item = lmt_interface.command_names[cmd];
./lua/lmttokenlib.c    348:         command_item item = lmt_interface.command_names[cmd];
./lua/lmttokenlib.c    899: static int tokenlib_scan_integer(lua_State *L)
./lua/lmttokenlib.c    903:     halfword v = tex_scan_integer(eq, NULL);
./lua/lmttokenlib.c    920: static int tokenlib_gobble_integer(lua_State *L)
./lua/lmttokenlib.c    925:     lmt_error_state.last_intercept = 0;
./lua/lmttokenlib.c    926:     tex_scan_integer(eq, NULL);
./lua/lmttokenlib.c    927:     lua_pushboolean(L, ! lmt_error_state.last_intercept);
./lua/lmttokenlib.c    929:     lmt_error_state.last_intercept = 0;
./lua/lmttokenlib.c   1147: static int tokenlib_scan_integer_indeed(lua_State *L, int cardinal)
./lua/lmttokenlib.c   1262:     return tokenlib_scan_integer_indeed(L, 0);
./lua/lmttokenlib.c   1267:     return tokenlib_scan_integer_indeed(L, 1);
./lua/lmttokenlib.c   1320:     lmt_error_state.last_intercept = 0;
./lua/lmttokenlib.c   1322:     lua_pushboolean(L, ! lmt_error_state.last_intercept);
./lua/lmttokenlib.c   1324:     lmt_error_state.last_intercept = 0;
./lua/lmttokenlib.c   1632: static int tokenlib_scan_integer_argument(lua_State *L)
./lua/lmttokenlib.c   1642:     lua_pushinteger(L, (int) tex_scan_integer(0, NULL));
./lua/lmttokenlib.c   2617:         command_item item = lmt_interface.command_names[cmd];
./lua/lmttokenlib.c   2651:     lua_push_key_by_index(lmt_interface.command_names[cmd].lua);
./lua/lmttokenlib.c   2658:         lua_push_key_by_index(lmt_interface.command_names[cmd].lua);
./lua/lmttokenlib.c   2991:         lua_push_key_by_index(lmt_interface.command_names[cmd].lua);
./lua/lmttokenlib.c   3045:                 cmn = lmt_interface.command_names[cmd].name;
./lua/lmttokenlib.c   3046:                 switch (lmt_interface.command_names[cmd].base) {
./lua/lmttokenlib.c   3051:                         chr -= lmt_interface.command_names[cmd].base;
./lua/lmttokenlib.c   3624: static int tokenlib_set_integer(lua_State *L)
./lua/lmttokenlib.c   3626:     return tokenlib_set_constant_value(L, integer_cmd, min_integer, max_integer);
./lua/lmttokenlib.c   3639: static int tokenlib_get_integer(lua_State *L)
./lua/lmttokenlib.c   3683:         lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.command_names[i].lua);
./lua/lmttokenlib.c   3684:         lua_rawseti(L, -2, lmt_interface.command_names[i].id);
./lua/lmttokenlib.c   3691:     return lmt_push_info_values(L, lmt_interface.lua_function_values);
./lua/lmttokenlib.c   3717:     { "scaninteger",           tokenlib_scan_integer            },
./lua/lmttokenlib.c   3718:     { "scanintegerargument",   tokenlib_scan_integer_argument   },
./lua/lmttokenlib.c   3788:     { "setinteger",            tokenlib_set_integer             }, /* can go ... also in texlib */
./lua/lmttokenlib.c   3789:     { "getinteger",            tokenlib_get_integer             }, /* can go ... also in texlib */
./lua/lmttokenlib.c   3793:     { "gobbleinteger",         tokenlib_gobble_integer          },
./lua/lmttokenlib.c   3955:                 case lua_value_integer_code:
./lua/lmttokenlib.c   3959:                         if (*value < - max_integer) {
./lua/lmttokenlib.c   3960:                             *value = max_integer;
./lua/lmttokenlib.c   3961:                         } else if (*value > max_integer) {
./lua/lmttokenlib.c   3962:                             *value = max_integer;
./lua/lmttokenlib.c   3973:                         if (*value > max_integer) {
./luacore/lua54/src/lapi.c    172:          : cast_int(L->top.p - L->ci->func.p) + idx;
./luacore/lua54/src/lapi.c    177:   return cast_int(L->top.p - (L->ci->func.p + 1));
./luacore/lua54/src/lapi.c   1071:     ci->u2.funcidx = cast_int(savestack(L, c.func));
./luacore/lua54/src/lapi.c   1157:       res = cast_int(gettotalbytes(g) >> 10);
./luacore/lua54/src/lapi.c   1161:       res = cast_int(gettotalbytes(g) & 0x3ff);
./luacore/lua54/src/lbaselib.c    304:   i = luaL_intop(+, i, 1);
./luacore/lua54/src/lcode.c    550:     k = cast_int(ivalue(idx));
./luacore/lua54/src/lcode.c    585: static int luaK_intK (FuncState *fs, lua_Integer n) {
./luacore/lua54/src/lcode.c    672: void luaK_int (FuncState *fs, int reg, lua_Integer i) {
./luacore/lua54/src/lcode.c    674:     codeAsBx(fs, OP_LOADI, reg, cast_int(i));
./luacore/lua54/src/lcode.c    676:     luaK_codek(fs, reg, luaK_intK(fs, i));
./luacore/lua54/src/lcode.c    683:     codeAsBx(fs, OP_LOADF, reg, cast_int(fi));
./luacore/lua54/src/lcode.c    852:       luaK_int(fs, reg, e->u.ival);
./luacore/lua54/src/lcode.c   1005:       case VKINT: info = luaK_intK(fs, e->u.ival); break;
./luacore/lua54/src/lcode.c   1264:     *pi = int2sC(cast_int(i));
./luacore/lua54/src/lcode.c   1299:       t->u.ind.idx = cast_int(k->u.ival);  /* int. constant in proper range */
./luacore/lua54/src/lcode.c   1362:   return cast(OpCode, (cast_int(opr) - cast_int(baser)) + cast_int(base));
./luacore/lua54/src/lcode.c   1370:   return cast(OpCode, (cast_int(opr) - cast_int(OPR_MINUS)) +
./luacore/lua54/src/lcode.c   1371:                                        cast_int(OP_UNM));
./luacore/lua54/src/lcode.c   1380:   return cast(TMS, (cast_int(opr) - cast_int(OPR_ADD)) + cast_int(TM_ADD));
./luacore/lua54/src/lcode.c   1440:   int v2 = int2sC(cast_int(e2->u.ival));  /* immediate operand */
./luacore/lua54/src/lcode.c   1470:       int v2 = cast_int(i2);
./luacore/lua54/src/ldo.c    255:     int needed = cast_int(L->top.p - L->stack.p) + n;
./luacore/lua54/src/ldo.c    284:   res = cast_int(lim - L->stack.p) + 1;  /* part of stack in use */
./luacore/lua54/src/ldo.c    525:     int narg = cast_int(L->top.p - func) - 1;
./luacore/lua54/src/ldo.c    600:       int narg = cast_int(L->top.p - func) - 1;  /* number of real arguments */
./luacore/lua54/src/ldo.c    860:                                     : cast_int(L->top.p - (L->ci->func.p + 1));
./luacore/lua54/src/lfunc.c    128:     int idx = cast_int(level - L->ci->func.p);  /* variable index */
./luacore/lua54/src/liolib.c    132: #define l_seeknum		__int64
./luacore/lua54/src/lmathlib.c    352: typedef unsigned int lu_int32;
./luacore/lua54/src/lmathlib.c    354: typedef unsigned long lu_int32;
./luacore/lua54/src/lmathlib.c    362:   lu_int32 h;  /* higher half */
./luacore/lua54/src/lmathlib.c    363:   lu_int32 l;  /* lower half */
./luacore/lua54/src/lmathlib.c    368: ** If 'lu_int32' has more than 32 bits, the extra bits do not interfere
./luacore/lua54/src/lmathlib.c    382: static Rand64 packI (lu_int32 h, lu_int32 l) {
./luacore/lua54/src/lmathlib.c    455: #define UONE		((lu_int32)1)
./luacore/lua54/src/lmathlib.c    508:   return packI((lu_int32)((n >> 31) >> 1), (lu_int32)n);
./luacore/lua54/src/lobject.c    274: #define MAXLASTD	cast_int(LUA_MAXINTEGER % 10)
./luacore/lua54/src/lobject.c    359:     len = lua_integer2str(buff, MAXNUMBER2STR, ivalue(obj));
./luacore/lua54/src/lobject.c    455:     char *bf = getbuff(buff, cast_int(slen));
./luacore/lua54/src/lobject.c    457:     addsize(buff, cast_int(slen));
./luacore/lua54/src/lparser.c    392:   for (i = cast_int(fs->nactvar) - 1; i >= 0; i--) {
./luacore/lua54/src/lparser.c   1584:     luaK_int(fs, fs->freereg, 1);
./luacore/lua54/src/lstate.c    337:   luaD_reallocstack(L, cast_int(ci->top.p - L->stack.p), 0);
./luacore/lua54/src/lstring.c     28: #define MAXSTRTB	cast_int(luaM_limitN(MAX_INT, TString*))
./luacore/lua54/src/ltable.c     46: #define MAXABITS	cast_int(sizeof(int) * CHAR_BIT - 1)
./luacore/lua54/src/ltable.c    111:     return hashmod(t, cast_int(ui));
./luacore/lua54/src/ltable.c    141:     return cast_int(u <= cast_uint(INT_MAX) ? u : ~u);
./luacore/lua54/src/ltable.c    342:     i = cast_int(nodefromval(n) - gnode(t, 0));  /* key index in hash table */
./luacore/lua54/src/ltable.c    359:   for (i -= asize; cast_int(i) < sizenode(t); i++) {  /* hash part */
./luacore/lua54/src/ltable.c    493:     for (i = 0; i < cast_int(size); i++) {
./luacore/lua54/src/ltable.c    699:       gnext(othern) = cast_int(f - othern);  /* rechain to point to 'f' */
./luacore/lua54/src/ltable.c    702:         gnext(f) += cast_int(mp - f);  /* correct 'next' */
./luacore/lua54/src/ltable.c    710:         gnext(f) = cast_int((mp + gnext(mp)) - f);  /* chain new position */
./luacore/lua54/src/ltable.c    712:       gnext(mp) = cast_int(f - mp);
./luacore/lua54/src/ltablib.c     64:   e = luaL_intop(+, e, 1);  /* first empty element */
./luacore/lua54/src/ltm.c    241:   int actual = cast_int(L->top.p - ci->func.p) - 1;  /* number of arguments */
./luacore/lua54/src/lundump.c     89:   return cast_int(loadUnsigned(S, INT_MAX));
./luacore/lua54/src/lvm.c     53: ** 'l_intfitsf' checks whether a given integer is in the range that
./luacore/lua54/src/lvm.c     74: #define l_intfitsf(i)	((MAXINTFITSF + l_castS2U(i)) <= (2 * MAXINTFITSF))
./luacore/lua54/src/lvm.c     78: #define l_intfitsf(i)	1
./luacore/lua54/src/lvm.c    402: ** exact representation as a float ('l_intfitsf'), compare numbers as
./luacore/lua54/src/lvm.c    406: ** (The test with 'l_intfitsf' is only for performance; the else
./luacore/lua54/src/lvm.c    412:   if (l_intfitsf(i))
./luacore/lua54/src/lvm.c    429:   if (l_intfitsf(i))
./luacore/lua54/src/lvm.c    446:   if (l_intfitsf(i))
./luacore/lua54/src/lvm.c    463:   if (l_intfitsf(i))
./luacore/lua54/src/lvm.c    768: #define NBITS	cast_int(sizeof(lua_Integer) * CHAR_BIT)
./luacore/lua54/src/lvm.c    847:       int total = cast_int(top - 1 - (base + a));  /* yet to concatenate */
./luacore/lua54/src/lvm.c   1704:           b = cast_int(L->top.p - ra);
./luacore/lua54/src/lvm.c   1725:           n = cast_int(L->top.p - ra);  /* get what is available */
./luacore/lua54/src/lvm.c   1855:           n = cast_int(L->top.p - ra) - 1;  /* get up to the top */
./luacore/luasocket/src/options.c    368:     val.imr_interface.s_addr = htonl(INADDR_ANY);
./luacore/luasocket/src/options.c    370:             !inet_aton(lua_tostring(L, -1), &val.imr_interface))
./luacore/luasocket/src/options.c    394:             val.ipv6mr_interface = (unsigned int) lua_tonumber(L, -1);
./luaoptional/lmtcurl.c     14:     curl_integer  = 1,
./luaoptional/lmtcurl.c     26:     curl_integer,   /*   3 port */
./luaoptional/lmtcurl.c     36:     curl_integer,   /*  13 timeout */
./luaoptional/lmtcurl.c     37:     curl_integer,   /*  14 infilesize */
./luaoptional/lmtcurl.c     42:     curl_integer,   /*  19 low_speed_limit */
./luaoptional/lmtcurl.c     43:     curl_integer,   /*  20 low_speed_time */
./luaoptional/lmtcurl.c     44:     curl_integer,   /*  21 resume_from */
./luaoptional/lmtcurl.c     50:     curl_integer,   /*  27 crlf */
./luaoptional/lmtcurl.c     55:     curl_integer,   /*  32 sslversion */
./luaoptional/lmtcurl.c     56:     curl_integer,   /*  33 timecondition */
./luaoptional/lmtcurl.c     57:     curl_integer,   /*  34 timevalue */
./luaoptional/lmtcurl.c     64:     curl_integer,   /*  41 verbose */
./luaoptional/lmtcurl.c     65:     curl_integer,   /*  42 header */
./luaoptional/lmtcurl.c     66:     curl_integer,   /*  43 noprogress */
./luaoptional/lmtcurl.c     67:     curl_integer,   /*  44 nobody */
./luaoptional/lmtcurl.c     68:     curl_integer,   /*  45 failonerror */
./luaoptional/lmtcurl.c     69:     curl_integer,   /*  46 upload */
./luaoptional/lmtcurl.c     70:     curl_integer,   /*  47 post */
./luaoptional/lmtcurl.c     71:     curl_integer,   /*  48 dirlistonly */
./luaoptional/lmtcurl.c     73:     curl_integer,   /*  50 append */
./luaoptional/lmtcurl.c     74:     curl_integer,   /*  51 netrc */
./luaoptional/lmtcurl.c     75:     curl_integer,   /*  52 followlocation */
./luaoptional/lmtcurl.c     76:     curl_integer,   /*  53 transfertext */
./luaoptional/lmtcurl.c     77:     curl_integer,   /*  54 put */
./luaoptional/lmtcurl.c     81:     curl_integer,   /*  58 autoreferer */
./luaoptional/lmtcurl.c     82:     curl_integer,   /*  59 proxyport */
./luaoptional/lmtcurl.c     83:     curl_integer,   /*  60 postfieldsize */
./luaoptional/lmtcurl.c     84:     curl_integer,   /*  61 httpproxytunnel */
./luaoptional/lmtcurl.c     87:     curl_integer,   /*  64 ssl_verifypeer */
./luaoptional/lmtcurl.c     91:     curl_integer,   /*  68 maxredirs */
./luaoptional/lmtcurl.c     92:     curl_integer,   /*  69 filetime */
./luaoptional/lmtcurl.c     94:     curl_integer,   /*  71 maxconnects */
./luaoptional/lmtcurl.c     95:     curl_integer,   /*  72 closepolicy */
./luaoptional/lmtcurl.c     97:     curl_integer,   /*  74 fresh_connect */
./luaoptional/lmtcurl.c     98:     curl_integer,   /*  75 forbid_reuse */
./luaoptional/lmtcurl.c    101:     curl_integer,   /*  78 connecttimeout */
./luaoptional/lmtcurl.c    103:     curl_integer,   /*  80 httpget */
./luaoptional/lmtcurl.c    104:     curl_integer,   /*  81 ssl_verifyhost */
./luaoptional/lmtcurl.c    107:     curl_integer,   /*  84 http_version */
./luaoptional/lmtcurl.c    108:     curl_integer,   /*  85 ftp_use_epsv */
./luaoptional/lmtcurl.c    113:     curl_integer,   /*  90 sslengine_default */
./luaoptional/lmtcurl.c    114:     curl_integer,   /*  91 dns_use_global_cache */
./luaoptional/lmtcurl.c    115:     curl_integer,   /*  92 dns_cache_timeout */
./luaoptional/lmtcurl.c    119:     curl_integer,   /*  96 cookiesession */
./luaoptional/lmtcurl.c    121:     curl_integer,   /*  98 buffersize */
./luaoptional/lmtcurl.c    122:     curl_integer,   /*  99 nosignal */
./luaoptional/lmtcurl.c    124:     curl_integer,   /* 101 proxytype */
./luaoptional/lmtcurl.c    128:     curl_integer,   /* 105 unrestricted_auth */
./luaoptional/lmtcurl.c    129:     curl_integer,   /* 106 ftp_use_eprt */
./luaoptional/lmtcurl.c    130:     curl_integer,   /* 107 httpauth */
./luaoptional/lmtcurl.c    133:     curl_integer,   /* 110 ftp_create_missing_dirs */
./luaoptional/lmtcurl.c    134:     curl_integer,   /* 111 proxyauth */
./luaoptional/lmtcurl.c    135:     curl_integer,   /* 112 server_response_timeout | ftp_response_timeout */
./luaoptional/lmtcurl.c    136:     curl_integer,   /* 113 ipresolve */
./luaoptional/lmtcurl.c    137:     curl_integer,   /* 114 maxfilesize */
./luaoptional/lmtcurl.c    142:     curl_integer,   /* 119 use_ssl */
./luaoptional/lmtcurl.c    144:     curl_integer,   /* 121 tcp_nodelay */
./luaoptional/lmtcurl.c    152:     curl_integer,   /* 129 ftpsslauth */
./luaoptional/lmtcurl.c    159:     curl_integer,   /* 136 ignore_content_length */
./luaoptional/lmtcurl.c    160:     curl_integer,   /* 137 ftp_skip_pasv_ip */
./luaoptional/lmtcurl.c    161:     curl_integer,   /* 138 ftp_filemethod */
./luaoptional/lmtcurl.c    162:     curl_integer,   /* 139 localport */
./luaoptional/lmtcurl.c    163:     curl_integer,   /* 140 localportrange */
./luaoptional/lmtcurl.c    164:     curl_integer,   /* 141 connect_only */
./luaoptional/lmtcurl.c    173:     curl_integer,   /* 150 ssl_sessionid_cache */
./luaoptional/lmtcurl.c    174:     curl_integer,   /* 151 ssh_auth_types */
./luaoptional/lmtcurl.c    177:     curl_integer,   /* 154 ftp_ssl_ccc */
./luaoptional/lmtcurl.c    178:     curl_integer,   /* 155 timeout_ms */
./luaoptional/lmtcurl.c    179:     curl_integer,   /* 156 connecttimeout_ms */
./luaoptional/lmtcurl.c    180:     curl_integer,   /* 157 http_transfer_decoding */
./luaoptional/lmtcurl.c    181:     curl_integer,   /* 158 http_content_decoding */
./luaoptional/lmtcurl.c    182:     curl_integer,   /* 159 new_file_perms */
./luaoptional/lmtcurl.c    183:     curl_integer,   /* 160 new_directory_perms */
./luaoptional/lmtcurl.c    184:     curl_integer,   /* 161 postredir */
./luaoptional/lmtcurl.c    189:     curl_integer,   /* 166 proxy_transfer_mode */
./luaoptional/lmtcurl.c    194:     curl_integer,   /* 171 address_scope */
./luaoptional/lmtcurl.c    195:     curl_integer,   /* 172 certinfo */
./luaoptional/lmtcurl.c    201:     curl_integer,   /* 178 tftp_blksize */
./luaoptional/lmtcurl.c    203:     curl_integer,   /* 180 socks5_gssapi_nec */
./luaoptional/lmtcurl.c    204:     curl_integer,   /* 181 protocols */
./luaoptional/lmtcurl.c    205:     curl_integer,   /* 182 redir_protocols */
./luaoptional/lmtcurl.c    211:     curl_integer,   /* 188 ftp_use_pret */
./luaoptional/lmtcurl.c    212:     curl_integer,   /* 189 rtsp_request */
./luaoptional/lmtcurl.c    216:     curl_integer,   /* 193 rtsp_client_cseq */
./luaoptional/lmtcurl.c    217:     curl_integer,   /* 194 rtsp_server_cseq */
./luaoptional/lmtcurl.c    220:     curl_integer,   /* 197 wildcardmatch */
./luaoptional/lmtcurl.c    230:     curl_integer,   /* 207 transfer_encoding */
./luaoptional/lmtcurl.c    233:     curl_integer,   /* 210 gssapi_delegation */
./luaoptional/lmtcurl.c    235:     curl_integer,   /* 212 accepttimeout_ms */
./luaoptional/lmtcurl.c    236:     curl_integer,   /* 213 tcp_keepalive */
./luaoptional/lmtcurl.c    237:     curl_integer,   /* 214 tcp_keepidle */
./luaoptional/lmtcurl.c    238:     curl_integer,   /* 215 tcp_keepintvl */
./luaoptional/lmtcurl.c    239:     curl_integer,   /* 216 ssl_options */
./luaoptional/lmtcurl.c    241:     curl_integer,   /* 218 sasl_ir */
./luaoptional/lmtcurl.c    244:     curl_string,    /* 221 dns_interface */
./luaoptional/lmtcurl.c    248:     curl_integer,   /* 225 ssl_enable_npn */
./luaoptional/lmtcurl.c    249:     curl_integer,   /* 226 ssl_enable_alpn */
./luaoptional/lmtcurl.c    250:     curl_integer    /* 227 expect_100_timeout_ms */
./luaoptional/lmtcurl.c    259: # define curl_integer_base       0 /* long */
./luaoptional/lmtcurl.c    404:                                 case curl_integer:
./luaoptional/lmtcurl.c    407:                                             curllib_state.curl_easy_setopt(curl, curl_integer_base + o, lua_tointeger(L, -1));
./luaoptional/lmtcurl.c    410:                                             curllib_state.curl_easy_setopt(curl, curl_integer_base + o, lua_toboolean(L, -1));
./luaoptional/lmtforeign.c     74:     ffi_int_type,
./luaoptional/lmtforeign.c     79:     ffi_int8_type,
./luaoptional/lmtforeign.c     81:     ffi_int16_type,
./luaoptional/lmtforeign.c     83:     ffi_int32_type,
./luaoptional/lmtforeign.c     85:     ffi_int64_type,
./luaoptional/lmtforeign.c    215:     ffi_type ffi_type_int8;
./luaoptional/lmtforeign.c    217:     ffi_type ffi_type_int16;
./luaoptional/lmtforeign.c    219:     ffi_type ffi_type_int32;
./luaoptional/lmtforeign.c    221:     ffi_type ffi_type_int64;
./luaoptional/lmtforeign.c    240:     .ffi_type_int8    = { .size = sizeof(int8_t),   .alignment = 0, .type = ffi_int8_type,    .elements = NULL },
./luaoptional/lmtforeign.c    242:     .ffi_type_int16   = { .size = sizeof(int16_t),  .alignment = 0, .type = ffi_int16_type,   .elements = NULL },
./luaoptional/lmtforeign.c    244:     .ffi_type_int32   = { .size = sizeof(int32_t),  .alignment = 0, .type = ffi_int32_type,   .elements = NULL },
./luaoptional/lmtforeign.c    246:     .ffi_type_int64   = { .size = sizeof(int64_t),  .alignment = 0, .type = ffi_int64_type,   .elements = NULL },
./luaoptional/lmtforeign.c    271:     foreign_type_int,        foreign_type_uint,
./luaoptional/lmtforeign.c    279:     foreign_type_reference_to_int,
./luaoptional/lmtforeign.c    309:     &foreign_state.ffi_type_int8,    &foreign_state.ffi_type_uint8,
./luaoptional/lmtforeign.c    310:     &foreign_state.ffi_type_int16,   &foreign_state.ffi_type_uint16,
./luaoptional/lmtforeign.c    311:     &foreign_state.ffi_type_int32,   &foreign_state.ffi_type_uint32,
./luaoptional/lmtforeign.c    312:     &foreign_state.ffi_type_int64,   &foreign_state.ffi_type_uint64,
./luaoptional/lmtforeign.c    313:     &foreign_state.ffi_type_int64,   &foreign_state.ffi_type_uint64,
./luaoptional/lmtforeign.c    667:                                                             function->arguments[i] = foreignlib_type_found(L, -1, foreign_type_int); /* maybe issue an error */
./luaoptional/lmtforeign.c    684:                                                     function->arguments[0] = foreignlib_type_found(L, -1, foreign_type_int); /* maybe issue an error */
./luaoptional/lmtforeign.c    803:                     case foreign_type_int      : argument = lmt_memory_malloc(sizeof(int));                *((int                *) argument) = (int)                lua_tointeger(L, slot); break;
./luaoptional/lmtforeign.c    864:                     case foreign_type_reference_to_int:
./luaoptional/lmtforeign.c    915:         case foreign_type_int      : { int                r; foreign_state.ffi_call(cif, function->function, &r,   arguments); lua_pushinteger(L, (int)              r); break; }
./luaoptional/lmtforeign.c    956:             case foreign_type_reference_to_int   : lua_pushinteger(L, **(int          **) arguments[i]); break;
./luaoptional/lmtforeign.c   1061:                 case foreign_type_int      : { int                *p = ptr; for (lua_Integer i = 0; i < size; i++) { lua_pushinteger(L, (lua_Integer) p[i]); lua_rawseti(L, -2, i + 1); } break; }
./luaoptional/lmthb.c    155: typedef union _hb_var_int_t {
./luaoptional/lmthb.c    162: } hb_var_int_t;
./luaoptional/lmthb.c    169:     hb_var_int_t   var1;
./luaoptional/lmthb.c    170:     hb_var_int_t   var2;
./luaoptional/lmthb.c    179:     hb_var_int_t   var;
./luaoptional/lmtlzma.c     48: typedef struct lzma_internal_s lzma_internal;
./luaoptional/lmtlzma.c     64:     lzma_internal        *internal;
./luaoptional/lmtlzma.c     69:     uint64_t              reserved_int1;
./luaoptional/lmtlzma.c     70:     uint64_t              reserved_int2;
./luaoptional/lmtlzma.c     71:     size_t                reserved_int3;
./luaoptional/lmtlzma.c     72:     size_t                reserved_int4;
./luarest/lmtdecodelib.c    212: static int pnglib_interlace(lua_State *L)
./luarest/lmtdecodelib.c    575:     { "interlace",   pnglib_interlace   },
./luarest/lmtiolibext.c     38:     # define l_seeknum      __int64
./luarest/lmtoslibext.c    192:         __int64 tmpres = 0;
./luarest/lmtpdfelib.c   1501:         if (pdfelib_get_value_indirect(L, (void *) &value, (void *) &ppdict_rget_int, (void *) &pparray_rget_int)) {
./luarest/lmtposit.c    205:     *p = posit_round_to_integer(*a);
./luarest/lmtposit.c    212:     lua_pushinteger(L, posit_to_integer(*a));
./luarest/lmtposit.c    216: static int positlib_integer(lua_State *L) 
./luarest/lmtposit.c    533:     { "integer",      positlib_integer   },
./luarest/lmtpotrace.c    340:         lua_push_integer_at_key(L, index, first + entries); /* for tracing when we select */
./luarest/lmtpotrace.c    399:         lua_push_integer_at_key(L, index, first + entries); /* for tracing when we select */
./mp/mpc/mp.c     63: # define  mp_min_suffix_token       mp_internal_command
./mp/mpc/mp.c     75: # define  max_given_internal mp_restore_clip_color_internal
./mp/mpc/mp.c    157: # define  set_number_from_int(A,B)                mp->math->md_from_int(&(A),B)
./mp/mpc/mp.c    167: # define  number_int_div(A,C)                     mp->math->md_from_int_div(&(A),&(A),C)
./mp/mpc/mp.c    168: # define  set_number_from_int_mul(A,B,C)          mp->math->md_from_int_mul(&(A),&(B),C)
./mp/mpc/mp.c    198: # define  number_to_int(A)                        mp->math->md_to_int(&(A))
./mp/mpc/mp.c    208: # define  number_multiply_int(A,B)                mp->math->md_multiply_int(&(A),B)
./mp/mpc/mp.c    209: # define  number_divide_int(A,B)                  mp->math->md_divide_int(&(A),B)
./mp/mpc/mp.c    392: # define  cur_exp_value_boolean number_to_int(mp->cur_exp.data.n)
./mp/mpc/mp.c    427: # define  max_integer 0x7FFFFFFF
./mp/mpc/mp.c    456:     gr_color_model(q) = (unsigned char) (number_to_scaled(internal_value(mp_default_color_model_internal))/65536); \
./mp/mpc/mp.c    485:  static void  mp_run_internal (MP mp, int action, int n, int type, const char *iname);
./mp/mpc/mp.c    500:  static void mp_print_int (MP mp, int n);
./mp/mpc/mp.c    648:  static void mp_do_interim   (MP mp);
./mp/mpc/mp.c    678:  static void mp_do_new_internal (MP mp);
./mp/mpc/mp.c    847:     for (int k = 0; k <= mp->max_internal; k++) {
./mp/mpc/mp.c    894:     mp->int_ptr = max_given_internal;
./mp/mpc/mp.c   1019:     mp->run_internal    = mp_run_internal;
./mp/mpc/mp.c   1043:     mp->run_internal    = opt->run_internal    ? opt->run_internal    : mp_run_internal   ;
./mp/mpc/mp.c   1052:     mp->run_internal_id = opt->run_internal_id;
./mp/mpc/mp.c   1118:     mp->max_internal = 1000 + max_given_internal;
./mp/mpc/mp.c   1119:     mp->internal     = mp_memory_allocate((size_t) (mp->max_internal + 1) * sizeof(mp_internal));
./mp/mpc/mp.c   1120:     memset(mp->internal, 0, (size_t) (mp->max_internal + 1) * sizeof(mp_internal));
./mp/mpc/mp.c   1121:     for (int i = 1; i <= mp->max_internal; i++) {
./mp/mpc/mp.c   1124:     for (int i = 1; i <= max_given_internal; i++) {
./mp/mpc/mp.c   1125:         set_internal_type(i, mp_known_type);
./mp/mpc/mp.c   1127:     set_internal_type(mp_number_system_internal, mp_string_type);
./mp/mpc/mp.c   1128:     set_internal_type(mp_job_name_internal, mp_string_type);
./mp/mpc/mp.c   1154:             set_internal_string(mp_number_system_internal, mp_intern(mp, "scaled"));
./mp/mpc/mp.c   1157:             set_internal_string(mp_number_system_internal, mp_intern(mp, "decimal"));
./mp/mpc/mp.c   1160:             set_internal_string(mp_number_system_internal, mp_intern(mp, "posit"));
./mp/mpc/mp.c   1163:             set_internal_string(mp_number_system_internal, mp_intern(mp, "binary"));
./mp/mpc/mp.c   1166:             set_internal_string(mp_number_system_internal, mp_intern(mp, "double"));
./mp/mpc/mp.c   1174:         if (internal_string(mp_job_name_internal) != 0) {
./mp/mpc/mp.c   1175:             delete_str_ref(internal_string(mp_job_name_internal));
./mp/mpc/mp.c   1177:         set_internal_string(mp_job_name_internal, mp_rts(mp, mp->job_name));
./mp/mpc/mp.c   1200: void mp_run_internal (MP mp, int action, int n, int type, const char *iname)
./mp/mpc/mp.c   1203:     mp_fatal_error(mp, "no 'run_internal' callback set");
./mp/mpc/mp.c   1221:     if (number_nonzero(internal_value(mp_overloadmode_internal))) {
./mp/mpc/mp.c   1222:         if (mp->run_overload(mp, p->property, (const char *) p->text->str, number_to_int(internal_value(mp_overloadmode_internal)))) {
./mp/mpc/mp.c   1493: static void mp_print_int (MP mp, int n)
./mp/mpc/mp.c   1899:             case mp_intertimes_operation       : return "intersectiontimes";
./mp/mpc/mp.c   1900:             case mp_intertimes_list_operation  : return "intersectiontimeslist";
./mp/mpc/mp.c   1950:     number_clone(internal_value(mp_time_internal), unity_t);
./mp/mpc/mp.c   1951:     number_multiply_int(internal_value(mp_time_internal), (tmptr->tm_hour * 60 + tmptr->tm_min));
./mp/mpc/mp.c   1952:     number_clone(internal_value(mp_hour_internal), unity_t);
./mp/mpc/mp.c   1953:     number_multiply_int(internal_value(mp_hour_internal), (tmptr->tm_hour));
./mp/mpc/mp.c   1954:     number_clone(internal_value(mp_minute_internal), unity_t);
./mp/mpc/mp.c   1955:     number_multiply_int(internal_value(mp_minute_internal), (tmptr->tm_min));
./mp/mpc/mp.c   1956:     number_clone(internal_value(mp_day_internal), unity_t);
./mp/mpc/mp.c   1957:     number_multiply_int(internal_value(mp_day_internal), (tmptr->tm_mday));
./mp/mpc/mp.c   1958:     number_clone(internal_value(mp_month_internal), unity_t);
./mp/mpc/mp.c   1959:     number_multiply_int(internal_value(mp_month_internal), (tmptr->tm_mon + 1));
./mp/mpc/mp.c   1960:     number_clone(internal_value(mp_year_internal), unity_t);
./mp/mpc/mp.c   1961:     number_multiply_int(internal_value(mp_year_internal), (tmptr->tm_year + 1900));
./mp/mpc/mp.c   1967:     if (number_nonpositive(internal_value(mp_tracing_online_internal)) && (mp->selector == mp_term_and_log_selector)) {
./mp/mpc/mp.c   1993:     mp_print_int(mp, mp_true_line(mp));
./mp/mpc/mp.c   2309:             mp_print_int(mp, r);
./mp/mpc/mp.c   2386:             mp_print_int(mp, r);
./mp/mpc/mp.c   2731: static int mp_interesting (MP mp, mp_node p)
./mp/mpc/mp.c   2733:     if (number_positive(internal_value(mp_tracing_capsules_internal))) {
./mp/mpc/mp.c   3145:     if (number_positive(internal_value(mp_tracing_restores_internal))) {
./mp/mpc/mp.c   3165: static void mp_save_internal (MP mp, int q)
./mp/mpc/mp.c   3169:         p->type = mp_internal_operation;
./mp/mpc/mp.c   3174:             mp->run_internal(mp, 1, q, internal_type(q), internal_name(q));
./mp/mpc/mp.c   3181: static void mp_unsave_internal (MP mp)
./mp/mpc/mp.c   3184:     mp_internal saved = mp->save_ptr->value;
./mp/mpc/mp.c   3185:     if (number_positive(internal_value(mp_tracing_restores_internal))) {
./mp/mpc/mp.c   3213:         mp->run_internal(mp, 2, q, internal_type(q), internal_name(q));
./mp/mpc/mp.c   3222:         if (mp->save_ptr->type == mp_internal_operation) {
./mp/mpc/mp.c   3223:             mp_unsave_internal(mp);
./mp/mpc/mp.c   3580:     if (number_positive(internal_value(mp_tracing_choices_internal))) {
./mp/mpc/mp.c   3718:     if (number_positive(internal_value(mp_tracing_choices_internal))) {
./mp/mpc/mp.c   3815:                                 number_int_div(arg2, 3);
./mp/mpc/mp.c   3822:                                 number_int_div(arg2, 3);
./mp/mpc/mp.c   3829:                                 number_multiply_int(arg2, 3);
./mp/mpc/mp.c   3845:                                 number_int_div(arg2, 3);
./mp/mpc/mp.c   3852:                                 number_int_div(arg2, 3);
./mp/mpc/mp.c   3859:                                 number_multiply_int(arg2, 3);
./mp/mpc/mp.c   3931:                                 number_multiply_int(arg2, 3);
./mp/mpc/mp.c   3953:                                 number_multiply_int(arg2, 3);
./mp/mpc/mp.c   5998:     if (number_greater(internal_value(mp_linejoin_internal), unity_t)) {
./mp/mpc/mp.c   6000:     } else if (number_positive(internal_value(mp_linejoin_internal))) {
./mp/mpc/mp.c   6005:     t->stacking = round_unscaled(internal_value(mp_stacking_internal));
./mp/mpc/mp.c   6006:     if (number_less(internal_value(mp_miterlimit_internal), unity_t)) {
./mp/mpc/mp.c   6009:         number_clone(t->miterlimit, internal_value(mp_miterlimit_internal));
./mp/mpc/mp.c   6011:     if (number_greater(internal_value(mp_linecap_internal), unity_t)) {
./mp/mpc/mp.c   6013:     } else if (number_positive(internal_value(mp_linecap_internal))) {
./mp/mpc/mp.c   6086:         number_multiply_int(*ret, s);
./mp/mpc/mp.c   6129:                 t->stacking = round_unscaled(internal_value(mp_stacking_internal));
./mp/mpc/mp.c   6141:                 t->stacking = round_unscaled(internal_value(mp_stacking_internal));
./mp/mpc/mp.c   7109:             if (number_positive(internal_value(mp_true_corners_internal))) {
./mp/mpc/mp.c   7114:             if (number_nonpositive(internal_value(mp_true_corners_internal))) {
./mp/mpc/mp.c   7131:                 if (number_positive(internal_value(mp_true_corners_internal))) {
./mp/mpc/mp.c   7156:                 if (number_nonpositive (internal_value(mp_true_corners_internal))) {
./mp/mpc/mp.c   8068:     if (number_positive(internal_value(mp_tracing_specs_internal))) {
./mp/mpc/mp.c   8739: static int mp_cubic_intersection(MP mp, mp_knot p, mp_knot pp, int run)
./mp/mpc/mp.c   8802:                                     number_divide_int(mp->cur_t,1<<2);
./mp/mpc/mp.c   8803:                                     number_divide_int(mp->cur_tt,1<<2);
./mp/mpc/mp.c   8874:             number_divide_int(mp->appr_t, 1<<2);
./mp/mpc/mp.c   8875:             number_divide_int(mp->appr_tt, 1<<2);
./mp/mpc/mp.c   8941: static mp_knot mp_path_intersection_add(MP mp, mp_knot list, mp_knot *last, mp_number *t, mp_number *tt)
./mp/mpc/mp.c   8969: static mp_knot mp_path_intersection(MP mp, mp_knot h, mp_knot hh, int path, mp_knot *last)
./mp/mpc/mp.c   9016:                         mp_cubic_intersection(mp, p, pp, run);
./mp/mpc/mp.c   9022:                                 list = mp_path_intersection_add(mp, list, last, &(mp->cur_t), &(mp->cur_tt));
./mp/mpc/mp.c   9067:         list = mp_path_intersection_add(mp, list, last, &n, &nn);
./mp/mpc/mp.c   9092:     if (mp->serial_no >= max_integer) {
./mp/mpc/mp.c   9570:     if (number_positive(internal_value(mp_warning_check_internal))) {
./mp/mpc/mp.c   9597:     if ((number_positive(internal_value(mp_tracing_equations_internal))) && mp_interesting(mp, (mp_node) p)) {
./mp/mpc/mp.c   9639:                 number_divide_int(mp_get_dep_value(q), 4);
./mp/mpc/mp.c   9747:     if (number_positive(internal_value(mp_tracing_equations_internal))) {
./mp/mpc/mp.c   9852:     if (mp_interesting(mp, x)) {
./mp/mpc/mp.c   9884:                 number_divide_int(w, two_to_the(n));
./mp/mpc/mp.c  10037:         case mp_interim_command:       return "interim";
./mp/mpc/mp.c  10041:         case mp_new_internal_command:  return "newinternal";
./mp/mpc/mp.c  10175:         case mp_internal_command:
./mp/mpc/mp.c  10292:                     mp_print_int(mp, mp_true_line(mp));
./mp/mpc/mp.c  11043:         int mode = round_unscaled(internal_value(mp_texscriptmode_internal)) ;
./mp/mpc/mp.c  11498:     if (number_greater(internal_value(mp_tracing_commands_internal), unity_t) && cur_cmd != mp_defined_macro_command) {
./mp/mpc/mp.c  11576:                 if (number_greater(internal_value(mp_tracing_commands_internal), unity_t)) {
./mp/mpc/mp.c  11830:     if (number_positive(internal_value(mp_tracing_macros_internal))) {
./mp/mpc/mp.c  11925:             if (number_positive(internal_value(mp_tracing_macros_internal))) {
./mp/mpc/mp.c  11988:                     if (number_positive(internal_value(mp_tracing_macros_internal))) {
./mp/mpc/mp.c  12048:             if (number_positive(internal_value(mp_tracing_macros_internal))) {
./mp/mpc/mp.c  12115:     mp_print_int(mp, n);
./mp/mpc/mp.c  12273:     if (number_greater(internal_value(mp_tracing_commands_internal), unity_t)) {
./mp/mpc/mp.c  12376:                             set_number_from_int(s->final_value, l);
./mp/mpc/mp.c  12577:     if (number_greater(internal_value(mp_tracing_commands_internal), unity_t)) {
./mp/mpc/mp.c  13015:                         if (number_nonpositive(internal_value(mp_tracing_online_internal))) {
./mp/mpc/mp.c  13353:         number_divide_int(test, 4096);
./mp/mpc/mp.c  13381:         if (number_positive(internal_value(mp_tracing_equations_internal)) && mp_interesting(mp, p)) {
./mp/mpc/mp.c  13783:                 set_number_from_int(expr.data.n, mp_knotstate(p));
./mp/mpc/mp.c  13839:     if (number_greater(internal_value(mp_tracing_commands_internal), two_t)) {
./mp/mpc/mp.c  13873:             mp_set_cur_exp_str(mp, mp_intern(mp, metapost_version));
./mp/mpc/mp.c  13909:                     (number_to_scaled(internal_value(mp_default_color_model_internal))/number_to_scaled(unity_t)) == c
./mp/mpc/mp.c  14239:                         number_clone(new_expr.data.n, internal_value(mp_default_color_model_internal));
./mp/mpc/mp.c  14242:                         number_multiply_int(new_expr.data.n, mp_color_model(p));
./mp/mpc/mp.c  14278:                 number_multiply_int(new_expr.data.n, mp_stacking(p));
./mp/mpc/mp.c  14389:     number_multiply_int(new_expr.data.n, n);
./mp/mpc/mp.c  14400:     set_number_from_int(*n, l);
./mp/mpc/mp.c  14421:     set_number_from_int(*n, l);
./mp/mpc/mp.c  14462:     if (number_greater(internal_value(mp_tracing_commands_internal), unity_t)) {
./mp/mpc/mp.c  14777:     if (number_greater(internal_value(mp_tracing_commands_internal), two_t)) {
./mp/mpc/mp.c  14847:                 number_multiply_int(arg2, 360);
./mp/mpc/mp.c  15058:                         number_multiply_int(expr.data.n, (int) cur_exp_str->len);
./mp/mpc/mp.c  15369:                 number_divide_int(x, l);
./mp/mpc/mp.c  15370:                 number_divide_int(y, l);
./mp/mpc/mp.c  15960:                     number_multiply_int(arg2, 360);
./mp/mpc/mp.c  16611:         if (number_greater(internal_value(mp_linejoin_internal), unity_t)) {
./mp/mpc/mp.c  16613:         } else if (number_positive(internal_value(mp_linejoin_internal))) {
./mp/mpc/mp.c  16616:         if (number_greater(internal_value(mp_linecap_internal), unity_t)) {
./mp/mpc/mp.c  16618:         } else if (number_positive(internal_value(mp_linecap_internal))) {
./mp/mpc/mp.c  16621:         if (number_less(internal_value(mp_miterlimit_internal), unity_t)) {
./mp/mpc/mp.c  16624:             number_clone(miterlimit, internal_value(mp_miterlimit_internal));
./mp/mpc/mp.c  16651:     if (number_greater(internal_value(mp_linejoin_internal), unity_t)) {
./mp/mpc/mp.c  16653:     } else if (number_positive(internal_value(mp_linejoin_internal))) {
./mp/mpc/mp.c  16656:     if (number_greater(internal_value(mp_linecap_internal), unity_t)) {
./mp/mpc/mp.c  16658:     } else if (number_positive(internal_value(mp_linecap_internal))) {
./mp/mpc/mp.c  16661:     if (number_less(internal_value(mp_miterlimit_internal), unity_t)) {
./mp/mpc/mp.c  16664:         number_clone(miterlimit, internal_value(mp_miterlimit_internal));
./mp/mpc/mp.c  16786:     if (number_greater(internal_value(mp_tracing_commands_internal), two_t)) {
./mp/mpc/mp.c  17561:         case mp_intertimes_operation:
./mp/mpc/mp.c  17562:         case mp_intertimes_list_operation:
./mp/mpc/mp.c  17574:                 if (c == mp_intertimes_operation) {
./mp/mpc/mp.c  17576:                     mp_path_intersection(mp, mp_get_value_knot(p), cur_exp_knot, 0, NULL);
./mp/mpc/mp.c  17580:                     mp_knot list = mp_path_intersection(mp, mp_get_value_knot(p), cur_exp_knot, 1, &last);
./mp/mpc/mp.c  17601:     if (number_greater(internal_value(mp_tracing_commands_internal), two_t)) {
./mp/mpc/mp.c  17697:                 if (number_positive(internal_value(mp_tracing_titles_internal))) {
./mp/mpc/mp.c  17718:         if (number_positive(internal_value(mp_tracing_commands_internal))) {
./mp/mpc/mp.c  17770:             case mp_interim_command:
./mp/mpc/mp.c  17771:                 mp_do_interim(mp);
./mp/mpc/mp.c  17776:             case mp_new_internal_command:
./mp/mpc/mp.c  17777:                 mp_do_new_internal(mp);
./mp/mpc/mp.c  17876:     if (number_greater(internal_value(mp_tracing_commands_internal), two_t)) {
./mp/mpc/mp.c  17902: static void bad_internal_assignment (MP mp, mp_node lhs)
./mp/mpc/mp.c  17943: static void forbidden_internal_assignment (MP mp, mp_node lhs)
./mp/mpc/mp.c  17956: static void bad_internal_assignment_precision (MP mp, mp_node lhs, mp_number *min, mp_number *max)
./mp/mpc/mp.c  17966:         mp_str(mp, internal_string(mp_number_system_internal)), number_tostring(*min), number_tostring(*max));
./mp/mpc/mp.c  17990:     if (lhs->name_type == mp_internal_operation) {
./mp/mpc/mp.c  18016:         if (number_greater(internal_value(mp_tracing_commands_internal), two_t)) {
./mp/mpc/mp.c  18019:         if (lhs->name_type == mp_internal_operation) {
./mp/mpc/mp.c  18026:                             case mp_number_system_internal:
./mp/mpc/mp.c  18027:                                 forbidden_internal_assignment(mp, lhs);
./mp/mpc/mp.c  18030:                             case mp_number_precision_internal:
./mp/mpc/mp.c  18037:                                          set_internal_string(mp_get_sym_info(lhs), cur_exp_str);
./mp/mpc/mp.c  18043:                                     bad_internal_assignment_precision(mp, lhs, &precision_min, &precision_max);
./mp/mpc/mp.c  18048:                                     set_internal_string(mp_get_sym_info(lhs), cur_exp_str);
./mp/mpc/mp.c  18055:                         bad_internal_assignment(mp, lhs);
./mp/mpc/mp.c  18059:                     bad_internal_assignment(mp, lhs);
./mp/mpc/mp.c  18414:             if (cur_cmd != mp_internal_command) {
./mp/mpc/mp.c  18554: void mp_set_internal (MP mp, char *n, char *v, int isstring)
./mp/mpc/mp.c  18563:         } else if (eq_type(p) != mp_internal_command) {
./mp/mpc/mp.c  18566:             set_internal_string(equiv(p), mp_rts(mp, v));
./mp/mpc/mp.c  18575:                 number_multiply_int(internal_value(equiv(p)), test);
./mp/mpc/mp.c  18640:                 mp_log_string(mp_term_logging_target, mp_str(mp, internal_string(mp_number_system_internal)));
./mp/mpc/mp.c  18666:                     mp->random_seed = (number_to_scaled(internal_value(mp_time_internal))/number_to_scaled(unity_t))
./mp/mpc/mp.c  18667:                         + number_to_scaled(internal_value(mp_day_internal));
./mp/mpc/mp.c  18871: void mp_do_interim (MP mp) {
./mp/mpc/mp.c  18873:     if (cur_cmd != mp_internal_command) {
./mp/mpc/mp.c  18881:         mp_save_internal(mp, cur_mod);
./mp/mpc/mp.c  18935: void mp_grow_internals (MP mp, int l)
./mp/mpc/mp.c  18940:         mp_internal *internal = mp_memory_allocate((size_t) (l + 1) * sizeof(mp_internal));
./mp/mpc/mp.c  18942:             if (k <= mp->max_internal) {
./mp/mpc/mp.c  18943:                 memcpy(internal + k, mp->internal + k, sizeof(mp_internal));
./mp/mpc/mp.c  18945:                 memset(internal + k, 0, sizeof(mp_internal));
./mp/mpc/mp.c  18946:                 new_number(((mp_internal *)(internal + k))->v.data.n);
./mp/mpc/mp.c  18951:         mp->max_internal = l;
./mp/mpc/mp.c  18955: void mp_do_new_internal (MP mp)
./mp/mpc/mp.c  18982:         if (mp->int_ptr == mp->max_internal) {
./mp/mpc/mp.c  18983:             mp_grow_internals(mp, (mp->max_internal + (mp->max_internal / 4)));
./mp/mpc/mp.c  18987:         set_eq_type(cur_sym, mp_internal_command);
./mp/mpc/mp.c  18990:         set_internal_name(mp->int_ptr, mp_strdup(mp_str(mp, text(cur_sym))));
./mp/mpc/mp.c  18992:             set_internal_string(mp->int_ptr, mp_rts(mp,""));
./mp/mpc/mp.c  18996:         set_internal_type(mp->int_ptr, the_type);
./mp/mpc/mp.c  18997:         set_internal_run(mp->int_ptr, run_script);
./mp/mpc/mp.c  18999:            mp->run_internal(mp, 0, mp->int_ptr, the_type, internal_name(mp->int_ptr));
./mp/mpc/mp.c  19061:     mp_print_int(mp, (int) mp->var_used);
./mp/mpc/mp.c  19064:     mp_print_int(mp, (int) mp->strs_in_use);
./mp/mpc/mp.c  19066:     mp_print_int(mp, (int) mp->pool_in_use);
./mp/mpc/mp.c  19120:         if (mp_interesting(mp, (mp_node) p)) {
./mp/mpc/mp.c  19161:     if (number_positive(internal_value(mp_showstopping_internal))) {
./mp/mpc/mp.c  20157:     hh->charcode = round_unscaled(internal_value(mp_char_code_internal));
./mp/mpc/mp.c  20158:     hh->width = number_to_double(internal_value(mp_char_wd_internal));
./mp/mpc/mp.c  20159:     hh->height = number_to_double(internal_value(mp_char_ht_internal));
./mp/mpc/mp.c  20160:     hh->depth = number_to_double(internal_value(mp_char_dp_internal));
./mp/mpc/mp.c  20161:     hh->italic = number_to_double(internal_value(mp_char_ic_internal));
./mp/mpc/mp.c  20627: void mp_push_integer_value (MP mp, int i)
./mp/mpc/mp.c  20631:     set_number_from_int(m, i);
./mp/mpc/mp.c  20897:                 if (number_positive(internal_value(mp_tracing_commands_internal))) {
./mp/mpc/mp.c  20916:                 if (number_positive(internal_value(mp_tracing_commands_internal))) {
./mp/mpc/mp.c  21050:         case mp_internal_command:
./mp/mpc/mp.c  21058:                         cur_exp_node->name_type = mp_internal_operation;
./mp/mpc/mp.c  21283:         } else if ((cur_cmd == mp_tag_command) || (cur_cmd == mp_internal_command)) {
./mp/mpc/mp.c  21781:             mp_print_int(mp, mp->if_line);
./mp/mpc/mp.c  21801:     mp_primitive(mp, "tracingtitles", mp_internal_command, mp_tracing_titles_internal);
./mp/mpc/mp.c  21802:     mp_primitive(mp, "tracingequations", mp_internal_command, mp_tracing_equations_internal);
./mp/mpc/mp.c  21803:     mp_primitive(mp, "tracingcapsules", mp_internal_command, mp_tracing_capsules_internal);
./mp/mpc/mp.c  21804:     mp_primitive(mp, "tracingchoices", mp_internal_command, mp_tracing_choices_internal);
./mp/mpc/mp.c  21805:     mp_primitive(mp, "tracingspecs", mp_internal_command, mp_tracing_specs_internal);
./mp/mpc/mp.c  21806:     mp_primitive(mp, "tracingcommands", mp_internal_command, mp_tracing_commands_internal);
./mp/mpc/mp.c  21807:     mp_primitive(mp, "tracingrestores", mp_internal_command, mp_tracing_restores_internal);
./mp/mpc/mp.c  21808:     mp_primitive(mp, "tracingmacros", mp_internal_command, mp_tracing_macros_internal);
./mp/mpc/mp.c  21809:     mp_primitive(mp, "tracingoutput", mp_internal_command, mp_tracing_output_internal);
./mp/mpc/mp.c  21810:     mp_primitive(mp, "tracingstats", mp_internal_command, mp_tracing_stats_internal);
./mp/mpc/mp.c  21811:     mp_primitive(mp, "tracingonline", mp_internal_command, mp_tracing_online_internal);
./mp/mpc/mp.c  21812:     mp_primitive(mp, "year", mp_internal_command, mp_year_internal);
./mp/mpc/mp.c  21813:     mp_primitive(mp, "month", mp_internal_command, mp_month_internal);
./mp/mpc/mp.c  21814:     mp_primitive(mp, "day", mp_internal_command, mp_day_internal);
./mp/mpc/mp.c  21815:     mp_primitive(mp, "time", mp_internal_command, mp_time_internal);
./mp/mpc/mp.c  21816:     mp_primitive(mp, "hour", mp_internal_command, mp_hour_internal);
./mp/mpc/mp.c  21817:     mp_primitive(mp, "minute", mp_internal_command, mp_minute_internal);
./mp/mpc/mp.c  21818:     mp_primitive(mp, "charcode", mp_internal_command, mp_char_code_internal);
./mp/mpc/mp.c  21819:     mp_primitive(mp, "charwd", mp_internal_command, mp_char_wd_internal);
./mp/mpc/mp.c  21820:     mp_primitive(mp, "charht", mp_internal_command, mp_char_ht_internal);
./mp/mpc/mp.c  21821:     mp_primitive(mp, "chardp", mp_internal_command, mp_char_dp_internal);
./mp/mpc/mp.c  21822:     mp_primitive(mp, "charic", mp_internal_command, mp_char_ic_internal);
./mp/mpc/mp.c  21823:     mp_primitive(mp, "pausing", mp_internal_command, mp_pausing_internal);
./mp/mpc/mp.c  21824:     mp_primitive(mp, "showstopping", mp_internal_command, mp_showstopping_internal);
./mp/mpc/mp.c  21825:     mp_primitive(mp, "texscriptmode", mp_internal_command, mp_texscriptmode_internal);
./mp/mpc/mp.c  21826:     mp_primitive(mp, "overloadmode", mp_internal_command, mp_overloadmode_internal);
./mp/mpc/mp.c  21827:     mp_primitive(mp, "linejoin", mp_internal_command, mp_linejoin_internal);
./mp/mpc/mp.c  21828:     mp_primitive(mp, "linecap", mp_internal_command, mp_linecap_internal);
./mp/mpc/mp.c  21829:     mp_primitive(mp, "stacking", mp_internal_command, mp_stacking_internal);
./mp/mpc/mp.c  21830:     mp_primitive(mp, "miterlimit", mp_internal_command, mp_miterlimit_internal);
./mp/mpc/mp.c  21831:     mp_primitive(mp, "warningcheck", mp_internal_command, mp_warning_check_internal);
./mp/mpc/mp.c  21832:     mp_primitive(mp, "truecorners", mp_internal_command, mp_true_corners_internal);
./mp/mpc/mp.c  21833:     mp_primitive(mp, "defaultcolormodel", mp_internal_command, mp_default_color_model_internal);
./mp/mpc/mp.c  21834:     mp_primitive(mp, "restoreclipcolor", mp_internal_command, mp_restore_clip_color_internal);
./mp/mpc/mp.c  21835:     mp_primitive(mp, "numbersystem", mp_internal_command, mp_number_system_internal);
./mp/mpc/mp.c  21836:     mp_primitive(mp, "numberprecision", mp_internal_command, mp_number_precision_internal);
./mp/mpc/mp.c  21837:     mp_primitive(mp, "jobname", mp_internal_command, mp_job_name_internal);
./mp/mpc/mp.c  21864:     mp_primitive(mp, "interim", mp_interim_command, 0);
./mp/mpc/mp.c  21866:     mp_primitive(mp, "newinternal", mp_new_internal_command, 0);
./mp/mpc/mp.c  22044:     mp_primitive(mp, "intersectiontimes", mp_tertiary_binary_command, mp_intertimes_operation);
./mp/mpc/mp.c  22045:     mp_primitive(mp, "intersectiontimeslist", mp_tertiary_binary_command, mp_intertimes_list_operation);
./mp/mpc/mp.c  22106:     number_clone(internal_value(mp_default_color_model_internal),unity_t);
./mp/mpc/mp.c  22107:     number_multiply_int(internal_value(mp_default_color_model_internal), mp_rgb_model);
./mp/mpc/mp.c  22108:     number_clone(internal_value(mp_restore_clip_color_internal), unity_t);
./mp/mpc/mp.c  22109:     set_internal_string(mp_number_system_internal, mp_intern (mp, "scaled"));
./mp/mpc/mp.c  22110:     number_clone(internal_value(mp_number_precision_internal), precision_default);
./mp/mpc/mp.c  22111:     number_clone(internal_value(mp_texscriptmode_internal), unity_t);
./mp/mpc/mp.c  22112:     number_clone(internal_value(mp_overloadmode_internal), zero_t);
./mp/mpc/mp.c  22113:     set_internal_name(mp_tracing_titles_internal,      mp_strdup("tracingtitles"));
./mp/mpc/mp.c  22114:     set_internal_name(mp_tracing_equations_internal,   mp_strdup("tracingequations"));
./mp/mpc/mp.c  22115:     set_internal_name(mp_tracing_capsules_internal,    mp_strdup("tracingcapsules"));
./mp/mpc/mp.c  22116:     set_internal_name(mp_tracing_choices_internal,     mp_strdup("tracingchoices"));
./mp/mpc/mp.c  22117:     set_internal_name(mp_tracing_specs_internal,       mp_strdup("tracingspecs"));
./mp/mpc/mp.c  22118:     set_internal_name(mp_tracing_commands_internal,    mp_strdup("tracingcommands"));
./mp/mpc/mp.c  22119:     set_internal_name(mp_tracing_restores_internal,    mp_strdup("tracingrestores"));
./mp/mpc/mp.c  22120:     set_internal_name(mp_tracing_macros_internal,      mp_strdup("tracingmacros"));
./mp/mpc/mp.c  22121:     set_internal_name(mp_tracing_output_internal,      mp_strdup("tracingoutput"));
./mp/mpc/mp.c  22122:     set_internal_name(mp_tracing_stats_internal,       mp_strdup("tracingstats"));
./mp/mpc/mp.c  22123:     set_internal_name(mp_tracing_online_internal,      mp_strdup("tracingonline"));
./mp/mpc/mp.c  22124:     set_internal_name(mp_year_internal,                mp_strdup("year"));
./mp/mpc/mp.c  22125:     set_internal_name(mp_month_internal,               mp_strdup("month"));
./mp/mpc/mp.c  22126:     set_internal_name(mp_day_internal,                 mp_strdup("day"));
./mp/mpc/mp.c  22127:     set_internal_name(mp_time_internal,                mp_strdup("time"));
./mp/mpc/mp.c  22128:     set_internal_name(mp_hour_internal,                mp_strdup("hour"));
./mp/mpc/mp.c  22129:     set_internal_name(mp_minute_internal,              mp_strdup("minute"));
./mp/mpc/mp.c  22130:     set_internal_name(mp_char_code_internal,           mp_strdup("charcode"));
./mp/mpc/mp.c  22131:     set_internal_name(mp_char_wd_internal,             mp_strdup("charwd"));
./mp/mpc/mp.c  22132:     set_internal_name(mp_char_ht_internal,             mp_strdup("charht"));
./mp/mpc/mp.c  22133:     set_internal_name(mp_char_dp_internal,             mp_strdup("chardp"));
./mp/mpc/mp.c  22134:     set_internal_name(mp_char_ic_internal,             mp_strdup("charic"));
./mp/mpc/mp.c  22135:     set_internal_name(mp_pausing_internal,             mp_strdup("pausing"));
./mp/mpc/mp.c  22136:     set_internal_name(mp_showstopping_internal,        mp_strdup("showstopping"));
./mp/mpc/mp.c  22137:     set_internal_name(mp_texscriptmode_internal,       mp_strdup("texscriptmode"));
./mp/mpc/mp.c  22138:     set_internal_name(mp_overloadmode_internal,        mp_strdup("overloadmode"));
./mp/mpc/mp.c  22139:     set_internal_name(mp_linejoin_internal,            mp_strdup("linejoin"));
./mp/mpc/mp.c  22140:     set_internal_name(mp_linecap_internal,             mp_strdup("linecap"));
./mp/mpc/mp.c  22141:     set_internal_name(mp_stacking_internal,            mp_strdup("stacking"));
./mp/mpc/mp.c  22142:     set_internal_name(mp_miterlimit_internal,          mp_strdup("miterlimit"));
./mp/mpc/mp.c  22143:     set_internal_name(mp_warning_check_internal,       mp_strdup("warningcheck"));
./mp/mpc/mp.c  22144:     set_internal_name(mp_true_corners_internal,        mp_strdup("truecorners"));
./mp/mpc/mp.c  22145:     set_internal_name(mp_default_color_model_internal, mp_strdup("defaultcolormodel"));
./mp/mpc/mp.c  22146:     set_internal_name(mp_restore_clip_color_internal,  mp_strdup("restoreclipcolor"));
./mp/mpc/mp.c  22147:     set_internal_name(mp_job_name_internal,            mp_strdup("jobname"));
./mp/mpc/mp.c  22148:     set_internal_name(mp_number_system_internal,       mp_strdup("numbersystem"));
./mp/mpc/mp.c  22149:     set_internal_name(mp_number_precision_internal,    mp_strdup("numberprecision"));
./mp/mpc/mpmath.c     81: static void    mp_number_divide_int               (mp_number *A, int B);
./mp/mpc/mpmath.c     92: static void    mp_number_multiply_int             (mp_number *A, int B);
./mp/mpc/mpmath.c    105: static int     mp_number_to_int                   (mp_number *A);
./mp/mpc/mpmath.c    120: static void    mp_set_number_from_int             (mp_number *A, int B);
./mp/mpc/mpmath.c    121: static void    mp_set_number_from_int_div         (mp_number *A, mp_number *B, int C);
./mp/mpc/mpmath.c    122: static void    mp_set_number_from_int_mul         (mp_number *A, mp_number *B, int C);
./mp/mpc/mpmath.c    231:     math->md_from_int                 = mp_set_number_from_int;
./mp/mpc/mpmath.c    242:     math->md_from_int_div             = mp_set_number_from_int_div;
./mp/mpc/mpmath.c    243:     math->md_from_int_mul             = mp_set_number_from_int_mul;
./mp/mpc/mpmath.c    255:     math->md_multiply_int             = mp_number_multiply_int;
./mp/mpc/mpmath.c    256:     math->md_divide_int               = mp_number_divide_int;
./mp/mpc/mpmath.c    257:     math->md_to_int                   = mp_number_to_int;
./mp/mpc/mpmath.c    381: void mp_set_number_from_int(mp_number *A, int B)
./mp/mpc/mpmath.c    431: void mp_set_number_from_int_div(mp_number *A, mp_number *B, int C)
./mp/mpc/mpmath.c    436: void mp_set_number_from_int_mul(mp_number *A, mp_number *B, int C)
./mp/mpc/mpmath.c    477: void mp_number_multiply_int(mp_number *A, int B)
./mp/mpc/mpmath.c    482: void mp_number_divide_int(mp_number *A, int B)
./mp/mpc/mpmath.c    542: int mp_number_to_int(mp_number *A)
./mp/mpc/mpmath.c    812:             if (internal_value(mp_warning_check_internal).data.val > 0 && (mp->scanner_status != mp_tex_flushing_state)) {
./mp/mpc/mpmathdecimal.c     91: static void   mp_number_divide_int                (mp_number *A, int B);
./mp/mpc/mpmathdecimal.c     99: static void   mp_number_multiply_int              (mp_number *A, int B);
./mp/mpc/mpmathdecimal.c    110: static int    mp_number_to_int                    (mp_number *A);
./mp/mpc/mpmathdecimal.c    117: static void   mp_set_decimal_from_int             (mp_number *A, int B);
./mp/mpc/mpmathdecimal.c    118: static void   mp_set_decimal_from_int_div         (mp_number *A, mp_number *B, int C);
./mp/mpc/mpmathdecimal.c    119: static void   mp_set_decimal_from_int_mul         (mp_number *A, mp_number *B, int C);
./mp/mpc/mpmathdecimal.c    430:     math->md_from_int                 = mp_set_decimal_from_int;
./mp/mpc/mpmathdecimal.c    441:     math->md_from_int_div             = mp_set_decimal_from_int_div;
./mp/mpc/mpmathdecimal.c    442:     math->md_from_int_mul             = mp_set_decimal_from_int_mul;
./mp/mpc/mpmathdecimal.c    454:     math->md_multiply_int             = mp_number_multiply_int;
./mp/mpc/mpmathdecimal.c    455:     math->md_divide_int               = mp_number_divide_int;
./mp/mpc/mpmathdecimal.c    459:     math->md_to_int                   = mp_number_to_int;
./mp/mpc/mpmathdecimal.c    503:     int i = decNumberToInt32((decNumber *) internal_value(mp_number_precision_internal).data.num, &mp_decimal_data.set);
./mp/mpc/mpmathdecimal.c    584: void mp_set_decimal_from_int(mp_number *A, int B)
./mp/mpc/mpmathdecimal.c    643: void mp_set_decimal_from_int_div(mp_number *A, mp_number *B, int C)
./mp/mpc/mpmathdecimal.c    650: void mp_set_decimal_from_int_mul(mp_number *A, mp_number *B, int C)
./mp/mpc/mpmathdecimal.c    706: void mp_number_multiply_int(mp_number *A, int B)
./mp/mpc/mpmathdecimal.c    713: void mp_number_divide_int(mp_number *A, int B)
./mp/mpc/mpmathdecimal.c    784: int mp_number_to_int(mp_number *A)
./mp/mpc/mpmathdecimal.c    951:             if (decNumberIsPositive((decNumber *) internal_value(mp_warning_check_internal).data.num) && (mp->scanner_status != mp_tex_flushing_state)) {
./mp/mpc/mpmathdouble.c     81: static void   mp_number_divide_int               (mp_number *A, int B);
./mp/mpc/mpmathdouble.c     90: static void   mp_number_multiply_int             (mp_number *A, int B);
./mp/mpc/mpmathdouble.c    101: static int    mp_number_to_int                   (mp_number *A);
./mp/mpc/mpmathdouble.c    108: static void   mp_set_double_from_int             (mp_number *A, int B);
./mp/mpc/mpmathdouble.c    109: static void   mp_set_double_from_int_div         (mp_number *A, mp_number *B, int C);
./mp/mpc/mpmathdouble.c    110: static void   mp_set_double_from_int_mul         (mp_number *A, mp_number *B, int C);
./mp/mpc/mpmathdouble.c    206:     math->md_from_int                 = mp_set_double_from_int;
./mp/mpc/mpmathdouble.c    217:     math->md_from_int_div             = mp_set_double_from_int_div;
./mp/mpc/mpmathdouble.c    218:     math->md_from_int_mul             = mp_set_double_from_int_mul;
./mp/mpc/mpmathdouble.c    230:     math->md_multiply_int             = mp_number_multiply_int;
./mp/mpc/mpmathdouble.c    231:     math->md_divide_int               = mp_number_divide_int;
./mp/mpc/mpmathdouble.c    235:     math->md_to_int                   = mp_number_to_int;
./mp/mpc/mpmathdouble.c    347: void mp_set_double_from_int(mp_number *A, int B)
./mp/mpc/mpmathdouble.c    397: void mp_set_double_from_int_div(mp_number *A, mp_number *B, int C)
./mp/mpc/mpmathdouble.c    402: void mp_set_double_from_int_mul(mp_number *A, mp_number *B, int C)
./mp/mpc/mpmathdouble.c    446: void mp_number_multiply_int(mp_number *A, int B)
./mp/mpc/mpmathdouble.c    451: void mp_number_divide_int(mp_number *A, int B)
./mp/mpc/mpmathdouble.c    515: int mp_number_to_int(mp_number *A)
./mp/mpc/mpmathdouble.c    626:             if (internal_value(mp_warning_check_internal).data.dval > 0 && (mp->scanner_status != mp_tex_flushing_state)) {
./mp/mpc/mpmathposit.c     52: static void   mp_number_divide_int               (mp_number *A, int B);
./mp/mpc/mpmathposit.c     61: static void   mp_number_multiply_int             (mp_number *A, int B);
./mp/mpc/mpmathposit.c     72: static int    mp_number_to_int                   (mp_number *A);
./mp/mpc/mpmathposit.c     79: static void   mp_set_posit_from_int              (mp_number *A, int B);
./mp/mpc/mpmathposit.c     80: static void   mp_set_posit_from_int_div          (mp_number *A, mp_number *B, int C);
./mp/mpc/mpmathposit.c     81: static void   mp_set_posit_from_int_mul          (mp_number *A, mp_number *B, int C);
./mp/mpc/mpmathposit.c    335:     math->md_from_int                 = mp_set_posit_from_int;
./mp/mpc/mpmathposit.c    346:     math->md_from_int_div             = mp_set_posit_from_int_div;
./mp/mpc/mpmathposit.c    347:     math->md_from_int_mul             = mp_set_posit_from_int_mul;
./mp/mpc/mpmathposit.c    359:     math->md_multiply_int             = mp_number_multiply_int;
./mp/mpc/mpmathposit.c    360:     math->md_divide_int               = mp_number_divide_int;
./mp/mpc/mpmathposit.c    364:     math->md_to_int                   = mp_number_to_int;
./mp/mpc/mpmathposit.c    474: void mp_set_posit_from_int(mp_number *A, int B)
./mp/mpc/mpmathposit.c    524: void mp_set_posit_from_int_div(mp_number *A, mp_number *B, int C)
./mp/mpc/mpmathposit.c    529: void mp_set_posit_from_int_mul(mp_number *A, mp_number *B, int C)
./mp/mpc/mpmathposit.c    570: void mp_number_multiply_int(mp_number *A, int B)
./mp/mpc/mpmathposit.c    575: void mp_number_divide_int(mp_number *A, int B)
./mp/mpc/mpmathposit.c    633:     return (int) posit_to_integer(posit_mul(A->data.pval, mp_posit_data.d65536));
./mp/mpc/mpmathposit.c    636: int mp_number_to_int(mp_number *A)
./mp/mpc/mpmathposit.c    638:     return (int) posit_to_integer(A->data.pval);
./mp/mpc/mpmathposit.c    653:     return (int) odd(posit_to_integer(A->data.pval));
./mp/mpc/mpmathposit.c    746:             if (posit_gt(internal_value(mp_warning_check_internal).data.pval, mp_posit_data.zero) && (mp->scanner_status != mp_tex_flushing_state)) {
./mp/mpc/mpstrings.c    193: mp_string mp_intern(MP mp, const char *s)
./tex/texadjust.c     62:                     properties->index = tex_scan_integer(0, NULL);
./tex/texadjust.c     78:                             halfword v = tex_scan_integer(1, NULL);
./tex/texalign.c    510:             tex_alignment_interwoven_error(5);
./tex/texalign.c    574:                     halfword v = tex_scan_integer(1, NULL);
./tex/texalign.c    682:                     lmt_alignment_state.row_state.target = tex_scan_integer(1, NULL);
./tex/texalign.c    697:                             halfword v = tex_scan_integer(1, NULL);
./tex/texalign.c    745:                             lmt_alignment_state.row_state.source = tex_scan_integer(1, NULL);
./tex/texalign.c   1034:         tex_show_node_list(preamble, max_integer, max_integer);
./tex/texalign.c   1153:         tex_alignment_interwoven_error(6);
./tex/texalign.c   1213: void tex_alignment_interwoven_error(int n)
./tex/texalign.c   1232:             tex_alignment_interwoven_error(1);
./tex/texalign.c   2090:         tex_alignment_interwoven_error(2);
./tex/texalign.c   2092:         tex_alignment_interwoven_error(3);
./tex/texalign.c   2094:         tex_alignment_interwoven_error(4);
./tex/texarithmetic.c     86: scaled tex_multiply_integers (int n, scaled x)                              { return tex_aux_m_and_a(n, x, 0, 0x7FFFFFFF); } // 017777777777
./tex/texarithmetic.c    373:         } else if (m >= (max_integer / 10)) {
./tex/texarithmetic.c    418:     if (r >= (double) max_integer || r <= -(double) max_integer) {
./tex/texarithmetic.c    428:     if (r >= (double) max_integer || r <= -(double) max_integer) {
./tex/texbuildpage.c    246:             lmt_interface.page_contribute_values[s].name,
./tex/texbuildpage.c   1462:                 tex_show_node_list(lmt_insert_state.head, max_integer, max_integer);
./tex/texbuildpage.c   1499:                 tex_show_node_list(lmt_insert_state.head, max_integer, max_integer);
./tex/texcommands.c    136:         tex_primitive(tex_command,    "adjdemerits",                    internal_int_cmd,       adj_demerits_code,                        internal_int_base);
./tex/texcommands.c    137:         tex_primitive(luatex_command, "adjustspacing",                  internal_int_cmd,       adjust_spacing_code,                      internal_int_base);
./tex/texcommands.c    138:         tex_primitive(luatex_command, "adjustspacingshrink",            internal_int_cmd,       adjust_spacing_shrink_code,               internal_int_base);
./tex/texcommands.c    139:         tex_primitive(luatex_command, "adjustspacingstep",              internal_int_cmd,       adjust_spacing_step_code,                 internal_int_base);
./tex/texcommands.c    140:         tex_primitive(luatex_command, "adjustspacingstretch",           internal_int_cmd,       adjust_spacing_stretch_code,              internal_int_base);
./tex/texcommands.c    141:      /* tex_primitive(luatex_command, "alignmentcellattr",              internal_int_cmd,       alignment_cell_attribute_code,            internal_int_base); */ /* todo */
./tex/texcommands.c    142:         tex_primitive(luatex_command, "alignmentcellsource",            internal_int_cmd,       alignment_cell_source_code,               internal_int_base);
./tex/texcommands.c    143:         tex_primitive(luatex_command, "alignmentwrapsource",            internal_int_cmd,       alignment_wrap_source_code,               internal_int_base);
./tex/texcommands.c    144:         tex_primitive(luatex_command, "automatichyphenpenalty",         internal_int_cmd,       automatic_hyphen_penalty_code,            internal_int_base);
./tex/texcommands.c    145:         tex_primitive(luatex_command, "automigrationmode",              internal_int_cmd,       auto_migration_mode_code,                 internal_int_base);
./tex/texcommands.c    146:         tex_primitive(luatex_command, "autoparagraphmode",              internal_int_cmd,       auto_paragraph_mode_code,                 internal_int_base);
./tex/texcommands.c    147:         tex_primitive(tex_command,    "binoppenalty",                   internal_int_cmd,       post_binary_penalty_code,                 internal_int_base); /*tex For old times sake. */
./tex/texcommands.c    148:         tex_primitive(tex_command,    "brokenpenalty",                  internal_int_cmd,       broken_penalty_code,                      internal_int_base);
./tex/texcommands.c    149:         tex_primitive(luatex_command, "catcodetable",                   internal_int_cmd,       cat_code_table_code,                      internal_int_base);
./tex/texcommands.c    150:         tex_primitive(tex_command,    "clubpenalty",                    internal_int_cmd,       club_penalty_code,                        internal_int_base);
./tex/texcommands.c    151:         tex_primitive(tex_command,    "day",                            internal_int_cmd,       day_code,                                 internal_int_base);
./tex/texcommands.c    152:         tex_primitive(tex_command,    "defaulthyphenchar",              internal_int_cmd,       default_hyphen_char_code,                 internal_int_base);
./tex/texcommands.c    153:         tex_primitive(tex_command,    "defaultskewchar",                internal_int_cmd,       default_skew_char_code,                   internal_int_base);
./tex/texcommands.c    154:         tex_primitive(tex_command,    "delimiterfactor",                internal_int_cmd,       delimiter_factor_code,                    internal_int_base);
./tex/texcommands.c    155:         tex_primitive(luatex_command, "discretionaryoptions",           internal_int_cmd,       discretionary_options_code,               internal_int_base);
./tex/texcommands.c    156:         tex_primitive(tex_command,    "displaywidowpenalty",            internal_int_cmd,       display_widow_penalty_code,               internal_int_base);
./tex/texcommands.c    157:         tex_primitive(tex_command,    "doubleadjdemerits",              internal_int_cmd,       double_adj_demerits_code,                 internal_int_base);
./tex/texcommands.c    158:         tex_primitive(tex_command,    "doublehyphendemerits",           internal_int_cmd,       double_hyphen_demerits_code,              internal_int_base);
./tex/texcommands.c    159:         tex_primitive(tex_command,    "endlinechar",                    internal_int_cmd,       end_line_char_code,                       internal_int_base);
./tex/texcommands.c    160:         tex_primitive(tex_command,    "errorcontextlines",              internal_int_cmd,       error_context_lines_code,                 internal_int_base);
./tex/texcommands.c    161:         tex_primitive(tex_command,    "escapechar",                     internal_int_cmd,       escape_char_code,                         internal_int_base);
./tex/texcommands.c    162:         tex_primitive(luatex_command, "eufactor",                       internal_int_cmd,       eu_factor_code,                           internal_int_base);
./tex/texcommands.c    163:         tex_primitive(luatex_command, "exceptionpenalty",               internal_int_cmd,       exception_penalty_code,                   internal_int_base);
./tex/texcommands.c    164:         tex_primitive(tex_command,    "exhyphenchar",                   internal_int_cmd,       ex_hyphen_char_code,                      internal_int_base);
./tex/texcommands.c    165:         tex_primitive(tex_command,    "exhyphenpenalty",                internal_int_cmd,       ex_hyphen_penalty_code,                   internal_int_base);
./tex/texcommands.c    166:         tex_primitive(luatex_command, "explicithyphenpenalty",          internal_int_cmd,       explicit_hyphen_penalty_code,             internal_int_base);
./tex/texcommands.c    167:         tex_primitive(tex_command,    "fam",                            internal_int_cmd,       family_code,                              internal_int_base);
./tex/texcommands.c    168:         tex_primitive(tex_command,    "finalhyphendemerits",            internal_int_cmd,       final_hyphen_demerits_code,               internal_int_base);
./tex/texcommands.c    169:         tex_primitive(luatex_command, "firstvalidlanguage",             internal_int_cmd,       first_valid_language_code,                internal_int_base);
./tex/texcommands.c    170:         tex_primitive(tex_command,    "floatingpenalty",                internal_int_cmd,       floating_penalty_code,                    internal_int_base);
./tex/texcommands.c    171:         tex_primitive(tex_command,    "globaldefs",                     internal_int_cmd,       global_defs_code,                         internal_int_base);
./tex/texcommands.c    172:      /* tex_primitive(luatex_command, "gluedatafield",                  internal_int_cmd,       glue_data_code,                           internal_int_base); */
./tex/texcommands.c    173:         tex_primitive(luatex_command, "glyphdatafield",                 internal_int_cmd,       glyph_data_code,                          internal_int_base);
./tex/texcommands.c    174:         tex_primitive(luatex_command, "glyphoptions",                   internal_int_cmd,       glyph_options_code,                       internal_int_base);
./tex/texcommands.c    175:         tex_primitive(luatex_command, "glyphscale",                     internal_int_cmd,       glyph_scale_code,                         internal_int_base);
./tex/texcommands.c    176:         tex_primitive(luatex_command, "glyphscriptfield",               internal_int_cmd,       glyph_script_code,                        internal_int_base);
./tex/texcommands.c    177:         tex_primitive(luatex_command, "glyphscriptscale",               internal_int_cmd,       glyph_script_scale_code,                  internal_int_base);
./tex/texcommands.c    178:         tex_primitive(luatex_command, "glyphscriptscriptscale",         internal_int_cmd,       glyph_scriptscript_scale_code,            internal_int_base);
./tex/texcommands.c    179:         tex_primitive(luatex_command, "glyphstatefield",                internal_int_cmd,       glyph_state_code,                         internal_int_base);
./tex/texcommands.c    180:         tex_primitive(luatex_command, "glyphtextscale",                 internal_int_cmd,       glyph_text_scale_code,                    internal_int_base);
./tex/texcommands.c    181:         tex_primitive(luatex_command, "glyphxscale",                    internal_int_cmd,       glyph_x_scale_code,                       internal_int_base);
./tex/texcommands.c    182:         tex_primitive(luatex_command, "glyphyscale",                    internal_int_cmd,       glyph_y_scale_code,                       internal_int_base);
./tex/texcommands.c    183:         tex_primitive(tex_command,    "hangafter",                      internal_int_cmd,       hang_after_code,                          internal_int_base);
./tex/texcommands.c    184:         tex_primitive(tex_command,    "hbadness",                       internal_int_cmd,       hbadness_code,                            internal_int_base);
./tex/texcommands.c    185:         tex_primitive(tex_command,    "holdinginserts",                 internal_int_cmd,       holding_inserts_code,                     internal_int_base);
./tex/texcommands.c    186:         tex_primitive(luatex_command, "holdingmigrations",              internal_int_cmd,       holding_migrations_code,                  internal_int_base);
./tex/texcommands.c    187:         tex_primitive(luatex_command, "hyphenationmode",                internal_int_cmd,       hyphenation_mode_code,                    internal_int_base);
./tex/texcommands.c    188:         tex_primitive(tex_command,    "hyphenpenalty",                  internal_int_cmd,       hyphen_penalty_code,                      internal_int_base);
./tex/texcommands.c    189:         tex_primitive(tex_command,    "interlinepenalty",               internal_int_cmd,       inter_line_penalty_code,                  internal_int_base);
./tex/texcommands.c    190:         tex_primitive(no_command,     "internaldirstate",               internal_int_cmd,       internal_dir_state_code,                  internal_int_base);
./tex/texcommands.c    191:         tex_primitive(no_command,     "internalmathscale",              internal_int_cmd,       internal_math_scale_code,                 internal_int_base);
./tex/texcommands.c    192:         tex_primitive(no_command,     "internalmathstyle",              internal_int_cmd,       internal_math_style_code,                 internal_int_base);
./tex/texcommands.c    193:         tex_primitive(no_command,     "internalparstate",               internal_int_cmd,       internal_par_state_code,                  internal_int_base);
./tex/texcommands.c    194:         tex_primitive(tex_command,    "language",                       internal_int_cmd,       language_code,                            internal_int_base);
./tex/texcommands.c    195:         tex_primitive(etex_command,   "lastlinefit",                    internal_int_cmd,       last_line_fit_code,                       internal_int_base);
./tex/texcommands.c    196:         tex_primitive(tex_command,    "lefthyphenmin",                  internal_int_cmd,       left_hyphen_min_code,                     internal_int_base);
./tex/texcommands.c    197:         tex_primitive(luatex_command, "linebreakcriterion",             internal_int_cmd,       line_break_criterion_code,                internal_int_base);
./tex/texcommands.c    198:         tex_primitive(luatex_command, "linebreakoptional",              internal_int_cmd,       line_break_optional_code,                 internal_int_base);
./tex/texcommands.c    199:         tex_primitive(luatex_command, "linebreakpasses",                internal_int_cmd,       line_break_passes_code,                   internal_int_base);
./tex/texcommands.c    200:         tex_primitive(tex_command,    "linepenalty",                    internal_int_cmd,       line_penalty_code,                        internal_int_base);
./tex/texcommands.c    201:         tex_primitive(luatex_command, "localbrokenpenalty",             internal_int_cmd,       local_broken_penalty_code,                internal_int_base);
./tex/texcommands.c    202:         tex_primitive(luatex_command, "localinterlinepenalty",          internal_int_cmd,       local_interline_penalty_code,             internal_int_base);
./tex/texcommands.c    203:         tex_primitive(luatex_command, "localpretolerance",              internal_int_cmd,       local_pre_tolerance_code,                 internal_int_base);
./tex/texcommands.c    204:         tex_primitive(luatex_command, "localtolerance",                 internal_int_cmd,       local_tolerance_code,                     internal_int_base);
./tex/texcommands.c    205:         tex_primitive(tex_command,    "looseness",                      internal_int_cmd,       looseness_code,                           internal_int_base);
./tex/texcommands.c    206:         tex_primitive(luatex_command, "luacopyinputnodes",              internal_int_cmd,       copy_lua_input_nodes_code,                internal_int_base);
./tex/texcommands.c    207:      /* tex_primitive(tex_command,    "mag",                            internal_int_cmd,       mag_code,                                 internal_int_base); */ /* backend */
./tex/texcommands.c    208:         tex_primitive(luatex_command, "mathbeginclass",                 internal_int_cmd,       math_begin_class_code,                    internal_int_base);
./tex/texcommands.c    209:         tex_primitive(luatex_command, "mathcheckfencesmode",            internal_int_cmd,       math_check_fences_mode_code,              internal_int_base);
./tex/texcommands.c    210:         tex_primitive(luatex_command, "mathdictgroup",                  internal_int_cmd,       math_dict_group_code,                     internal_int_base);
./tex/texcommands.c    211:         tex_primitive(luatex_command, "mathdictproperties",             internal_int_cmd,       math_dict_properties_code,                internal_int_base);
./tex/texcommands.c    212:         tex_primitive(luatex_command, "mathdisplaymode",                internal_int_cmd,       math_display_mode_code,                   internal_int_base);
./tex/texcommands.c    213:         tex_primitive(luatex_command, "mathdisplaypenaltyfactor",       internal_int_cmd,       math_display_penalty_factor_code,         internal_int_base);
./tex/texcommands.c    214:         tex_primitive(luatex_command, "mathdisplayskipmode",            internal_int_cmd,       math_display_skip_mode_code,              internal_int_base);
./tex/texcommands.c    215:         tex_primitive(luatex_command, "mathdoublescriptmode",           internal_int_cmd,       math_double_script_mode_code,             internal_int_base);
./tex/texcommands.c    216:         tex_primitive(luatex_command, "mathendclass",                   internal_int_cmd,       math_end_class_code,                      internal_int_base);
./tex/texcommands.c    217:         tex_primitive(luatex_command, "matheqnogapstep",                internal_int_cmd,       math_eqno_gap_step_code,                  internal_int_base);
./tex/texcommands.c    218:         tex_primitive(luatex_command, "mathfontcontrol",                internal_int_cmd,       math_font_control_code,                   internal_int_base);
./tex/texcommands.c    219:         tex_primitive(luatex_command, "mathgluemode",                   internal_int_cmd,       math_glue_mode_code,                      internal_int_base);
./tex/texcommands.c    220:         tex_primitive(luatex_command, "mathgroupingmode",               internal_int_cmd,       math_grouping_mode_code,                  internal_int_base);
./tex/texcommands.c    221:         tex_primitive(luatex_command, "mathinlinepenaltyfactor",        internal_int_cmd,       math_inline_penalty_factor_code,          internal_int_base);
./tex/texcommands.c    222:         tex_primitive(luatex_command, "mathleftclass",                  internal_int_cmd,       math_left_class_code,                     internal_int_base);
./tex/texcommands.c    223:         tex_primitive(luatex_command, "mathlimitsmode",                 internal_int_cmd,       math_limits_mode_code,                    internal_int_base);
./tex/texcommands.c    224:         tex_primitive(luatex_command, "mathnolimitsmode",               internal_int_cmd,       math_nolimits_mode_code,                  internal_int_base);
./tex/texcommands.c    225:         tex_primitive(luatex_command, "mathpenaltiesmode",              internal_int_cmd,       math_penalties_mode_code,                 internal_int_base);
./tex/texcommands.c    226:         tex_primitive(luatex_command, "mathpretolerance",               internal_int_cmd,       math_pre_tolerance_code,                  internal_int_base);
./tex/texcommands.c    227:         tex_primitive(luatex_command, "mathrightclass",                 internal_int_cmd,       math_right_class_code,                    internal_int_base);
./tex/texcommands.c    228:         tex_primitive(luatex_command, "mathrulesfam",                   internal_int_cmd,       math_rules_fam_code,                      internal_int_base);
./tex/texcommands.c    229:         tex_primitive(luatex_command, "mathrulesmode",                  internal_int_cmd,       math_rules_mode_code,                     internal_int_base);
./tex/texcommands.c    230:         tex_primitive(luatex_command, "mathscriptsmode",                internal_int_cmd,       math_scripts_mode_code,                   internal_int_base);
./tex/texcommands.c    231:         tex_primitive(luatex_command, "mathslackmode",                  internal_int_cmd,       math_slack_mode_code,                     internal_int_base);
./tex/texcommands.c    232:         tex_primitive(luatex_command, "mathspacingmode",                internal_int_cmd,       math_spacing_mode_code,                   internal_int_base); /*tex Inject zero spaces, for tracing */
./tex/texcommands.c    233:         tex_primitive(luatex_command, "mathsurroundmode",               internal_int_cmd,       math_skip_mode_code,                      internal_int_base);
./tex/texcommands.c    234:         tex_primitive(luatex_command, "mathtolerance",                  internal_int_cmd,       math_tolerance_code,                      internal_int_base);
./tex/texcommands.c    235:         tex_primitive(tex_command,    "maxdeadcycles",                  internal_int_cmd,       max_dead_cycles_code,                     internal_int_base);
./tex/texcommands.c    236:         tex_primitive(tex_command,    "month",                          internal_int_cmd,       month_code,                               internal_int_base);
./tex/texcommands.c    237:         tex_primitive(tex_command,    "newlinechar",                    internal_int_cmd,       new_line_char_code,                       internal_int_base);
./tex/texcommands.c    238:         tex_primitive(luatex_command, "normalizelinemode",              internal_int_cmd,       normalize_line_mode_code,                 internal_int_base);
./tex/texcommands.c    239:         tex_primitive(luatex_command, "normalizeparmode",               internal_int_cmd,       normalize_par_mode_code,                  internal_int_base);
./tex/texcommands.c    240:         tex_primitive(luatex_command, "nospaces",                       internal_int_cmd,       disable_spaces_code,                      internal_int_base);
./tex/texcommands.c    241:         tex_primitive(luatex_command, "orphanpenalty",                  internal_int_cmd,       orphan_penalty_code,                      internal_int_base);
./tex/texcommands.c    242:         tex_primitive(luatex_command, "outputbox",                      internal_int_cmd,       output_box_code,                          internal_int_base);
./tex/texcommands.c    243:         tex_primitive(tex_command,    "outputpenalty",                  internal_int_cmd,       output_penalty_code,                      internal_int_base);
./tex/texcommands.c    244:         tex_primitive(luatex_command, "overloadmode",                   internal_int_cmd,       overload_mode_code,                       internal_int_base);
./tex/texcommands.c    245:      /* tex_primitive(luatex_command, "pageboundarypenalty",            internal_int_cmd,       page_boundary_penalty_code,               internal_int_base); */
./tex/texcommands.c    246:         tex_primitive(tex_command,    "pausing",                        internal_int_cmd,       pausing_code,                             internal_int_base);
./tex/texcommands.c    247:         tex_primitive(tex_command,    "postdisplaypenalty",             internal_int_cmd,       post_display_penalty_code,                internal_int_base);
./tex/texcommands.c    248:         tex_primitive(luatex_command, "postinlinepenalty",              internal_int_cmd,       post_inline_penalty_code,                 internal_int_base);
./tex/texcommands.c    249:         tex_primitive(luatex_command, "postshortinlinepenalty",         internal_int_cmd,       post_short_inline_penalty_code,           internal_int_base);
./tex/texcommands.c    250:         tex_primitive(luatex_command, "prebinoppenalty",                internal_int_cmd,       pre_binary_penalty_code,                  internal_int_base); /*tex For old times sake. */
./tex/texcommands.c    251:         tex_primitive(etex_command,   "predisplaydirection",            internal_int_cmd,       pre_display_direction_code,               internal_int_base);
./tex/texcommands.c    252:         tex_primitive(luatex_command, "predisplaygapfactor",            internal_int_cmd,       math_pre_display_gap_factor_code,         internal_int_base);
./tex/texcommands.c    253:         tex_primitive(tex_command,    "predisplaypenalty",              internal_int_cmd,       pre_display_penalty_code,                 internal_int_base);
./tex/texcommands.c    254:         tex_primitive(luatex_command, "preinlinepenalty",               internal_int_cmd,       pre_inline_penalty_code,                  internal_int_base);
./tex/texcommands.c    255:         tex_primitive(luatex_command, "prerelpenalty",                  internal_int_cmd,       pre_relation_penalty_code,                internal_int_base); /*tex For old times sake. */
./tex/texcommands.c    256:         tex_primitive(luatex_command, "preshortinlinepenalty",          internal_int_cmd,       pre_short_inline_penalty_code,            internal_int_base);
./tex/texcommands.c    257:         tex_primitive(tex_command,    "pretolerance",                   internal_int_cmd,       pre_tolerance_code,                       internal_int_base);
./tex/texcommands.c    258:         tex_primitive(luatex_command, "protrudechars",                  internal_int_cmd,       protrude_chars_code,                      internal_int_base);
./tex/texcommands.c    259:         tex_primitive(tex_command,    "relpenalty",                     internal_int_cmd,       post_relation_penalty_code,               internal_int_base); /*tex For old times sake. */
./tex/texcommands.c    260:         tex_primitive(tex_command,    "righthyphenmin",                 internal_int_cmd,       right_hyphen_min_code,                    internal_int_base);
./tex/texcommands.c    261:         tex_primitive(etex_command,   "savinghyphcodes",                internal_int_cmd,       saving_hyph_codes_code,                   internal_int_base);
./tex/texcommands.c    262:         tex_primitive(etex_command,   "savingvdiscards",                internal_int_cmd,       saving_vdiscards_code,                    internal_int_base);
./tex/texcommands.c    263:         tex_primitive(luatex_command, "setfontid",                      internal_int_cmd,       font_code,                                internal_int_base);
./tex/texcommands.c    264:         tex_primitive(tex_command,    "setlanguage",                    internal_int_cmd,       language_code,                            internal_int_base); /* compatibility */
./tex/texcommands.c    265:         tex_primitive(luatex_command, "shapingpenaltiesmode",           internal_int_cmd,       shaping_penalties_mode_code,              internal_int_base);
./tex/texcommands.c    266:         tex_primitive(luatex_command, "shapingpenalty",                 internal_int_cmd,       shaping_penalty_code,                     internal_int_base);
./tex/texcommands.c    267:         tex_primitive(luatex_command, "shortinlineorphanpenalty",       internal_int_cmd,       short_inline_orphan_penalty_code,         internal_int_base);
./tex/texcommands.c    268:         tex_primitive(tex_command,    "showboxbreadth",                 internal_int_cmd,       show_box_breadth_code,                    internal_int_base);
./tex/texcommands.c    269:         tex_primitive(tex_command,    "showboxdepth",                   internal_int_cmd,       show_box_depth_code,                      internal_int_base);
./tex/texcommands.c    270:         tex_primitive(tex_command,    "shownodedetails",                internal_int_cmd,       show_node_details_code,                   internal_int_base);
./tex/texcommands.c    271:         tex_primitive(luatex_command, "singlelinepenalty",              internal_int_cmd,       single_line_penalty_code,                 internal_int_base);
./tex/texcommands.c    272:         tex_primitive(luatex_command, "spacefactormode",                internal_int_cmd,       space_factor_mode,                        internal_int_base);
./tex/texcommands.c    273:         tex_primitive(luatex_command, "spacefactorshrinklimit",         internal_int_cmd,       space_factor_shrink_limit_code,           internal_int_base);
./tex/texcommands.c    274:         tex_primitive(luatex_command, "spacefactorstretchlimit",        internal_int_cmd,       space_factor_stretch_limit_code,          internal_int_base);
./tex/texcommands.c    275:         tex_primitive(luatex_command, "supmarkmode",                    internal_int_cmd,       sup_mark_mode_code,                       internal_int_base);
./tex/texcommands.c    276:         tex_primitive(tex_command,    "time",                           internal_int_cmd,       time_code,                                internal_int_base);
./tex/texcommands.c    277:         tex_primitive(tex_command,    "tolerance",                      internal_int_cmd,       tolerance_code,                           internal_int_base);
./tex/texcommands.c    278:         tex_primitive(luatex_command, "tracingadjusts",                 internal_int_cmd,       tracing_adjusts_code,                     internal_int_base);
./tex/texcommands.c    279:         tex_primitive(luatex_command, "tracingalignments",              internal_int_cmd,       tracing_alignments_code,                  internal_int_base);
./tex/texcommands.c    280:         tex_primitive(etex_command,   "tracingassigns",                 internal_int_cmd,       tracing_assigns_code,                     internal_int_base);
./tex/texcommands.c    281:         tex_primitive(tex_command,    "tracingcommands",                internal_int_cmd,       tracing_commands_code,                    internal_int_base);
./tex/texcommands.c    282:         tex_primitive(luatex_command, "tracingexpressions",             internal_int_cmd,       tracing_expressions_code,                 internal_int_base);
./tex/texcommands.c    283:         tex_primitive(luatex_command, "tracingfonts",                   internal_int_cmd,       tracing_fonts_code,                       internal_int_base);
./tex/texcommands.c    284:         tex_primitive(luatex_command, "tracingfullboxes",               internal_int_cmd,       tracing_full_boxes_code,                  internal_int_base);
./tex/texcommands.c    285:         tex_primitive(etex_command,   "tracinggroups",                  internal_int_cmd,       tracing_groups_code,                      internal_int_base);
./tex/texcommands.c    286:         tex_primitive(luatex_command, "tracinghyphenation",             internal_int_cmd,       tracing_hyphenation_code,                 internal_int_base);
./tex/texcommands.c    287:         tex_primitive(etex_command,   "tracingifs",                     internal_int_cmd,       tracing_ifs_code,                         internal_int_base);
./tex/texcommands.c    288:         tex_primitive(luatex_command, "tracinginserts",                 internal_int_cmd,       tracing_inserts_code,                     internal_int_base);
./tex/texcommands.c    289:         tex_primitive(luatex_command, "tracinglevels",                  internal_int_cmd,       tracing_levels_code,                      internal_int_base);
./tex/texcommands.c    290:         tex_primitive(luatex_command, "tracinglists",                   internal_int_cmd,       tracing_lists_code,                       internal_int_base);
./tex/texcommands.c    291:         tex_primitive(tex_command,    "tracinglostchars",               internal_int_cmd,       tracing_lost_chars_code,                  internal_int_base);
./tex/texcommands.c    292:         tex_primitive(tex_command,    "tracingmacros",                  internal_int_cmd,       tracing_macros_code,                      internal_int_base);
./tex/texcommands.c    293:         tex_primitive(luatex_command, "tracingmarks",                   internal_int_cmd,       tracing_marks_code,                       internal_int_base);
./tex/texcommands.c    294:         tex_primitive(luatex_command, "tracingmath",                    internal_int_cmd,       tracing_math_code,                        internal_int_base);
./tex/texcommands.c    295:         tex_primitive(etex_command,   "tracingnesting",                 internal_int_cmd,       tracing_nesting_code,                     internal_int_base);
./tex/texcommands.c    296:         tex_primitive(luatex_command, "tracingnodes",                   internal_int_cmd,       tracing_nodes_code,                       internal_int_base);
./tex/texcommands.c    297:         tex_primitive(tex_command,    "tracingonline",                  internal_int_cmd,       tracing_online_code,                      internal_int_base);
./tex/texcommands.c    298:         tex_primitive(tex_command,    "tracingoutput",                  internal_int_cmd,       tracing_output_code,                      internal_int_base);
./tex/texcommands.c    299:         tex_primitive(tex_command,    "tracingpages",                   internal_int_cmd,       tracing_pages_code,                       internal_int_base);
./tex/texcommands.c    300:         tex_primitive(tex_command,    "tracingparagraphs",              internal_int_cmd,       tracing_paragraphs_code,                  internal_int_base);
./tex/texcommands.c    301:         tex_primitive(luatex_command, "tracingpasses",                  internal_int_cmd,       tracing_passes_code,                      internal_int_base);
./tex/texcommands.c    302:         tex_primitive(luatex_command, "tracingpenalties",               internal_int_cmd,       tracing_penalties_code,                   internal_int_base);
./tex/texcommands.c    303:         tex_primitive(tex_command,    "tracingrestores",                internal_int_cmd,       tracing_restores_code,                    internal_int_base);
./tex/texcommands.c    304:         tex_primitive(tex_command,    "tracingstats",                   internal_int_cmd,       tracing_stats_code,                       internal_int_base); /* obsolete */
./tex/texcommands.c    305:         tex_primitive(tex_command,    "uchyph",                         internal_int_cmd,       uc_hyph_code,                             internal_int_base); /* obsolete, not needed */
./tex/texcommands.c    306:         tex_primitive(luatex_command, "variablefam",                    internal_int_cmd,       variable_family_code,                     internal_int_base); /* obsolete, not used */
./tex/texcommands.c    307:         tex_primitive(tex_command,    "vbadness",                       internal_int_cmd,       vbadness_code,                            internal_int_base);
./tex/texcommands.c    308:         tex_primitive(tex_command,    "widowpenalty",                   internal_int_cmd,       widow_penalty_code,                       internal_int_base);
./tex/texcommands.c    309:         tex_primitive(tex_command,    "year",                           internal_int_cmd,       year_code,                                internal_int_base);
./tex/texcommands.c    655:         tex_primitive(luatex_command, "lastchknumber",                  some_item_cmd,          last_chk_integer_code,                    0);
./tex/texcommands.c    694:         tex_primitive(luatex_command, "scaledinterwordshrink",          some_item_cmd,          scaled_interword_shrink_code,             0);
./tex/texcommands.c    695:         tex_primitive(luatex_command, "scaledinterwordspace",           some_item_cmd,          scaled_interword_space_code,              0);
./tex/texcommands.c    696:         tex_primitive(luatex_command, "scaledinterwordstretch",         some_item_cmd,          scaled_interword_stretch_code,            0);
./tex/texcommands.c    731:         tex_primitive(luatex_command, "tointeger",                      convert_cmd,            to_integer_code,                          0);
./tex/texcommands.c    749:         tex_primitive(luatex_command, "ifabsnum",                       if_test_cmd,            if_abs_int_code,                          0);
./tex/texcommands.c    757:         tex_primitive(luatex_command, "ifchknum",                       if_test_cmd,            if_chk_int_code,                          0);
./tex/texcommands.c    758:         tex_primitive(luatex_command, "ifchknumber",                    if_test_cmd,            if_chk_integer_code,                      0);
./tex/texcommands.c    760:         tex_primitive(luatex_command, "ifcmpnum",                       if_test_cmd,            if_cmp_int_code,                          0);
./tex/texcommands.c    782:         tex_primitive(luatex_command, "ifintervaldim",                  if_test_cmd,            if_interval_dim_code,                     0); /* playground */
./tex/texcommands.c    783:         tex_primitive(luatex_command, "ifintervalfloat",                if_test_cmd,            if_interval_posit_code,                   0); /* playground */
./tex/texcommands.c    784:         tex_primitive(luatex_command, "ifintervalnum",                  if_test_cmd,            if_interval_int_code,                     0); /* playground */
./tex/texcommands.c    788:         tex_primitive(tex_command,    "ifnum",                          if_test_cmd,            if_int_code,                              0);
./tex/texcommands.c    790:         tex_primitive(luatex_command, "ifnumval",                       if_test_cmd,            if_val_int_code,                          0);
./tex/texcommands.c    803:         tex_primitive(luatex_command, "ifzeronum",                      if_test_cmd,            if_zero_int_code,                         0);
./tex/texcommands.c   1084:         tex_primitive(tex_command,    "batchmode",                      set_interaction_cmd,    batch_mode,                               0);
./tex/texcommands.c   1085:         tex_primitive(tex_command,    "errorstopmode",                  set_interaction_cmd,    error_stop_mode,                          0);
./tex/texcommands.c   1086:         tex_primitive(tex_command,    "nonstopmode",                    set_interaction_cmd,    nonstop_mode,                             0);
./tex/texcommands.c   1087:         tex_primitive(tex_command,    "scrollmode",                     set_interaction_cmd,    scroll_mode,                              0);
./tex/texcommands.c   1174:         tex_primitive(luatex_command, "linedirection",                  internal_int_cmd,       line_direction_code,                      internal_int_base);
./tex/texcommands.c   1175:         tex_primitive(luatex_command, "mathdirection",                  internal_int_cmd,       math_direction_code,                      internal_int_base);
./tex/texcommands.c   1176:         tex_primitive(luatex_command, "pardirection",                   internal_int_cmd,       par_direction_code,                       internal_int_base);
./tex/texcommands.c   1177:         tex_primitive(luatex_command, "textdirection",                  internal_int_cmd,       text_direction_code,                      internal_int_base);
./tex/texconditional.c     51:     .chk_integer   = 0,
./tex/texconditional.c    361:         case if_chk_int_code       : tex_print_format("{chknum %i}",        case_value); break;
./tex/texconditional.c    362:         case if_val_int_code       : tex_print_format("{numval %i}",        case_value); break;
./tex/texconditional.c    363:         case if_cmp_int_code       : tex_print_format("{cmpnum %i}",        case_value); break;
./tex/texconditional.c    593:         case if_int_code:
./tex/texconditional.c    594:         case if_abs_int_code:
./tex/texconditional.c    596:                 halfword n1 = tex_scan_int(0, NULL);
./tex/texconditional.c    598:                 halfword n2 = tex_scan_int(0, NULL);
./tex/texconditional.c    599:                 if (code == if_abs_int_code) {
./tex/texconditional.c    619:         case if_zero_int_code:
./tex/texconditional.c    620:             result = tex_scan_int(0, NULL) == 0;
./tex/texconditional.c    622:         case if_interval_int_code:
./tex/texconditional.c    624:                 scaled n0 = tex_scan_int(0, NULL);
./tex/texconditional.c    625:                 scaled n1 = tex_scan_int(0, NULL);
./tex/texconditional.c    626:                 scaled n2 = tex_scan_int(0, NULL);
./tex/texconditional.c    638:                     tex_posit zero = tex_integer_to_posit(0);
./tex/texconditional.c    653:                     case comparison_element    : result = tex_posit_eq(tex_integer_to_posit(tex_posit_to_integer(n1) & tex_posit_to_integer(n2)).v,n1); break;
./tex/texconditional.c    654:                     case comparison_not_element: result = tex_posit_ne(tex_integer_to_posit(tex_posit_to_integer(n1) & tex_posit_to_integer(n2)).v,n1); break;
./tex/texconditional.c    661:         case if_interval_posit_code:
./tex/texconditional.c    699:         case if_interval_dim_code:
./tex/texconditional.c    709:             result = odd(tex_scan_int(0, NULL));
./tex/texconditional.c    859:         case if_chk_int_code:
./tex/texconditional.c    862:                 lmt_error_state.last_intercept = 0;
./tex/texconditional.c    863:                 lmt_condition_state.chk_integer = 0;
./tex/texconditional.c    864:                 tex_scan_int_validate(); 
./tex/texconditional.c    865:                 result = lmt_error_state.last_intercept ? check_error : check_okay;
./tex/texconditional.c    867:                 lmt_error_state.last_intercept = 0;
./tex/texconditional.c    870:         case if_chk_integer_code:
./tex/texconditional.c    873:                 lmt_error_state.last_intercept = 0;
./tex/texconditional.c    874:                 lmt_condition_state.chk_integer = tex_scan_int(0, NULL); 
./tex/texconditional.c    875:                 result = lmt_error_state.last_intercept ? check_error : check_okay;
./tex/texconditional.c    880:                 lmt_error_state.last_intercept = 0;
./tex/texconditional.c    883:         case if_val_int_code:
./tex/texconditional.c    886:                 lmt_error_state.last_intercept = 0;
./tex/texconditional.c    887:                 lmt_condition_state.chk_integer = tex_scan_int(0, NULL);
./tex/texconditional.c    888:                 result = lmt_error_state.last_intercept ? value_error : (lmt_condition_state.chk_integer < 0) ? value_less : (lmt_condition_state.chk_integer > 0) ? value_greater : value_equal;
./tex/texconditional.c    890:                 lmt_error_state.last_intercept = 0;
./tex/texconditional.c    893:         case if_cmp_int_code:
./tex/texconditional.c    895:                 halfword n1 = tex_scan_int(0, NULL);
./tex/texconditional.c    896:                 halfword n2 = tex_scan_int(0, NULL);
./tex/texconditional.c    903:                 lmt_error_state.last_intercept = 0;
./tex/texconditional.c    906:                 result = lmt_error_state.last_intercept ? check_error : check_okay;
./tex/texconditional.c    908:                 lmt_error_state.last_intercept = 0;
./tex/texconditional.c    914:                 lmt_error_state.last_intercept = 0;
./tex/texconditional.c    916:                 result = lmt_error_state.last_intercept ? check_error : check_okay;
./tex/texconditional.c    921:                 lmt_error_state.last_intercept = 0;
./tex/texconditional.c    927:                 lmt_error_state.last_intercept = 0;
./tex/texconditional.c    929:                 result = lmt_error_state.last_intercept ? value_error : (lmt_condition_state.chk_dimension < 0) ? value_less : (lmt_condition_state.chk_dimension > 0) ? value_greater : value_equal;
./tex/texconditional.c    931:                 lmt_error_state.last_intercept = 0;
./tex/texconditional.c    943:             result = tex_scan_int(0, NULL);
./tex/texconditional.c   1006:                     fl = tex_scan_int(1, NULL); 
./tex/texconditional.c   1078:             result = tex_scan_int(0, NULL) ? 1 : 0;
./tex/texconditional.c   1262:                 result = ! tex_insert_is_void(tex_scan_int(0, NULL));
./tex/texconditional.c   1267:      //         halfword n1 = scan_int(0, NULL);
./tex/texconditional.c   1268:      //         halfword n2 = scan_int(0, NULL);
./tex/texconditional.c   1286:                     case lua_value_integer_code:
./tex/texconditional.c   1305:        To be considered: |if (unless) { result = max_integer - result; }| so that we hit |\else|
./tex/texdirections.c    225:         update_tex_internal_dir_state(internal_dir_state_par + 1);
./tex/texdirections.c    234:         update_tex_internal_dir_state(internal_dir_state_par + 1);
./tex/texdumpdata.c     66:     dump_via_int(f, MAGIC_FORMAT_NUMBER_LE_1);
./tex/texdumpdata.c     67:     dump_via_int(f, MAGIC_FORMAT_NUMBER_LE_2);
./tex/texdumpdata.c     68:     dump_via_int(f, MAGIC_FORMAT_NUMBER_LE_3);
./tex/texdumpdata.c     69:     dump_via_int(f, luametatex_format_fingerprint);
./tex/texdumpdata.c     75:     undump_int(f, x);
./tex/texdumpdata.c     77:         undump_int(f, x);
./tex/texdumpdata.c     79:             undump_int(f, x);
./tex/texdumpdata.c     81:                 undump_int(f, x);
./tex/texdumpdata.c     95:     dump_via_int(f, luametatex_format_fingerprint);
./tex/texdumpdata.c    101:     undump_int(f, x);
./tex/texdumpdata.c    120:     dump_via_int(f, hash_size);
./tex/texdumpdata.c    121:     dump_via_int(f, hash_prime);
./tex/texdumpdata.c    122:     dump_via_int(f, prim_size);
./tex/texdumpdata.c    123:     dump_via_int(f, prim_prime);
./tex/texdumpdata.c    124:     dump_int(f, lmt_hash_state.hash_data.allocated);
./tex/texdumpdata.c    125:     dump_int(f, lmt_hash_state.hash_data.ptr);
./tex/texdumpdata.c    126:     dump_int(f, lmt_hash_state.hash_data.top);
./tex/texdumpdata.c    132:     undump_int(f, x);
./tex/texdumpdata.c    136:     undump_int(f, x);
./tex/texdumpdata.c    140:     undump_int(f, x);
./tex/texdumpdata.c    144:     undump_int(f, x);
./tex/texdumpdata.c    148:     undump_int(f, lmt_hash_state.hash_data.allocated);
./tex/texdumpdata.c    149:     undump_int(f, lmt_hash_state.hash_data.ptr);
./tex/texdumpdata.c    150:     undump_int(f, lmt_hash_state.hash_data.top);
./tex/texequivalents.c    233:         dump_int(f, different);
./tex/texequivalents.c    235:         dump_int(f, equivalent);
./tex/texequivalents.c    239:     dump_int(f, lmt_hash_state.hash_data.ptr);
./tex/texequivalents.c    244:     dump_int(f, lmt_token_state.par_loc);
./tex/texequivalents.c    245:  /* dump_int(f, lmt_token_state.line_par_loc); */ /*tex See note in textoken.c|. */
./tex/texequivalents.c    246:     dump_int(f, lmt_token_state.empty);
./tex/texequivalents.c    256:         undump_int(f, different);
./tex/texequivalents.c    260:         undump_int(f, equivalent);
./tex/texequivalents.c    271:     undump_int(f, lmt_hash_state.hash_data.ptr);
./tex/texequivalents.c    276:     undump_int(f, lmt_token_state.par_loc);
./tex/texequivalents.c    282:  /* undump_int(f, lmt_token_state.line_par_loc); */
./tex/texequivalents.c    288:     undump_int(f, lmt_token_state.empty);
./tex/texequivalents.c    610:          //      tex_print_str_esc(lmt_interface.group_code_values[cur_group].name);
./tex/texequivalents.c    643:                 tex_print_int(tex_aux_save_value(saved_insert_item_index));
./tex/texequivalents.c    704:                     tex_print_int(tex_aux_save_level(saved_full_spec_item_context));
./tex/texequivalents.c   1321:                 case register_int_cmd:
./tex/texequivalents.c   1343:                 case internal_int_cmd:
./tex/texequivalents.c   1344:                     tex_assign_internal_int_value(g, p1, v2);
./tex/texequivalents.c   1345:                     tex_assign_internal_int_value(g, p2, v1);
./tex/texequivalents.c   1348:                     tex_assign_internal_attribute_value(g, p1, v2);
./tex/texequivalents.c   1349:                     tex_assign_internal_attribute_value(g, p2, v1);
./tex/texequivalents.c   1352:                     tex_assign_internal_posit_value(g, p1, v2);
./tex/texequivalents.c   1353:                     tex_assign_internal_posit_value(g, p2, v1);
./tex/texequivalents.c   1356:                     tex_assign_internal_dimension_value(g, p1, v2);
./tex/texequivalents.c   1357:                     tex_assign_internal_dimension_value(g, p2, v1);
./tex/texequivalents.c   1361:                     tex_assign_internal_skip_value(g, p1, v2);
./tex/texequivalents.c   1362:                     tex_assign_internal_skip_value(g, p2, v1);
./tex/texequivalents.c   1606:                         if (p < internal_int_base || p > eqtb_size) {
./tex/texequivalents.c   1670:                             if (p < internal_int_base || p > eqtb_size) {
./tex/texequivalents.c   1874:                 tex_print_int(register_toks_number(n));
./tex/texequivalents.c   1884:                 tex_print_int(register_box_number(n));
./tex/texequivalents.c   1899:                 tex_print_int(register_glue_number(n));
./tex/texequivalents.c   1912:                 tex_print_int(register_mu_glue_number(n));
./tex/texequivalents.c   1920:             case internal_int_reference_cmd:
./tex/texequivalents.c   1921:                 tex_print_cmd_chr(internal_int_cmd, n);
./tex/texequivalents.c   1923:             case register_int_reference_cmd:
./tex/texequivalents.c   1925:                 tex_print_int(register_int_number(n));
./tex/texequivalents.c   1928:                 tex_print_int(eq_value(n));
./tex/texequivalents.c   1935:                 tex_print_int(register_attribute_number(n));
./tex/texequivalents.c   1938:                 tex_print_int(eq_value(n));
./tex/texequivalents.c   1945:                 tex_print_int(register_posit_number(n));
./tex/texequivalents.c   1955:                 tex_print_int(register_dimension_number(n));
./tex/texequivalents.c   1967:                     tex_print_int(specification_count(eq_value(n)));
./tex/texequivalents.c   2046:     tex_aux_set_eq(internal_int_base,           level_one,  internal_int_reference_cmd,       0,                      number_int_pars);
./tex/texequivalents.c   2047:     tex_aux_set_eq(register_int_base,           level_one,  register_int_reference_cmd,       0,                      max_int_register_index);
./tex/texerrors.c     47:     .last_intercept     = 0,
./tex/texexpand.c    462:                                     halfword n = tex_scan_int(0, NULL);
./tex/texexpand.c    622:                                 int cattable = (cur_chr == retokenized_code || tex_scan_optional_keyword("catcodetable")) ? tex_scan_int(0, NULL) : cat_code_table_par;
./tex/texfont.c    185:     dump_int(f, lmt_font_state.font_data.ptr);
./tex/texfont.c    190:     undump_int(f, x);
./tex/texfont.c   1205:  // tex_print_node_list(current, "GOING",max_integer, max_integer);
./tex/texfont.c   1680:             s = tex_scan_int(0, NULL);
./tex/texinputstack.c    431:                     tex_print_int(lmt_input_state.cur_input.index);
./tex/texinputstack.c    433:                     tex_print_int(lmt_input_state.cur_input.index == lmt_input_state.in_stack_data.ptr ? lmt_input_state.input_line : lmt_input_state.in_stack[lmt_input_state.cur_input.index + 1].line);
./tex/texinputstack.c    824:                 tex_alignment_interwoven_error(7);
./tex/texinputstack.c    861:  /* check_interrupt(); */
./tex/texinputstack.c    876:                     tex_alignment_interwoven_error(7);
./tex/texinserts.c    363:             index = tex_scan_int(0, NULL);
./tex/texinserts.c    420:     dump_int(f, lmt_insert_state.mode);
./tex/texinserts.c    421:     dump_int(f, lmt_insert_state.insert_data.ptr);
./tex/texinserts.c    422:     dump_int(f, lmt_insert_state.insert_data.top);
./tex/texinserts.c    428:     undump_int(f, lmt_insert_state.mode);
./tex/texinserts.c    429:     undump_int(f, lmt_insert_state.insert_data.ptr);
./tex/texinserts.c    430:     undump_int(f, lmt_insert_state.insert_data.top);
./tex/texlanguage.c    200:     dump_int(f, lmt_language_state.language_data.top);
./tex/texlanguage.c    201:     dump_int(f, lmt_language_state.language_data.ptr);
./tex/texlanguage.c    206:                 dump_via_int(f, 1);
./tex/texlanguage.c    207:                 dump_int(f, lang->id);
./tex/texlanguage.c    208:                 dump_int(f, lang->pre_hyphen_char);
./tex/texlanguage.c    209:                 dump_int(f, lang->post_hyphen_char);
./tex/texlanguage.c    210:                 dump_int(f, lang->pre_exhyphen_char);
./tex/texlanguage.c    211:                 dump_int(f, lang->post_exhyphen_char);
./tex/texlanguage.c    212:                 dump_int(f, lang->hyphenation_min);
./tex/texlanguage.c    215:                 dump_via_int(f, 0);
./tex/texlanguage.c    224:     undump_int(f, top);
./tex/texlanguage.c    225:     undump_int(f, ptr);
./tex/texlanguage.c    234:                 undump_int(f, x);
./tex/texlanguage.c    244:                         undump_int(f, lang->id);
./tex/texlanguage.c    245:                         undump_int(f, lang->pre_hyphen_char);
./tex/texlanguage.c    246:                         undump_int(f, lang->post_hyphen_char);
./tex/texlanguage.c    247:                         undump_int(f, lang->pre_exhyphen_char);
./tex/texlanguage.c    248:                         undump_int(f, lang->post_exhyphen_char);
./tex/texlanguage.c    249:                         undump_int(f, lang->hyphenation_min);
./tex/texlinebreak.c     90:     .internal_penalty_interline   = 0,
./tex/texlinebreak.c    325:                     .inter_line_penalty      = tex_get_par_par(par, par_inter_line_penalty_code),
./tex/texlinebreak.c    326:                     .inter_line_penalties    = tex_get_par_par(par, par_inter_line_penalties_code),
./tex/texlinebreak.c    717:             |passive_pen_inter| holds the current |localinterlinepenalty|
./tex/texlinebreak.c    815:     |internal_pen_inter|:           running |\localinterlinepenalty|
./tex/texlinebreak.c    819:     |init_internal_left_box|:       running |\localleftbox|
./tex/texlinebreak.c    820:     |init_internal_left_box_width|: running |\localleftbox| width
./tex/texlinebreak.c   1776:                         passive_pen_inter(passive) = lmt_linebreak_state.internal_penalty_interline;
./tex/texlinebreak.c   2238:     because when we're close to |max_integer| we can wrap around due to addition beyond that 
./tex/texlinebreak.c   2244: # define max_prev_graf (max_integer/2)
./tex/texlinebreak.c   2599:         lmt_linebreak_state.internal_penalty_interline = tex_get_local_interline_penalty(current);
./tex/texlinebreak.c   2607:         lmt_linebreak_state.internal_penalty_interline = 0;
./tex/texlinebreak.c   2972:                             lmt_linebreak_state.internal_penalty_interline = tex_get_local_interline_penalty(current);
./tex/texlinebreak.c   4386:                 } else if (passive_pen_inter(cur_p)) {
./tex/texlinebreak.c   4387:                     p = passive_pen_inter(cur_p);
./tex/texlocalboxes.c    295: halfword tex_get_local_interline_penalty(halfword p)
./tex/texlocalboxes.c    297:  // return par_penalty_interline(p);
./tex/texlocalboxes.c    298:     return par_inter_line_penalty(p);
./tex/texlocalboxes.c    317: void tex_set_local_interline_penalty(halfword p, halfword penalty)
./tex/texlocalboxes.c    319:  // par_penalty_interline(p) = penalty;
./tex/texlocalboxes.c    320:     par_inter_line_penalty(p) = penalty;
./tex/texmaincontrol.c    192:                                         xscale = tex_scan_int(0, NULL);
./tex/texmaincontrol.c    209:                                         yscale = tex_scan_int(0, NULL);
./tex/texmaincontrol.c    219:                                 options = tex_scan_int(0, NULL);
./tex/texmaincontrol.c    234:                                 halfword f = tex_scan_int(0, NULL);
./tex/texmaincontrol.c    242:                                 yscale = tex_scan_int(0, NULL);
./tex/texmaincontrol.c    620:     update_tex_internal_par_state(0);
./tex/texmaincontrol.c    621:     update_tex_internal_dir_state(0);
./tex/texmaincontrol.c    643:             update_tex_internal_par_state(0);
./tex/texmaincontrol.c    644:             update_tex_internal_dir_state(0);
./tex/texmaincontrol.c    648:             update_tex_internal_math_style(cur_mode == mmode ? cur_list.math_style : -1);
./tex/texmaincontrol.c    649:             update_tex_internal_math_scale(cur_mode == mmode ? cur_list.math_scale : 0);
./tex/texmaincontrol.c    912:                     update_tex_internal_par_state(internal_par_state_par + 1);
./tex/texmaincontrol.c    931:     int callback = (code == u_leaders_code && tex_scan_keyword("callback")) ? tex_scan_int(0, NULL) : 0;
./tex/texmaincontrol.c   1015:             tex_scan_int(0, NULL);
./tex/texmaincontrol.c   1020:             tex_scan_int(1, NULL);
./tex/texmaincontrol.c   1042:                 halfword tag = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   1052:                 halfword val = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   1125:             tex_scan_int(0, NULL);
./tex/texmaincontrol.c   1130:             tex_scan_int(1, NULL);
./tex/texmaincontrol.c   1213:                 halfword n = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   1237:                 boundary_data(boundary) = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   1255:             boundary_data(boundary) = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   1259:             tex_scan_int(0, NULL);
./tex/texmaincontrol.c   1272:                 boundary_data(n) = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   1279:                 boundary_data(n) = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   1286:                         boundary_reserved(n) = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   1295:             tex_scan_int(0, NULL);
./tex/texmaincontrol.c   1530:                 halfword v = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   1542:                 halfword v = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   1555:                 halfword v = scan_int(1);
./tex/texmaincontrol.c   1772:     halfword delta = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   1782:     halfword delta = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   1858:                 halfword first = looping ? tex_scan_int(1, NULL) : 1;
./tex/texmaincontrol.c   1859:                 halfword last = endless ? max_integer : tex_scan_int(1, NULL);
./tex/texmaincontrol.c   1860:                 halfword step = looping ? tex_scan_int(1, NULL) : 1;
./tex/texmaincontrol.c   2367:                                         set_disc_penalty(d, tex_scan_int(0, NULL));
./tex/texmaincontrol.c   2397:                                 set_disc_options(d, tex_scan_int(0, NULL));
./tex/texmaincontrol.c   2830:             update_tex_inter_line_penalties(null);
./tex/texmaincontrol.c   2838:         if (local_interline_penalty_par) {
./tex/texmaincontrol.c   2839:             update_tex_local_interline_penalty(0);
./tex/texmaincontrol.c   3013:                 tex_show_node_list(boxnode, max_integer, max_integer);
./tex/texmaincontrol.c   3306:         halfword value = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   3655:     the consecutive codes |int_val .. mu_val| and |assign_int .. assign_mu_glue| correspond
./tex/texmaincontrol.c   3665:                 halfword index = tex_scan_int_register_number();
./tex/texmaincontrol.c   3666:                 return register_int_location(index);
./tex/texmaincontrol.c   3708:             return tex_scan_int(optionalequal, NULL);
./tex/texmaincontrol.c   3725:         case register_int_cmd:
./tex/texmaincontrol.c   3726:         case internal_int_cmd:
./tex/texmaincontrol.c   3831:             if (is_frozen(a) && cmd == internal_int_cmd && cur_mode == hmode) {
./tex/texmaincontrol.c   3832:                 tex_update_par_par(internal_int_cmd, index - lmt_primitive_state.prim_data[cmd].offset);
./tex/texmaincontrol.c   3966:                     halfword amount = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   3975:                                 value = tex_multiply_integers(original, amount);
./tex/texmaincontrol.c   4011:                     halfword amount = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   4079:     handle_error_int(
./tex/texmaincontrol.c   4091: inline static void tex_aux_set_interaction(halfword mode)
./tex/texmaincontrol.c   4135:             lmt_page_builder_state.dead_cycles = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   4138:             lmt_page_builder_state.insert_penalties = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   4144:             lmt_insert_state.storing = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   4152:                 int index = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   4158:                 int index = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   4159:                 tex_set_insert_multiplier(index, tex_scan_int(1, NULL));
./tex/texmaincontrol.c   4164:                 int index = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   4170:                 int index = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   4171:                 tex_set_insert_storage(index, tex_scan_int(1, NULL));
./tex/texmaincontrol.c   4176:                 int index = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   4177:                 tex_set_insert_penalty(index, tex_scan_int(1, NULL));
./tex/texmaincontrol.c   4182:                 int index = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   4188:                 int index = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   4194:                 int index = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   4200:                 int index = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   4234:     |insert_penalties| in the presence of |set_page_int|. These definitions are always global.
./tex/texmaincontrol.c   4262:                 tex_aux_set_interaction(tex_scan_int(1, NULL));
./tex/texmaincontrol.c   4267:                 tex_set_insert_mode(tex_scan_int(1, NULL));
./tex/texmaincontrol.c   4345:                 halfword v = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   4354:                 halfword v = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   4436:                 scaled v = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   4445:                 halfword val = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   4546:                     halfword n = tex_scan_int_register_number();
./tex/texmaincontrol.c   4547:                     tex_define_again(a, p, register_int_cmd, register_int_location(n));
./tex/texmaincontrol.c   4595:                     halfword v = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   4691:     halfword count = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   4693:         options = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   4723:                                                 tex_set_passes_adjdemerits(p, j, tex_scan_int(0, NULL));
./tex/texmaincontrol.c   4733:                                                                         tex_set_passes_adjustspacingstep(p, j, tex_scan_int(0, NULL));              
./tex/texmaincontrol.c   4738:                                                                         tex_set_passes_adjustspacingstretch(p, j, tex_scan_int(0, NULL));           
./tex/texmaincontrol.c   4748:                                                                 tex_set_passes_adjustspacingshrink(p, j, tex_scan_int(0, NULL));            
./tex/texmaincontrol.c   4756:                                                     tex_set_passes_adjustspacing(p, j, tex_scan_int(0, NULL));   
./tex/texmaincontrol.c   4768:                                     tex_set_passes_badness(p, j, tex_scan_int(0, NULL));           
./tex/texmaincontrol.c   4775:                                             tex_set_passes_callback(p, j, tex_scan_int(0, NULL));           
./tex/texmaincontrol.c   4781:                                             tex_set_passes_classes(p, j, tex_scan_int(0, NULL));           
./tex/texmaincontrol.c   4794:                                                 tex_set_passes_doubleadjdemerits(p, j, tex_scan_int(0, NULL));
./tex/texmaincontrol.c   4799:                                                 tex_set_passes_doublehyphendemerits(p, j, tex_scan_int(0, NULL));
./tex/texmaincontrol.c   4817:                                             tex_set_passes_extrahyphenpenalty(p, j, tex_scan_int(0, NULL));
./tex/texmaincontrol.c   4827:                                     tex_set_passes_finalhyphendemerits(p, j, tex_scan_int(0, NULL));
./tex/texmaincontrol.c   4834:                                             tex_set_passes_identifier(p, j, tex_scan_int(0, NULL));           
./tex/texmaincontrol.c   4851:                                             tex_set_passes_looseness(p, j, tex_scan_int(0, NULL));
./tex/texmaincontrol.c   4862:                                                                     tex_set_passes_linebreakcriterion(p, j, tex_scan_int(0, NULL));           
./tex/texmaincontrol.c   4867:                                                                     tex_set_passes_optional(p, j, tex_scan_int(0, NULL));           
./tex/texmaincontrol.c   4879:                                                         tex_set_passes_linepenalty(p, j, tex_scan_int(0, NULL));           
./tex/texmaincontrol.c   4898:                                     tex_set_passes_orphanpenalty(p, j, tex_scan_int(0, NULL));           
./tex/texmaincontrol.c   4922:                                             tex_set_passes_tolerance(p, j, tex_scan_int(0, NULL));
./tex/texmaincontrol.c   4940:                         tex_set_specification_penalty(p, j, tex_scan_int(0, NULL)); /*tex penalty values */
./tex/texmaincontrol.c   4975:             tex_set_pre_hyphen_char(language_par, tex_scan_int(1, NULL));
./tex/texmaincontrol.c   4978:             tex_set_post_hyphen_char(language_par, tex_scan_int(1, NULL));
./tex/texmaincontrol.c   4981:             tex_set_pre_exhyphen_char(language_par, tex_scan_int(1, NULL));
./tex/texmaincontrol.c   4984:             tex_set_post_exhyphen_char(language_par, tex_scan_int(1, NULL));
./tex/texmaincontrol.c   4987:             tex_set_hyphenation_min(language_par, tex_scan_int(1, NULL));
./tex/texmaincontrol.c   4991:                 halfword lan = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   4992:                 halfword val = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   5010:                 halfword val = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   5017:                 halfword val = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   5041:                 halfword val = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   5049:                 halfword val = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   5198:                 halfword character = tex_scan_int(0, NULL);
./tex/texmaincontrol.c   5575:                             code = internal_int_location(first_math_class_code + mathclass);
./tex/texmaincontrol.c   5578:                             code = internal_int_location(first_math_atom_code + mathclass);
./tex/texmaincontrol.c   5582:                  // tex_assign_internal_int_value(a, code, value);
./tex/texmaincontrol.c   5602:                             code = internal_int_location(first_math_class_code + mathclass);
./tex/texmaincontrol.c   5606:                             code = internal_int_location(first_math_atom_code + mathclass);
./tex/texmaincontrol.c   5610:                             code = internal_int_location(first_math_parent_code + mathclass);
./tex/texmaincontrol.c   5630:                 halfword penalty = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   5634:                             code = internal_int_location(first_math_pre_penalty_code + mathclass);
./tex/texmaincontrol.c   5637:                             code = internal_int_location(first_math_post_penalty_code + mathclass);
./tex/texmaincontrol.c   5640:                             code = internal_int_location(first_math_display_pre_penalty_code + mathclass);
./tex/texmaincontrol.c   5643:                             code = internal_int_location(first_math_display_post_penalty_code + mathclass);
./tex/texmaincontrol.c   5647:                  // tex_assign_internal_int_value(a, code, penalty);
./tex/texmaincontrol.c   5665:                     code = internal_int_location(first_math_parent_code + mathclass);
./tex/texmaincontrol.c   5668:                  // tex_assign_internal_int_value(a, code, value);
./tex/texmaincontrol.c   5682:                     code = internal_int_location(first_math_ignore_code + param);
./tex/texmaincontrol.c   5683:                     value = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   5692:                     code = internal_int_location(first_math_options_code + mathclass);
./tex/texmaincontrol.c   5693:                     value = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   5695:                  // tex_assign_internal_int_value(a, code, value);
./tex/texmaincontrol.c   5717:                 case math_int_parameter:
./tex/texmaincontrol.c   5721:                             indirect = indirect_math_integer;
./tex/texmaincontrol.c   5723:                         case register_int_cmd:
./tex/texmaincontrol.c   5725:                             indirect = indirect_math_register_integer;
./tex/texmaincontrol.c   5753:                             indirect = indirect_math_internal_mugluespec;
./tex/texmaincontrol.c   5773:                             indirect = indirect_math_internal_gluespec;
./tex/texmaincontrol.c   5795:                 case math_int_parameter:
./tex/texmaincontrol.c   5796:                     value = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   5805:                     value = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   5884: static void tex_aux_set_internal_int(int a)
./tex/texmaincontrol.c   5887:     halfword v = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   5888:     tex_assign_internal_int_value(a, p, v);
./tex/texmaincontrol.c   5891: static void tex_aux_set_register_int(int a)
./tex/texmaincontrol.c   5894:     halfword v = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   5898: static void tex_aux_set_internal_posit(int a)
./tex/texmaincontrol.c   5902:     tex_assign_internal_int_value(a, p, v);
./tex/texmaincontrol.c   5912: static void tex_aux_set_internal_attr(int a)
./tex/texmaincontrol.c   5915:     halfword v = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   5926:     halfword v = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   5934: static void tex_aux_set_internal_dimension(int a)
./tex/texmaincontrol.c   5938:     tex_assign_internal_dimension_value(a, p, v);
./tex/texmaincontrol.c   5948: static void tex_aux_set_internal_glue(int a)
./tex/texmaincontrol.c   5953:     tex_assign_internal_skip_value(a, p, v);
./tex/texmaincontrol.c   5963: static void tex_aux_set_internal_mu_glue(int a)
./tex/texmaincontrol.c   6003:             lmt_page_builder_state.last_penalty = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   6006:             lmt_page_builder_state.last_kern = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   6012:             lmt_page_builder_state.last_penalty = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   6015:             lmt_page_builder_state.last_node_type = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   6018:             lmt_page_builder_state.last_node_subtype = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   6039:             v = tex_scan_int(1, NULL);
./tex/texmaincontrol.c   6133:         case internal_int_cmd:
./tex/texmaincontrol.c   6134:             tex_aux_set_internal_int(flags);
./tex/texmaincontrol.c   6136:         case register_int_cmd:
./tex/texmaincontrol.c   6137:             tex_aux_set_register_int(flags);
./tex/texmaincontrol.c   6140:             tex_aux_set_internal_attr(flags);
./tex/texmaincontrol.c   6146:             tex_aux_set_internal_posit(flags);
./tex/texmaincontrol.c   6152:             tex_aux_set_internal_dimension(flags);
./tex/texmaincontrol.c   6158:             tex_aux_set_internal_glue(flags);
./tex/texmaincontrol.c   6164:             tex_aux_set_internal_mu_glue(flags);
./tex/texmaincontrol.c   6215:         case set_interaction_cmd:
./tex/texmaincontrol.c   6216:             tex_aux_set_interaction(cur_chr);
./tex/texmaincontrol.c   6326: void tex_assign_internal_int_value(int a, halfword p, int val)
./tex/texmaincontrol.c   6328:     switch (internal_int_number(p)) {
./tex/texmaincontrol.c   6342:                 update_tex_internal_dir_state(internal_dir_state_par + 1);
./tex/texmaincontrol.c   6349:                 p = internal_int_location(text_direction_code);
./tex/texmaincontrol.c   6352:                 update_tex_internal_dir_state(internal_dir_state_par + 1);
./tex/texmaincontrol.c   6482:             tex_word_define(a, internal_int_location(hyphenation_mode_code), val);
./tex/texmaincontrol.c   6484:         case local_interline_penalty_code:
./tex/texmaincontrol.c   6497:                 update_tex_internal_par_state(internal_par_state_par + 1);
./tex/texmaincontrol.c   6540:             tex_word_define(a, internal_int_location(first_math_post_penalty_code + binary_noad_subtype), val);
./tex/texmaincontrol.c   6541:             tex_word_define(a, internal_int_location(first_math_display_post_penalty_code + binary_noad_subtype), val);
./tex/texmaincontrol.c   6544:             tex_word_define(a, internal_int_location(first_math_post_penalty_code + relation_noad_subtype), val);
./tex/texmaincontrol.c   6545:             tex_word_define(a, internal_int_location(first_math_display_post_penalty_code + relation_noad_subtype), val);
./tex/texmaincontrol.c   6548:             tex_word_define(a, internal_int_location(first_math_pre_penalty_code + binary_noad_subtype), val);
./tex/texmaincontrol.c   6549:             tex_word_define(a, internal_int_location(first_math_display_pre_penalty_code + binary_noad_subtype), val);
./tex/texmaincontrol.c   6552:             tex_word_define(a, internal_int_location(first_math_pre_penalty_code + relation_noad_subtype), val);
./tex/texmaincontrol.c   6553:             tex_word_define(a, internal_int_location(first_math_display_pre_penalty_code + relation_noad_subtype), val);
./tex/texmaincontrol.c   6576:                 tex_update_par_par(internal_int_cmd, internal_int_number(p));
./tex/texmaincontrol.c   6581: void tex_assign_internal_attribute_value(int a, halfword p, int val)
./tex/texmaincontrol.c   6590: void tex_assign_internal_posit_value(int a, halfword p, int val)
./tex/texmaincontrol.c   6598: void tex_assign_internal_dimension_value(int a, halfword p, int val)
./tex/texmaincontrol.c   6606: void tex_assign_internal_skip_value(int a, halfword p, int val)
./tex/texmaincontrol.c   6840:                         show_box_depth_par = max_integer;
./tex/texmaincontrol.c   6841:                         show_box_breadth_par = max_integer;
./tex/texmaincontrol.c   6971:         tex_print_int(value);
./tex/texmaincontrol.c   7012:         case internal_int_cmd: 
./tex/texmaincontrol.c   7013:         case register_int_cmd: 
./tex/texmaincontrol.c   7039:         case set_interaction_cmd: 
./tex/texmaincontrol.c   7305:         pre_inline_penalty_par = max_integer;
./tex/texmaincontrol.c   7306:         post_inline_penalty_par = max_integer;
./tex/texmaincontrol.c   7307:         pre_short_inline_penalty_par = max_integer;
./tex/texmaincontrol.c   7308:         post_short_inline_penalty_par = max_integer;
./tex/texmath.c    349:         tex_print_str(lmt_interface.math_indirect_values[indirect].name);
./tex/texmath.c    360:         case math_int_parameter:
./tex/texmath.c    362:             tex_print_int(value);
./tex/texmath.c    371:             tex_print_int(value);
./tex/texmath.c    485:              // case math_int_parameter:
./tex/texmath.c    494:         case indirect_math_integer:
./tex/texmath.c    563:         case indirect_math_register_integer:
./tex/texmath.c    569:             } else if (eq_type(value) == register_int_reference_cmd) {
./tex/texmath.c    619:         case indirect_math_internal_integer:
./tex/texmath.c    625:             } else if (eq_type(value) == internal_int_reference_cmd) {
./tex/texmath.c    633:         case indirect_math_internal_dimension:
./tex/texmath.c    647:         case indirect_math_internal_gluespec:
./tex/texmath.c    661:         case indirect_math_internal_mugluespec:
./tex/texmath.c    889:                 style_scale(noad) = tex_scan_int(0, NULL);
./tex/texmath.c    992:         tex_print_int(-1);
./tex/texmath.c   1096:         tex_print_int(fraction);
./tex/texmath.c   1201:         tex_print_int(noad_source(n));
./tex/texmath.c   1342:         update_tex_internal_math_style(cur_mode == mmode ? cur_list.math_style : -1);
./tex/texmath.c   1343:         update_tex_internal_math_scale(cur_mode == mmode ? cur_list.math_scale : -1);
./tex/texmath.c   1369:     return tex_located_save_value(internal_int_location(par_direction_code));
./tex/texmath.c   1477:                 halfword v = tex_scan_int(0, NULL);
./tex/texmath.c   1553:                 halfword v = tex_scan_int(0, NULL);
./tex/texmath.c   1575:             // be used as it contains invalid USV's. Note: |scan_int| won't accept families 128-255
./tex/texmath.c   1578:                 halfword v = tex_scan_int(0, NULL);
./tex/texmath.c   2153:                 We could do a fast |tex_scan_something_internal| here but this branch is not that 
./tex/texmath.c   2159:                 n = tex_scan_int(0, NULL);
./tex/texmath.c   2160:                 *mval = tex_mathchar_from_integer(n, umath_mathcode);
./tex/texmath.c   2183:                 halfword mathclass  = tex_scan_int(0, NULL);
./tex/texmath.c   2384:                                         noad_source(target) = tex_scan_int(0, NULL);
./tex/texmath.c   2425:                                 noad_options(target) = tex_scan_int(0, NULL);
./tex/texmath.c   2535:                         noad_source(tail) = tex_scan_int(0, NULL);
./tex/texmath.c   2565:                                 noad_source(tail) = tex_scan_int(0, NULL);
./tex/texmath.c   2749:                             noad_source(radical) = tex_scan_int(0, NULL);
./tex/texmath.c   2754:                             radical_size(radical) = tex_scan_int(0, NULL);
./tex/texmath.c   3019:                                     noad_source(accent) = tex_scan_int(0, NULL);
./tex/texmath.c   3041:                                     accent_fraction(accent) = tex_scan_int(0, NULL);
./tex/texmath.c   3859:                                         noad_source(fraction) = tex_scan_int(0, NULL);
./tex/texmath.c   3869:                                 fraction_h_factor(fraction) = tex_scan_int(0, NULL);
./tex/texmath.c   3874:                                 fraction_v_factor(fraction) = tex_scan_int(0, NULL);
./tex/texmath.c   4143:                     factor = tex_scan_int(0, NULL);
./tex/texmath.c   4245:                             source = tex_scan_int(0, NULL);
./tex/texmath.c   4962:                     if (pre_inline_penalty_par != max_integer) {
./tex/texmath.c   5001:                     if (post_inline_penalty_par != max_integer) {
./tex/texmath.c   5029:                         if (pre_short_inline_penalty_par != max_integer) {
./tex/texmath.c   5032:                         if (post_short_inline_penalty_par != max_integer) {
./tex/texmath.c   5526:     tex_word_define(0, internal_int_location(first_math_class_code   + mathclass), tex_aux_math_class_default(parent));
./tex/texmath.c   5527:     tex_word_define(0, internal_int_location(first_math_atom_code    + mathclass), tex_aux_math_class_default(mathclass));
./tex/texmath.c   5528:     tex_word_define(0, internal_int_location(first_math_options_code + mathclass), options);
./tex/texmath.c   5529:     tex_word_define(0, internal_int_location(first_math_parent_code  + mathclass), tex_aux_math_class_default(mathclass));
./tex/texmath.c   5553:         tex_word_define(0, internal_int_location(first_math_pre_penalty_code  + mathclass), math_default_penalty);
./tex/texmath.c   5554:         tex_word_define(0, internal_int_location(first_math_post_penalty_code + mathclass), math_default_penalty);
./tex/texmath.c   5555:         tex_word_define(0, internal_int_location(first_math_display_pre_penalty_code  + mathclass), math_default_penalty);
./tex/texmath.c   5556:         tex_word_define(0, internal_int_location(first_math_display_post_penalty_code + mathclass), math_default_penalty);
./tex/texmathcodes.c     68: mathcodeval tex_mathchar_from_integer(int value, int extcode)
./tex/texmlist.c   1010: static scaled tex_aux_stack_char_into_box(halfword box, halfword fnt, int chr, quarterword subtype, int horiziontal)
./tex/texmlist.c   1052: static void tex_aux_stack_glue_into_box(halfword box, scaled min, scaled max) {
./tex/texmlist.c   1355:                 tex_aux_stack_glue_into_box(box, -progress, -initial);
./tex/texmlist.c   1359:             max_natural += tex_aux_stack_char_into_box(box, fnt, e->glyph, glyph_math_extensible_subtype, horizontal);
./tex/texmlist.c   1375:                     tex_aux_stack_glue_into_box(box, -progress, -initial);
./tex/texmlist.c   1379:                 max_natural += tex_aux_stack_char_into_box(box, fnt, e->glyph, glyph_math_extensible_subtype, horizontal);
./tex/texmlist.c   6467:     tex_show_node_list(list, tracing_math_par >= 3 ? max_integer : show_box_depth_par, tracing_math_par >= 3 ? max_integer : show_box_breadth_par);
./tex/texnodes.c    683:     lmt_interface.node_data = lmt_memory_malloc((passive_node + 2) * sizeof(node_info));
./tex/texnodes.c    696:     lmt_interface.node_data[hlist_node]          = (node_info) { .id = hlist_node,          .size = box_node_size,            .first = 0, .last = last_list_subtype,          .subtypes = subtypes_list,     .fields = lmt_node_fields_list,           .name = lua_key(hlist),          .lua = lua_key_index(hlist),           .visible = 1 };
./tex/texnodes.c    697:     lmt_interface.node_data[vlist_node]          = (node_info) { .id = vlist_node,          .size = box_node_size,            .first = 0, .last = last_list_subtype,          .subtypes = subtypes_list,     .fields = lmt_node_fields_list,           .name = lua_key(vlist),          .lua = lua_key_index(vlist),           .visible = 1 };
./tex/texnodes.c    698:     lmt_interface.node_data[rule_node]           = (node_info) { .id = rule_node,           .size = rule_node_size,           .first = 0, .last = last_rule_subtype,          .subtypes = subtypes_rule,     .fields = lmt_node_fields_rule,           .name = lua_key(rule),           .lua = lua_key_index(rule),            .visible = 1 };
./tex/texnodes.c    699:     lmt_interface.node_data[insert_node]         = (node_info) { .id = insert_node,         .size = insert_node_size,         .first = 0, .last = 0,                          .subtypes = NULL,              .fields = lmt_node_fields_insert,         .name = lua_key(insert),         .lua = lua_key_index(insert),          .visible = 1 };
./tex/texnodes.c    700:     lmt_interface.node_data[mark_node]           = (node_info) { .id = mark_node,           .size = mark_node_size,           .first = 0, .last = last_mark_subtype,          .subtypes = subtypes_mark,     .fields = lmt_node_fields_mark,           .name = lua_key(mark),           .lua = lua_key_index(mark),            .visible = 1 };
./tex/texnodes.c    701:     lmt_interface.node_data[adjust_node]         = (node_info) { .id = adjust_node,         .size = adjust_node_size,         .first = 0, .last = last_adjust_subtype,        .subtypes = subtypes_adjust,   .fields = lmt_node_fields_adjust,         .name = lua_key(adjust),         .lua = lua_key_index(adjust),          .visible = 1 };
./tex/texnodes.c    702:     lmt_interface.node_data[boundary_node]       = (node_info) { .id = boundary_node,       .size = boundary_node_size,       .first = 0, .last = last_boundary_subtype,      .subtypes = subtypes_boundary, .fields = lmt_node_fields_boundary,       .name = lua_key(boundary),       .lua = lua_key_index(boundary),        .visible = 1 };
./tex/texnodes.c    703:     lmt_interface.node_data[disc_node]           = (node_info) { .id = disc_node,           .size = disc_node_size,           .first = 0, .last = last_discretionary_subtype, .subtypes = subtypes_disc,     .fields = lmt_node_fields_disc,           .name = lua_key(disc),           .lua = lua_key_index(disc),            .visible = 1 };
./tex/texnodes.c    704:     lmt_interface.node_data[whatsit_node]        = (node_info) { .id = whatsit_node,        .size = whatsit_node_size,        .first = 0, .last = 0,                          .subtypes = NULL,              .fields = lmt_node_fields_whatsit,        .name = lua_key(whatsit),        .lua = lua_key_index(whatsit),         .visible = 1 };
./tex/texnodes.c    705:     lmt_interface.node_data[par_node]            = (node_info) { .id = par_node,            .size = par_node_size,            .first = 0, .last = last_par_subtype,           .subtypes = subtypes_par,      .fields = lmt_node_fields_par,            .name = lua_key(par),            .lua = lua_key_index(par),             .visible = 1 };
./tex/texnodes.c    706:     lmt_interface.node_data[dir_node]            = (node_info) { .id = dir_node,            .size = dir_node_size,            .first = 0, .last = last_dir_subtype,           .subtypes = subtypes_dir,      .fields = lmt_node_fields_dir,            .name = lua_key(dir),            .lua = lua_key_index(dir),             .visible = 1 };
./tex/texnodes.c    707:     lmt_interface.node_data[math_node]           = (node_info) { .id = math_node,           .size = math_node_size,           .first = 0, .last = last_math_subtype,          .subtypes = subtypes_math,     .fields = lmt_node_fields_math,           .name = lua_key(math),           .lua = lua_key_index(math),            .visible = 1 };
./tex/texnodes.c    708:     lmt_interface.node_data[glue_node]           = (node_info) { .id = glue_node,           .size = glue_node_size,           .first = 0, .last = last_glue_subtype,          .subtypes = subtypes_glue,     .fields = lmt_node_fields_glue,           .name = lua_key(glue),           .lua = lua_key_index(glue),            .visible = 1 };
./tex/texnodes.c    709:     lmt_interface.node_data[kern_node]           = (node_info) { .id = kern_node,           .size = kern_node_size,           .first = 0, .last = last_kern_subtype,          .subtypes = subtypes_kern,     .fields = lmt_node_fields_kern,           .name = lua_key(kern),           .lua = lua_key_index(kern),            .visible = 1 };
./tex/texnodes.c    710:     lmt_interface.node_data[penalty_node]        = (node_info) { .id = penalty_node,        .size = penalty_node_size,        .first = 0, .last = last_penalty_subtype,       .subtypes = subtypes_penalty,  .fields = lmt_node_fields_penalty,        .name = lua_key(penalty),        .lua = lua_key_index(penalty),         .visible = 1 };
./tex/texnodes.c    711:     lmt_interface.node_data[style_node]          = (node_info) { .id = style_node,          .size = style_node_size,          .first = 0, .last = 0,                          .subtypes = NULL,              .fields = lmt_node_fields_style,          .name = lua_key(style),          .lua = lua_key_index(style),           .visible = 1 };
./tex/texnodes.c    712:     lmt_interface.node_data[choice_node]         = (node_info) { .id = choice_node,         .size = choice_node_size,         .first = 0, .last = last_choice_subtype,        .subtypes = subtypes_choice,   .fields = lmt_node_fields_choice,         .name = lua_key(choice),         .lua = lua_key_index(choice),          .visible = 1 };
./tex/texnodes.c    713:     lmt_interface.node_data[parameter_node]      = (node_info) { .id = parameter_node,      .size = parameter_node_size,      .first = 0, .last = 0,                          .subtypes = NULL,              .fields = lmt_node_fields_parameter,      .name = lua_key(parameter),      .lua = lua_key_index(parameter),       .visible = 1 };
./tex/texnodes.c    714:     lmt_interface.node_data[simple_noad]         = (node_info) { .id = simple_noad,         .size = noad_size,                .first = 0, .last = last_noad_subtype,          .subtypes = subtypes_noad,     .fields = lmt_node_fields_noad,           .name = lua_key(noad),           .lua = lua_key_index(noad),            .visible = 1 };
./tex/texnodes.c    715:     lmt_interface.node_data[radical_noad]        = (node_info) { .id = radical_noad,        .size = radical_noad_size,        .first = 0, .last = last_radical_subtype,       .subtypes = subtypes_radical,  .fields = lmt_node_fields_radical,        .name = lua_key(radical),        .lua = lua_key_index(radical),         .visible = 1 };
./tex/texnodes.c    716:     lmt_interface.node_data[fraction_noad]       = (node_info) { .id = fraction_noad,       .size = fraction_noad_size,       .first = 0, .last = 0,                          .subtypes = NULL,              .fields = lmt_node_fields_fraction,       .name = lua_key(fraction),       .lua = lua_key_index(fraction),        .visible = 1 };
./tex/texnodes.c    717:     lmt_interface.node_data[accent_noad]         = (node_info) { .id = accent_noad,         .size = accent_noad_size,         .first = 0, .last = last_accent_subtype,        .subtypes = subtypes_accent,   .fields = lmt_node_fields_accent,         .name = lua_key(accent),         .lua = lua_key_index(accent),          .visible = 1 };
./tex/texnodes.c    718:     lmt_interface.node_data[fence_noad]          = (node_info) { .id = fence_noad,          .size = fence_noad_size,          .first = 0, .last = last_fence_subtype,         .subtypes = subtypes_fence,    .fields = lmt_node_fields_fence,          .name = lua_key(fence),          .lua = lua_key_index(fence),           .visible = 1 };
./tex/texnodes.c    719:     lmt_interface.node_data[math_char_node]      = (node_info) { .id = math_char_node,      .size = math_kernel_node_size,    .first = 0, .last = 0,                          .subtypes = NULL,              .fields = lmt_node_fields_math_char,      .name = lua_key(mathchar),       .lua = lua_key_index(mathchar),        .visible = 1 };
./tex/texnodes.c    720:     lmt_interface.node_data[math_text_char_node] = (node_info) { .id = math_text_char_node, .size = math_kernel_node_size,    .first = 0, .last = 0,                          .subtypes = NULL,              .fields = lmt_node_fields_math_text_char, .name = lua_key(mathtextchar),   .lua = lua_key_index(mathtextchar),    .visible = 1 };
./tex/texnodes.c    721:     lmt_interface.node_data[sub_box_node]        = (node_info) { .id = sub_box_node,        .size = math_kernel_node_size,    .first = 0, .last = 0,                          .subtypes = NULL,              .fields = lmt_node_fields_sub_box,        .name = lua_key(subbox),         .lua = lua_key_index(subbox),          .visible = 1 };
./tex/texnodes.c    722:     lmt_interface.node_data[sub_mlist_node]      = (node_info) { .id = sub_mlist_node,      .size = math_kernel_node_size,    .first = 0, .last = 0,                          .subtypes = NULL,              .fields = lmt_node_fields_sub_mlist,      .name = lua_key(submlist),       .lua = lua_key_index(submlist),        .visible = 1 };
./tex/texnodes.c    723:     lmt_interface.node_data[delimiter_node]      = (node_info) { .id = delimiter_node,      .size = math_delimiter_node_size, .first = 0, .last = 0,                          .subtypes = NULL,              .fields = lmt_node_fields_delimiter,      .name = lua_key(delimiter),      .lua = lua_key_index(delimiter),       .visible = 1 };
./tex/texnodes.c    724:     lmt_interface.node_data[glyph_node]          = (node_info) { .id = glyph_node,          .size = glyph_node_size,          .first = 0, .last = last_glyph_subtype,         .subtypes = subtypes_glyph,    .fields = lmt_node_fields_glyph,          .name = lua_key(glyph),          .lua = lua_key_index(glyph),           .visible = 1 };
./tex/texnodes.c    730:     lmt_interface.node_data[unset_node]          = (node_info) { .id = unset_node,          .size = box_node_size,            .first = 0, .last = 0,                          .subtypes = NULL,              .fields = lmt_node_fields_unset,          .name = lua_key(unset),          .lua = lua_key_index(unset),           .visible = 1 };
./tex/texnodes.c    731:     lmt_interface.node_data[specification_node]  = (node_info) { .id = specification_node,  .size = specification_node_size,  .first = 0, .last = 0,                          .subtypes = NULL,              .fields = NULL,                           .name = lua_key(specification),  .lua = lua_key_index(specification),   .visible = 0 };
./tex/texnodes.c    732:     lmt_interface.node_data[align_record_node]   = (node_info) { .id = align_record_node,   .size = box_node_size,            .first = 0, .last = 0,                          .subtypes = NULL,              .fields = lmt_node_fields_unset,          .name = lua_key(alignrecord),    .lua = lua_key_index(alignrecord),     .visible = 1 };
./tex/texnodes.c    739:     lmt_interface.node_data[attribute_node]      = (node_info) { .id = attribute_node,      .size = attribute_node_size,      .first = 0, .last = last_attribute_subtype,     .subtypes = subtypes_attribute,.fields = lmt_node_fields_attribute,      .name = lua_key(attribute),      .lua = lua_key_index(attribute),       .visible = 1 };
./tex/texnodes.c    746:     lmt_interface.node_data[glue_spec_node]      = (node_info) { .id = glue_spec_node,      .size = glue_spec_size,           .first = 0, .last = 0,                          .subtypes = NULL,              .fields = lmt_node_fields_glue_spec,      .name = lua_key(gluespec),       .lua = lua_key_index(gluespec),        .visible = 1 };
./tex/texnodes.c    753:     lmt_interface.node_data[temp_node]           = (node_info) { .id = temp_node,           .size = temp_node_size,           .first = 0, .last = 0,                          .subtypes = NULL,              .fields = NULL,                           .name = lua_key(temp),           .lua = lua_key_index(temp),            .visible = 1 };
./tex/texnodes.c    759:     lmt_interface.node_data[split_node]          = (node_info) { .id = split_node,          .size = split_node_size,          .first = 0, .last = last_split_subtype,         .subtypes = subtypes_split,    .fields = lmt_node_fields_split,          .name = lua_key(split),          .lua = lua_key_index(split),           .visible = 1 };
./tex/texnodes.c    767:     lmt_interface.node_data[expression_node]     = (node_info) { .id = expression_node,     .size = expression_node_size,     .first = 0, .last = 0,                         .subtypes = NULL,              .fields = NULL,                           .name = lua_key(expression),     .lua = lua_key_index(expression),      .visible = 0 };
./tex/texnodes.c    768:     lmt_interface.node_data[loop_state_node]     = (node_info) { .id = loop_state_node,     .size = loop_state_node_size,     .first = 0, .last = 0,                         .subtypes = NULL,              .fields = NULL,                           .name = lua_key(loopstate),      .lua = lua_key_index(loopstate),       .visible = 0 };
./tex/texnodes.c    769:     lmt_interface.node_data[math_spec_node]      = (node_info) { .id = math_spec_node,      .size = math_spec_node_size,      .first = 0, .last = 0,                         .subtypes = NULL,              .fields = NULL,                           .name = lua_key(mathspec),       .lua = lua_key_index(mathspec),        .visible = 0 };
./tex/texnodes.c    770:     lmt_interface.node_data[font_spec_node]      = (node_info) { .id = font_spec_node,      .size = font_spec_node_size,      .first = 0, .last = 0,                         .subtypes = NULL,              .fields = NULL,                           .name = lua_key(fontspec),       .lua = lua_key_index(fontspec),        .visible = 0 };
./tex/texnodes.c    771:     lmt_interface.node_data[nesting_node]        = (node_info) { .id = nesting_node,        .size = nesting_node_size,        .first = 0, .last = 0,                         .subtypes = NULL,              .fields = NULL,                           .name = lua_key(nestedlist),     .lua = lua_key_index(nestedlist),      .visible = 0 };
./tex/texnodes.c    772:     lmt_interface.node_data[span_node]           = (node_info) { .id = span_node,           .size = span_node_size,           .first = 0, .last = 0,                         .subtypes = NULL,              .fields = NULL,                           .name = lua_key(span),           .lua = lua_key_index(span),            .visible = 0 };
./tex/texnodes.c    773:     lmt_interface.node_data[align_stack_node]    = (node_info) { .id = align_stack_node,    .size = align_stack_node_size,    .first = 0, .last = 0,                         .subtypes = NULL,              .fields = NULL,                           .name = lua_key(alignstack),     .lua = lua_key_index(alignstack),      .visible = 0 };
./tex/texnodes.c    774:  // lmt_interface.node_data[noad_state_node]     = (node_info) { .id = noad_state_node,     .size = noad_state_node_size,     .first = 0, .last = 0,                         .subtypes = NULL,              .fields = NULL,                           .name = lua_key(noadstate),      .lua = lua_key_index(noadstate),       .visible = 0 };
./tex/texnodes.c    775:     lmt_interface.node_data[if_node]             = (node_info) { .id = if_node,             .size = if_node_size,             .first = 0, .last = 0,                         .subtypes = NULL,              .fields = NULL,                           .name = lua_key(ifstack),        .lua = lua_key_index(ifstack),         .visible = 0 };
./tex/texnodes.c    776:     lmt_interface.node_data[unhyphenated_node]   = (node_info) { .id = unhyphenated_node,   .size = active_node_size,         .first = 0, .last = 0,                         .subtypes = NULL,              .fields = NULL,                           .name = lua_key(unhyphenated),   .lua = lua_key_index(unhyphenated),    .visible = 0 };
./tex/texnodes.c    777:     lmt_interface.node_data[hyphenated_node]     = (node_info) { .id = hyphenated_node,     .size = active_node_size,         .first = 0, .last = 0,                         .subtypes = NULL,              .fields = NULL,                           .name = lua_key(hyphenated),     .lua = lua_key_index(hyphenated),      .visible = 0 };
./tex/texnodes.c    778:     lmt_interface.node_data[delta_node]          = (node_info) { .id = delta_node,          .size = delta_node_size,          .first = 0, .last = 0,                         .subtypes = NULL,              .fields = NULL,                           .name = lua_key(delta),          .lua = lua_key_index(delta),           .visible = 0 };
./tex/texnodes.c    779:     lmt_interface.node_data[passive_node]        = (node_info) { .id = passive_node,        .size = passive_node_size,        .first = 0, .last = 0,                         .subtypes = NULL,              .fields = NULL,                           .name = lua_key(passive),        .lua = lua_key_index(passive),         .visible = 0 };
./tex/texnodes.c    780:     lmt_interface.node_data[passive_node + 1]    = (node_info) { .id = -1,                  .size = -1,                       .first = 0, .last = 0,                         .subtypes = NULL,              .fields = NULL,                           .name = NULL,                    .lua = 0,                              .visible = 0 };
./tex/texnodes.c    921:         tex_formatted_error("nodes", "node range test failed in %s node", lmt_interface.node_data[node_type(a)].name);
./tex/texnodes.c   1269:                     par_inter_line_penalties(copy) = null;
./tex/texnodes.c   1285:                     tex_set_par_par(copy, par_inter_line_penalties_code, tex_get_par_par(original, par_inter_line_penalties_code), 1);
./tex/texnodes.c   1377:                     tex_flush_node(par_inter_line_penalties(p));
./tex/texnodes.c   1572:             tex_aux_node_range_test(p, par_inter_line_penalties(p));
./tex/texnodes.c   1731:     dump_int(f, lmt_node_memory_state.nodes_data.allocated);
./tex/texnodes.c   1732:     dump_int(f, lmt_node_memory_state.nodes_data.top);
./tex/texnodes.c   1736:     dump_int(f, lmt_node_memory_state.nodes_data.ptr);
./tex/texnodes.c   1737:     dump_int(f, lmt_node_memory_state.reserved);
./tex/texnodes.c   1748:     undump_int(f, lmt_node_memory_state.nodes_data.allocated);
./tex/texnodes.c   1749:     undump_int(f, lmt_node_memory_state.nodes_data.top);
./tex/texnodes.c   1754:     undump_int(f, lmt_node_memory_state.nodes_data.ptr);
./tex/texnodes.c   1755:     undump_int(f, lmt_node_memory_state.reserved);
./tex/texnodes.c   2285:                 tex_print_char(lmt_interface.node_data[node_type(p)].name[0]);
./tex/texnodes.c   2362:                     tex_print_int(k);
./tex/texnodes.c   2369:                     tex_print_int(v);
./tex/texnodes.c   2431:             tex_print_int(s);
./tex/texnodes.c   2456:     tex_print_name(p, lmt_interface.node_data[type].name);
./tex/texnodes.c   2462:     tex_print_subtype_and_attributes_info(p, subtype, &lmt_interface.node_data[type]);
./tex/texnodes.c   2465: static void tex_aux_print_subtype_and_attributes_int(halfword p, halfword n)
./tex/texnodes.c   2478:         node_info *data = &lmt_interface.node_data[node_type(n)];
./tex/texnodes.c   2822:                             if (tex_par_state_is_set(p, par_inter_line_penalties_code)    ) { v = par_inter_line_penalties(p)    ; if (v)                     { tex_print_str(", interlinepenalties * ");    } }
./tex/texnodes.c   2828:                             if (tex_par_state_is_set(p, par_hang_after_code)              ) { v = par_hang_after(p)              ; if (v)                     { tex_print_str(", hangafter ");               tex_print_int      (v);          } }
./tex/texnodes.c   2832:                             if (tex_par_state_is_set(p, par_last_line_fit_code)           ) { v = par_last_line_fit(p)           ; if (v)                     { tex_print_str(", lastlinefit ");             tex_print_int      (v);          } }
./tex/texnodes.c   2833:                             if (tex_par_state_is_set(p, par_pre_tolerance_code)           ) { v = par_pre_tolerance(p)           ; if (v)                     { tex_print_str(", pretolerance ");            tex_print_int      (v);          } }
./tex/texnodes.c   2834:                             if (tex_par_state_is_set(p, par_tolerance_code)               ) { v = par_tolerance(p)               ; if (v)                     { tex_print_str(", tolerance ");               tex_print_int      (v);          } }
./tex/texnodes.c   2835:                             if (tex_par_state_is_set(p, par_looseness_code)               ) { v = par_looseness(p)               ; if (v)                     { tex_print_str(", looseness ");               tex_print_int      (v);          } }
./tex/texnodes.c   2836:                             if (tex_par_state_is_set(p, par_adjust_spacing_code)          ) { v = par_adjust_spacing(p)          ; if (v)                     { tex_print_str(", adjustspacing ");           tex_print_int      (v);          } }
./tex/texnodes.c   2837:                             if (tex_par_state_is_set(p, par_adj_demerits_code)            ) { v = par_adj_demerits(p)            ; if (v)                     { tex_print_str(", adjdemerits ");             tex_print_int      (v);          } }
./tex/texnodes.c   2838:                             if (tex_par_state_is_set(p, par_double_adj_demerits_code)     ) { v = par_double_adj_demerits(p)     ; if (v)                     { tex_print_str(", doubleadjdemerits ");       tex_print_int      (v);          } }
./tex/texnodes.c   2839:                             if (tex_par_state_is_set(p, par_protrude_chars_code)          ) { v = par_protrude_chars(p)          ; if (v)                     { tex_print_str(", protrudechars ");           tex_print_int      (v);          } }
./tex/texnodes.c   2840:                             if (tex_par_state_is_set(p, par_line_penalty_code)            ) { v = par_line_penalty(p)            ; if (v)                     { tex_print_str(", linepenalty ");             tex_print_int      (v);          } }
./tex/texnodes.c   2841:                             if (tex_par_state_is_set(p, par_double_hyphen_demerits_code)  ) { v = par_double_hyphen_demerits(p)  ; if (v)                     { tex_print_str(", doublehyphendemerits ");    tex_print_int      (v);          } }
./tex/texnodes.c   2842:                             if (tex_par_state_is_set(p, par_final_hyphen_demerits_code)   ) { v = par_final_hyphen_demerits(p)   ; if (v)                     { tex_print_str(", finalhyphendemerits ");     tex_print_int      (v);          } }
./tex/texnodes.c   2843:                             if (tex_par_state_is_set(p, par_inter_line_penalty_code)      ) { v = par_inter_line_penalty(p)      ; if (v)                     { tex_print_str(", interlinepenalty ");        tex_print_int      (v);          } }
./tex/texnodes.c   2844:                             if (tex_par_state_is_set(p, par_club_penalty_code)            ) { v = par_club_penalty(p)            ; if (v)                     { tex_print_str(", clubpenalty ");             tex_print_int      (v);          } }
./tex/texnodes.c   2845:                             if (tex_par_state_is_set(p, par_widow_penalty_code)           ) { v = par_widow_penalty(p)           ; if (v)                     { tex_print_str(", widowpenalty ");            tex_print_int      (v);          } }
./tex/texnodes.c   2846:                             if (tex_par_state_is_set(p, par_display_widow_penalty_code)   ) { v = par_display_widow_penalty(p)   ; if (v)                     { tex_print_str(", displaywidowpenalty ");     tex_print_int      (v);          } }
./tex/texnodes.c   2847:                             if (tex_par_state_is_set(p, par_orphan_penalty_code)          ) { v = par_orphan_penalty(p)          ; if (v)                     { tex_print_str(", orphanpenalty ");           tex_print_int      (v);          } }
./tex/texnodes.c   2848:                             if (tex_par_state_is_set(p, par_single_line_penalty_code)     ) { v = par_single_line_penalty(p)     ; if (v)                     { tex_print_str(", singlelinepenalty ");       tex_print_int      (v);          } }                                      
./tex/texnodes.c   2849:                             if (tex_par_state_is_set(p, par_broken_penalty_code)          ) { v = par_broken_penalty(p)          ; if (v)                     { tex_print_str(", brokenpenalty ");           tex_print_int      (v);          } }
./tex/texnodes.c   2861:                             if (tex_par_state_is_set(p, par_adjust_spacing_step_code)     ) { v = par_adjust_spacing_step(p)     ; if (v > 0)                 { tex_print_str(", adjustspacingstep ");       tex_print_int      (v);          } }
./tex/texnodes.c   2862:                             if (tex_par_state_is_set(p, par_adjust_spacing_shrink_code)   ) { v = par_adjust_spacing_shrink(p)   ; if (v > 0)                 { tex_print_str(", adjustspacingshrink ");     tex_print_int      (v);          } }
./tex/texnodes.c   2863:                             if (tex_par_state_is_set(p, par_adjust_spacing_stretch_code)  ) { v = par_adjust_spacing_stretch(p)  ; if (v > 0)                 { tex_print_str(", adjustspacingstretch ");    tex_print_int      (v);          } }
./tex/texnodes.c   2864:                             if (tex_par_state_is_set(p, par_hyphenation_mode_code)        ) { v = par_hyphenation_mode(p)        ; if (v > 0)                 { tex_print_str(", hyphenationmode ");         tex_print_int      (v);          } }
./tex/texnodes.c   2865:                             if (tex_par_state_is_set(p, par_shaping_penalties_mode_code)  ) { v = par_shaping_penalties_mode(p)  ; if (v > 0)                 { tex_print_str(", shapingpenaltiesmode ");    tex_print_int      (v);          } }
./tex/texnodes.c   2866:                             if (tex_par_state_is_set(p, par_shaping_penalty_code)         ) { v = par_shaping_penalty(p)         ; if (v > 0)                 { tex_print_str(", shapingpenalty ");          tex_print_int      (v);          } }
./tex/texnodes.c   2896:                                 tex_aux_print_subtype_and_attributes_int(p, node_subtype(p));
./tex/texnodes.c   2899:                             tex_aux_print_subtype_and_attributes_int(p, node_subtype(p));
./tex/texnodes.c   3833:         tex_set_local_interline_penalty(p, local_interline_penalty_par);
./tex/texnodes.c   3862: static halfword tex_aux_internal_to_par_code(halfword cmd, halfword index) {
./tex/texnodes.c   3864:         case internal_int_cmd:
./tex/texnodes.c   3874:                 case inter_line_penalty_code     : return par_inter_line_penalty_code;
./tex/texnodes.c   3916:                 case inter_line_penalties_code   : return par_inter_line_penalties_code;
./tex/texnodes.c   3930:     halfword code = tex_aux_internal_to_par_code(cmd, index);
./tex/texnodes.c   3944:         case par_inter_line_penalties_code:    return set ? par_inter_line_penalties(p)    : inter_line_penalties_par;
./tex/texnodes.c   3965:         case par_inter_line_penalty_code:      return set ? par_inter_line_penalty(p)      : inter_line_penalty_par;
./tex/texnodes.c   4086:             case par_inter_line_penalty_code:
./tex/texnodes.c   4087:                 par_inter_line_penalty(p) = v;
./tex/texnodes.c   4122:             case par_inter_line_penalties_code:
./tex/texnodes.c   4123:                 if (par_inter_line_penalties(p)) {
./tex/texnodes.c   4124:                     tex_flush_node(par_inter_line_penalties(p));
./tex/texnodes.c   4126:                 par_inter_line_penalties(p) = v ? tex_copy_node(v) : null;
./tex/texnodes.c   4239:             if (tex_par_to_be_set(what, par_inter_line_penalty_code))      { tex_set_par_par(p, par_inter_line_penalty_code,      unset ? null : inter_line_penalty_par,      1); }
./tex/texnodes.c   4250:             if (tex_par_to_be_set(what, par_inter_line_penalties_code))    { tex_set_par_par(p, par_inter_line_penalties_code,    unset ? null : inter_line_penalties_par,    1); }
./tex/texnodes.c   4384:         if (tex_par_to_be_set(what, par_inter_line_penalty_code)) { 
./tex/texnodes.c   4385:             par_inter_line_penalty(p) = unset ? null : inter_line_penalty_par; 
./tex/texnodes.c   4424:         if (tex_par_to_be_set(what, par_inter_line_penalties_code)) { 
./tex/texnodes.c   4426:             if (par_inter_line_penalties(p)) {
./tex/texnodes.c   4427:                 tex_flush_node(par_inter_line_penalties(p));
./tex/texnodes.c   4429:             par_inter_line_penalties(p) = v ? tex_copy_node(v) : null;
./tex/texpackaging.c     98:                             target = tex_scan_int(1, NULL);
./tex/texpackaging.c    122:                             halfword v = tex_scan_int(1, NULL);
./tex/texpackaging.c    174:                             source = tex_scan_int(1, NULL);
./tex/texpackaging.c    283:                                 retain = tex_scan_int(0, NULL);
./tex/texpackaging.c    739: # define fix_int(val,min,max) (val < min ? min : (val > max ? max : val))
./tex/texpackaging.c   1154:     halfword pack_interrupt[8];
./tex/texpackaging.c   1387:                     pack_interrupt[disc_level] = node_next(p);
./tex/texpackaging.c   1479:                 p = pack_interrupt[disc_level];
./tex/texpackaging.c   1668:         lmt_packaging_state.font_expansion_ratio = fix_int(lmt_packaging_state.font_expansion_ratio, -scaling_factor, scaling_factor);
./tex/texpackaging.c   2833:                 halfword index = tex_scan_int(0, NULL);
./tex/texpackaging.c   3411:                                 halfword v = tex_scan_int(1, NULL);
./tex/texpackaging.c   3449:                 halfword index = tex_scan_int(0, NULL);
./tex/texpackaging.c   3561:                 update_tex_internal_dir_state(0);
./tex/texprimitive.c    282:         dump_int(f, lmt_primitive_state.prim_data[p].offset);
./tex/texprimitive.c    283:         dump_int(f, lmt_primitive_state.prim_data[p].subids);
./tex/texprimitive.c    285:             dump_int(f, lmt_primitive_state.prim_data[p].names[q]);
./tex/texprimitive.c    295:         undump_int(f, lmt_primitive_state.prim_data[p].offset);
./tex/texprimitive.c    296:         undump_int(f, lmt_primitive_state.prim_data[p].subids);
./tex/texprimitive.c    303:                     undump_int(f, names[q]);
./tex/texprimitive.c    323:     dump_int(f, lmt_hash_state.eqtb_data.top);
./tex/texprimitive.c    328:             dump_int(f, p);
./tex/texprimitive.c    329:             dump_int(f, lmt_hash_state.hash[p]);
./tex/texprimitive.c    338:     dump_int(f, lmt_hash_state.eqtb_data.ptr);
./tex/texprimitive.c    343:     undump_int(f, lmt_hash_state.eqtb_data.top);
./tex/texprimitive.c    348:             undump_int(f, q);
./tex/texprimitive.c    350:                 undump_int(f, lmt_hash_state.hash[q]);
./tex/texprimitive.c    361:         undump_int(f, lmt_hash_state.eqtb_data.ptr);
./tex/texprimitive.c    695:         } else if (cmd == internal_int_cmd && idx < number_int_pars) {
./tex/texprimitive.c    839:             tex_print_int(register_toks_number(chr));
./tex/texprimitive.c    841:         case internal_int_cmd:
./tex/texprimitive.c    844:         case register_int_cmd:
./tex/texprimitive.c    846:             tex_print_int(register_int_number(chr));
./tex/texprimitive.c    853:             tex_print_int(register_attribute_number(chr));
./tex/texprimitive.c    857:             tex_print_int(register_posit_number(chr));
./tex/texprimitive.c    867:             tex_print_int(register_dimension_number(chr));
./tex/texprimitive.c    874:             tex_print_int(register_glue_number(chr));
./tex/texprimitive.c    881:             tex_print_int(register_mu_glue_number(chr));
./tex/texprimitive.c    889:             tex_print_int(chr);
./tex/texprimitive.c    893:             tex_print_int(chr);
./tex/texprinting.c    466: void tex_print_int(int n)
./tex/texprinting.c    498:     Conversely, here is a procedure analogous to |print_int|. If the output of this procedure is
./tex/texprinting.c    527:         tex_print_int(s / unity);
./tex/texprinting.c    565:         tex_print_int(s / unity);
./tex/texprinting.c    679:     Roman numerals are produced by the |print_roman_int| routine. Readers who like puzzles might
./tex/texprinting.c    685: void tex_print_roman_int(int n)
./tex/texprinting.c    863:     tex_print_int(font_spec_identifier(p));
./tex/texprinting.c    866:         tex_print_int(font_spec_scale(p));
./tex/texprinting.c    870:         tex_print_int(font_spec_x_scale(p));
./tex/texprinting.c    874:         tex_print_int(font_spec_y_scale(p));
./tex/texprinting.c   1138:             tex_print_int(cur_level);
./tex/texprinting.c   1142:             tex_print_int(lmt_input_state.input_stack_data.ptr);
./tex/texprinting.c   1146:             tex_print_int(cat_code_table_par);
./tex/texprinting.c   1207:                             tex_print_int(va_arg(args, int));
./tex/texprinting.c   1240:                                     tex_print_int(b);
./tex/texprinting.c   1279:                                     tex_print_int(line);
./tex/texprinting.c   1287:                                     tex_print_str(lmt_interface.node_data[node_type(node)].name);
./tex/texprinting.c   1428:     tex_print_str(lmt_interface.group_code_values[cur_group].name);
./tex/texprinting.c   1433:             tex_print_int(line);
./tex/texrules.c     44:                     halfword v = tex_scan_int(1, NULL);
./tex/texscanning.c    100:     The next routine |scan_something_internal| is used to fetch internal numeric quantities like
./tex/texscanning.c    102:     |\the\baselineskip|. Soon we will be considering the |scan_int| procedure, which calls
./tex/texscanning.c    103:     |scan_something_internal|; on the other hand, |scan_something_internal| also calls |scan_int|,
./tex/texscanning.c    104:     for constructions like |\catcode\`\$| or |\fontdimen 3 \ff|. So we have to declare |scan_int|
./tex/texscanning.c    107:     \TEX\ doesn't know exactly what to expect when |scan_something_internal| begins. For example,
./tex/texscanning.c    111:     possibilities, |scan_something_internal| has a |level| parameter, which tells the \quote
./tex/texscanning.c    112:     {highest} kind of quantity that |scan_something_internal| is allowed to produce. Seven levels
./tex/texscanning.c    116:     The output of |scan_something_internal| (and of the other routines |scan_int|, |scan_dimension|,
./tex/texscanning.c    122:     count of a token list. The last two cases are allowed only when |scan_something_internal| is
./tex/texscanning.c    168:                     cur_val = tex_integer_to_posit(cur_val).v;
./tex/texscanning.c    186:                 cur_val = tex_integer_to_posit(cur_val).v;
./tex/texscanning.c    197:                 cur_val = tex_integer_to_posit(cur_val).v;
./tex/texscanning.c    270:         case lua_value_integer_code:
./tex/texscanning.c    338:         case register_int_cmd       : return cur_chr - register_int_base; 
./tex/texscanning.c    743:         case scaled_interword_space_code:
./tex/texscanning.c    744:         case scaled_interword_stretch_code:
./tex/texscanning.c    745:         case scaled_interword_shrink_code:
./tex/texscanning.c    775:                 halfword v = scan_int(0, NULL);
./tex/texscanning.c    786:                 cur_val = tex_get_insert_progress(tex_scan_int(0, NULL));
./tex/texscanning.c    793:                 halfword v = tex_scan_int(0, NULL);
./tex/texscanning.c    813:                 halfword v = tex_scan_int(0, NULL);
./tex/texscanning.c    887:                 scaled i = tex_scan_int(0, NULL);
./tex/texscanning.c    901:         case last_chk_integer_code:
./tex/texscanning.c    903:             cur_val = lmt_condition_state.chk_integer;
./tex/texscanning.c   1030:                 halfword v = tex_scan_int(0, NULL); /* hm */
./tex/texscanning.c   1137:             cur_val = tex_get_insert_distance(tex_scan_int(0, NULL));
./tex/texscanning.c   1141:             cur_val = tex_get_insert_multiplier(tex_scan_int(0, NULL));
./tex/texscanning.c   1145:             cur_val = tex_get_insert_limit(tex_scan_int(0, NULL));
./tex/texscanning.c   1149:             cur_val = tex_get_insert_storage(tex_scan_int(0, NULL));
./tex/texscanning.c   1153:             cur_val = tex_get_insert_penalty(tex_scan_int(0, NULL));
./tex/texscanning.c   1157:             cur_val = tex_get_insert_maxdepth(tex_scan_int(0, NULL));
./tex/texscanning.c   1161:             cur_val = tex_get_insert_height(tex_scan_int(0, NULL));
./tex/texscanning.c   1165:             cur_val = tex_get_insert_depth(tex_scan_int(0, NULL));
./tex/texscanning.c   1169:             cur_val = tex_get_insert_width(tex_scan_int(0, NULL));
./tex/texscanning.c   1221:     |short_scan_something_internal| that is shared between this routine and |scan_something_internal|.
./tex/texscanning.c   1222:     In the end it was much cleaner to integrate |tex_aux_short_scan_something_internal| into the two
./tex/texscanning.c   1250:         /* begin of tex_aux_short_scan_something_internal */
./tex/texscanning.c   1283:         case internal_int_cmd:
./tex/texscanning.c   1284:         case register_int_cmd:
./tex/texscanning.c   1339:         /* end of tex_aux_short_scan_something_internal */
./tex/texscanning.c   1357:     OK, we're ready for |scan_something_internal| itself. A second parameter, |negative|, is set
./tex/texscanning.c   1360:     |cur_cmd < min_internal| or |cur_cmd > max_internal|.
./tex/texscanning.c   1384: //             lmt_error_state.last_intercept = 1 ;
./tex/texscanning.c   1413:             *target = tex_get_hj_code(language_par, tex_scan_int(0, NULL));
./tex/texscanning.c   1421: static halfword tex_aux_scan_something_internal(halfword cmd, halfword chr, int level, int negative, halfword property)
./tex/texscanning.c   1426:         /* begin of tex_aux_short_scan_something_internal */
./tex/texscanning.c   1451:         case internal_int_cmd:
./tex/texscanning.c   1452:         case register_int_cmd:
./tex/texscanning.c   1458:                 cur_val = (halfword) tex_posit_to_integer(cur_val);
./tex/texscanning.c   1509:         /* end of tex_aux_short_scan_something_internal */
./tex/texscanning.c   1620:                                 case math_int_parameter:
./tex/texscanning.c   1836:                             halfword n = tex_scan_int_register_number();
./tex/texscanning.c   1992:     It is nice to have routines that say what they do, so the original |scan_eight_bit_int| is
./tex/texscanning.c   2001: inline static halfword tex_aux_scan_limited_int(int optional_equal, int min, int max, const char *invalid)
./tex/texscanning.c   2003:     halfword v = tex_scan_int(optional_equal, NULL);
./tex/texscanning.c   2017: halfword   tex_scan_int_register_number       (void)               { return tex_aux_scan_limited_int(0, 0, max_int_register_index, "Integer register index"); }
./tex/texscanning.c   2018: halfword   tex_scan_dimension_register_number (void)               { return tex_aux_scan_limited_int(0, 0, max_dimension_register_index, "Dimension register index"); }
./tex/texscanning.c   2019: halfword   tex_scan_attribute_register_number (void)               { return tex_aux_scan_limited_int(0, 0, max_attribute_register_index, "Attribute register index"); }
./tex/texscanning.c   2020: halfword   tex_scan_posit_register_number     (void)               { return tex_aux_scan_limited_int(0, 0, max_posit_register_index, "Posit register index"); }
./tex/texscanning.c   2021: halfword   tex_scan_glue_register_number      (void)               { return tex_aux_scan_limited_int(0, 0, max_glue_register_index, "Glue register index"); }
./tex/texscanning.c   2022: halfword   tex_scan_mu_glue_register_number   (void)               { return tex_aux_scan_limited_int(0, 0, max_mu_glue_register_index, "Mu glue register index"); }
./tex/texscanning.c   2023: halfword   tex_scan_toks_register_number      (void)               { return tex_aux_scan_limited_int(0, 0, max_toks_register_index, "Toks register index"); }
./tex/texscanning.c   2024: halfword   tex_scan_box_register_number       (void)               { return tex_aux_scan_limited_int(0, 0, max_box_register_index, "Box register index"); }
./tex/texscanning.c   2025: halfword   tex_scan_unit_register_number      (int optional_equal) { return tex_aux_scan_limited_int(optional_equal, 0, max_unit_register_index, "Unit register index"); }
./tex/texscanning.c   2026: halfword   tex_scan_mark_number               (void)               { return tex_aux_scan_limited_int(0, 0, max_mark_index, "Marks index"); }
./tex/texscanning.c   2027: halfword   tex_scan_char_number               (int optional_equal) { return tex_aux_scan_limited_int(optional_equal, 0, max_character_code, "Character code"); }
./tex/texscanning.c   2028: halfword   tex_scan_math_char_number          (void)               { return tex_aux_scan_limited_int(0, 0, max_math_character_code, "Character code"); }
./tex/texscanning.c   2029: halfword   tex_scan_math_family_number        (void)               { return tex_aux_scan_limited_int(0, 0, max_math_family_index, "Math family"); }
./tex/texscanning.c   2030: halfword   tex_scan_math_properties_number    (void)               { return tex_aux_scan_limited_int(0, 0, max_math_property, "Math properties"); }
./tex/texscanning.c   2031: halfword   tex_scan_math_group_number         (void)               { return tex_aux_scan_limited_int(0, 0, max_math_group, "Math group"); }
./tex/texscanning.c   2032: halfword   tex_scan_math_index_number         (void)               { return tex_aux_scan_limited_int(0, 0, max_math_index, "Math index"); }
./tex/texscanning.c   2033: halfword   tex_scan_math_discretionary_number (int optional_equal) { return tex_aux_scan_limited_int(optional_equal, 0, max_math_discretionary, "Math discretionary"); }
./tex/texscanning.c   2034: singleword tex_scan_box_index                 (void)               { return (singleword) tex_aux_scan_limited_int(0, 0, max_box_index, "Box index"); }
./tex/texscanning.c   2035: singleword tex_scan_box_axis                  (void)               { return (singleword) tex_aux_scan_limited_int(0, 0, max_box_axis, "Box axis"); }
./tex/texscanning.c   2036: halfword   tex_scan_category_code             (int optional_equal) { return tex_aux_scan_limited_int(optional_equal, 0, max_category_code,"Category code"); }
./tex/texscanning.c   2037: halfword   tex_scan_space_factor              (int optional_equal) { return tex_aux_scan_limited_int(optional_equal, 0, max_space_factor, "Space factor"); }
./tex/texscanning.c   2038: halfword   tex_scan_function_reference        (int optional_equal) { return tex_aux_scan_limited_int(optional_equal, 0, max_function_reference, "Function reference"); }
./tex/texscanning.c   2039: halfword   tex_scan_bytecode_reference        (int optional_equal) { return tex_aux_scan_limited_int(optional_equal, 0, max_bytecode_index, "Bytecode reference"); }
./tex/texscanning.c   2040: halfword   tex_scan_limited_scale             (int optional_equal) { return tex_aux_scan_limited_int(optional_equal, -max_limited_scale, max_limited_scale, "Limited scale"); }
./tex/texscanning.c   2041: halfword   tex_scan_positive_scale            (int optional_equal) { return tex_aux_scan_limited_int(optional_equal, min_limited_scale, max_limited_scale, "Limited scale"); }
./tex/texscanning.c   2042: halfword   tex_scan_positive_number           (int optional_equal) { return tex_aux_scan_limited_int(optional_equal, 0, max_integer, "Positive number"); }
./tex/texscanning.c   2043: halfword   tex_scan_parameter_index           (void)               { return tex_aux_scan_limited_int(0, 0, 15, "Parameter index"); }
./tex/texscanning.c   2047:     halfword v = tex_aux_scan_limited_int(optional_equal, -1, max_math_class_code + 1, "Math class"); 
./tex/texscanning.c   2065:     The |scan_int| routine is used also to scan the integer part of a fraction; for example, the
./tex/texscanning.c   2066:     |3| in |3.14159| will be found by |scan_int|. The |scan_dimension| routine assumes that |cur_tok
./tex/texscanning.c   2067:     = point_token| after the integer part of such a fraction has been scanned by |scan_int|, and
./tex/texscanning.c   2107: static void tex_aux_scan_int_no_number() 
./tex/texscanning.c   2111:         lmt_error_state.last_intercept = 1 ;
./tex/texscanning.c   2120: halfword tex_scan_int(int optional_equal, int *radix)
./tex/texscanning.c   2173:                 lmt_error_state.last_intercept = 1;
./tex/texscanning.c   2186:     } else if (cur_cmd >= min_internal_cmd && cur_cmd <= max_internal_cmd) {
./tex/texscanning.c   2187:         result = tex_aux_scan_something_internal(cur_cmd, cur_chr, int_val_level, 0, 0);
./tex/texscanning.c   2189:             tex_aux_scan_int_no_number();
./tex/texscanning.c   2195:         /* A pity that we need to check this way in |scan_int|. */
./tex/texscanning.c   2199:             tex_aux_scan_int_no_number();
./tex/texscanning.c   2208:                 tex_aux_scan_int_no_number();
./tex/texscanning.c   2235:                             if (result > max_integer) {
./tex/texscanning.c   2236:                                 result = max_integer;
./tex/texscanning.c   2269:                             if (result > max_integer) {
./tex/texscanning.c   2270:                                 result = max_integer;
./tex/texscanning.c   2298:                             if (result > max_integer) {
./tex/texscanning.c   2299:                                 result = max_integer;
./tex/texscanning.c   2316:             tex_aux_scan_int_no_number();
./tex/texscanning.c   2326: void tex_scan_int_validate(void)
./tex/texscanning.c   2359:                 lmt_error_state.last_intercept = 1;
./tex/texscanning.c   2370:     } else if (cur_cmd >= min_internal_cmd && cur_cmd <= max_internal_cmd) {
./tex/texscanning.c   2371:         tex_aux_scan_something_internal(cur_cmd, cur_chr, int_val_level, 0, 0);
./tex/texscanning.c   2373:             tex_aux_scan_int_no_number();
./tex/texscanning.c   2379:             tex_aux_scan_int_no_number();
./tex/texscanning.c   2413:             tex_aux_scan_int_no_number();
./tex/texscanning.c   2436:     if (cur_cmd >= min_internal_cmd && cur_cmd <= max_internal_cmd) {
./tex/texscanning.c   2437:         result = tex_aux_scan_something_internal(cur_cmd, cur_chr, int_val_level, 0, 0);
./tex/texscanning.c   2518:     The following code is executed when |scan_something_internal| was called asking for |mu_val|,
./tex/texscanning.c   2536:     The |scan_dimension| routine is similar to |scan_int|, but it sets |cur_val| to a |scaled| value,
./tex/texscanning.c   2548:     Constructions like |-'77 pt| are legal dimensions, so |scan_dimension| may begin with |scan_int|.
./tex/texscanning.c   2549:     This explains why it is convenient to use |scan_int| also for the integer part of a decimal
./tex/texscanning.c   2675: //     if (cur_cmd >= min_internal_cmd && cur_cmd <= max_internal_cmd) {
./tex/texscanning.c   2967:     if (cur_cmd >= min_internal_cmd && cur_cmd <= max_internal_cmd) {
./tex/texscanning.c   3125:         if (cur_cmd >= min_internal_cmd && cur_cmd <= max_internal_cmd) {
./tex/texscanning.c   3126:             cur_val = tex_aux_scan_something_internal(cur_cmd, cur_chr, mu ? mu_val_level : dimen_val_level, 0, 0); /* adapts cur_val_level */
./tex/texscanning.c   3147:                 cur_val = tex_scan_int(0, &cur_radix);
./tex/texscanning.c   3183:     if (! lmt_error_state.last_intercept) {
./tex/texscanning.c   3188:                     lmt_error_state.last_intercept = 1;
./tex/texscanning.c   3230:                         lmt_error_state.last_intercept = 1;
./tex/texscanning.c   3238:                 cur_val = tex_aux_scan_something_internal(cur_cmd, cur_chr, mu ? mu_val_level : dimen_val_level, 0, 0); /* adapts cur_val_level */
./tex/texscanning.c   3262:             lmt_error_state.last_intercept = 1;
./tex/texscanning.c   3290:     if (cur_cmd >= min_internal_cmd && cur_cmd <= max_internal_cmd) {
./tex/texscanning.c   3291:         tex_aux_scan_something_internal(cur_cmd, cur_chr, dimen_val_level, 0, 0);
./tex/texscanning.c   3300:             tex_scan_int(0, &cur_radix);
./tex/texscanning.c   3325:                 lmt_error_state.last_intercept = 1;
./tex/texscanning.c   3333:                 tex_aux_scan_something_internal(cur_cmd, cur_chr, dimen_val_level, 0, 0); 
./tex/texscanning.c   3347:     Since |scan_dimension| was so much more complex than |scan_int|, we might expect |scan_glue| to be
./tex/texscanning.c   3380:     if (cur_cmd >= min_internal_cmd && cur_cmd <= max_internal_cmd) {
./tex/texscanning.c   3381:         cur_val = tex_aux_scan_something_internal(cur_cmd, cur_chr, level, negative, 0);
./tex/texscanning.c   3519:     cur_val = tex_aux_scan_something_internal(cur_cmd, cur_chr, tok_val_level, 0, property);
./tex/texscanning.c   3526:                 tex_print_int(cur_val);
./tex/texscanning.c   3659:      /*     return tex_the_value_toks(code, tail, tex_scan_int(0, 0)); */
./tex/texscanning.c   3679:             tex_print_int(cur_val);
./tex/texscanning.c   3734:     *n = tex_scan_int(0, NULL);
./tex/texscanning.c   3736:     if (*n <= 0 || *n > max_integer) {
./tex/texscanning.c   3781:     halfword style = tex_scan_int(0, NULL);
./tex/texscanning.c   3854:         case register_int_cmd:
./tex/texscanning.c   3865:         case internal_int_cmd:
./tex/texscanning.c   3868:                 if (internal_int_number(cur_chr) == font_code) {
./tex/texscanning.c   3869:                     halfword fnt = tex_scan_int(0, NULL);
./tex/texscanning.c   4937:             factor = tex_scan_int(0, NULL);
./tex/texscanning.c   5012:             if ((factor > max_integer) || (factor < min_integer)) {
./tex/texscanning.c   5037:             if ((state > expression_subtract) && ((factor > max_integer) || (factor < min_integer))) {
./tex/texscanning.c   5071:                         term = tex_multiply_integers(term, factor);
./tex/texscanning.c   5115:                     term = tex_fract(term, numerator, factor, max_integer);
./tex/texscanning.c   5170:                     expression = tex_aux_add_or_sub(expression, term, max_integer, result);
./tex/texscanning.c   5503:     if (cur_cmd >= min_internal_cmd && cur_cmd <= max_internal_cmd) {
./tex/texscanning.c   5505:         value = tex_aux_scan_something_internal(cur_cmd, cur_chr, dimen_val_level, 0, 0);
./tex/texscanning.c   5655: static halfword tex_scan_bit_int(int *radix)
./tex/texscanning.c   5683:     } else if (cur_cmd >= min_internal_cmd && cur_cmd <= max_internal_cmd) {
./tex/texscanning.c   5684:         result = tex_aux_scan_something_internal(cur_cmd, cur_chr, int_val_level, 0, 0);
./tex/texscanning.c   5718:                             if (result > max_integer) {
./tex/texscanning.c   5719:                                 result = max_integer;
./tex/texscanning.c   5747:                             if (result > max_integer) {
./tex/texscanning.c   5748:                                 result = max_integer;
./tex/texscanning.c   5771:                             if (result > max_integer) {
./tex/texscanning.c   5772:                                 result = max_integer;
./tex/texscanning.c   5806:     if (cur_cmd >= min_internal_cmd && cur_cmd <= max_internal_cmd) {
./tex/texscanning.c   5807:         cur_val = tex_aux_scan_something_internal(cur_cmd, cur_chr, int_val_level, 0, 0);
./tex/texscanning.c   5818:             cur_val = tex_scan_bit_int(&cur_radix);
./tex/texscanning.c   5875:                 tex_print_int(scaledround((double) expression_entry(current) / factor));
./tex/texscanning.c   6239:                     operation = level == dimen_val_level ? tex_scan_bit_dimension(&has_fraction, &has_unit) : tex_scan_bit_int(NULL);
./tex/texscanning.c   6416:                         if (v < min_integer) {
./tex/texscanning.c   6417:                             v = min_integer;
./tex/texscanning.c   6418:                         } else if (v > max_integer) {
./tex/texscanning.c   6419:                             v = max_integer;
./tex/texscanning.c   6478:     if (cur_cmd >= min_internal_cmd && cur_cmd <= max_internal_cmd) {
./tex/texscanning.c   6479:         cur_val = tex_aux_scan_something_internal(cur_cmd, cur_chr, int_val_level, 0, 0);
./tex/texscanning.c   6487:             cur_val = tex_scan_int(0, &cur_radix);
./tex/texscanning.c   6552:     if (cur_cmd >= min_internal_cmd && cur_cmd <= max_internal_cmd) {
./tex/texscanning.c   6553:         cur_val = tex_aux_scan_something_internal(cur_cmd, cur_chr, posit_val_level, 0, 0);
./tex/texscanning.c   6718:         cur_val = tex_integer_to_posit(0).v;
./tex/texscanning.c   6732:     int i = tex_scan_int(optional_equal, NULL);
./tex/texscanning.c   6738:     int i = tex_scan_int(optional_equal, NULL);
./tex/texscanning.c   6744:     halfword i = tex_scan_int(optional_equal, NULL);
./tex/texscanning.c   6750:     halfword a = tex_scan_int(optional_equal, NULL);
./tex/texscanning.c   6758:     halfword l = tex_scan_int(optional_equal, NULL) & 0xFFFF;
./tex/texscanning.c   6759:     halfword r = tex_scan_int(0, NULL)              & 0xFFFF;
./tex/texscanning.c   6766:     halfword v = tex_scan_int(1, NULL);
./tex/texstringpool.c    511:     dump_via_int(f, lmt_string_pool_state.string_pool_data.allocated);
./tex/texstringpool.c    512:     dump_via_int(f, lmt_string_pool_state.string_pool_data.top); /* includes cs_offset_value */
./tex/texstringpool.c    513:     dump_via_int(f, lmt_string_pool_state.string_pool_data.ptr); /* includes cs_offset_value */
./tex/texstringpool.c    514:     dump_via_int(f, n_of_strings);
./tex/texstringpool.c    515:     dump_via_int(f, max_length);
./tex/texstringpool.c    516:     dump_via_int(f, total_length);
./tex/texstringpool.c    538:             dump_int(f, l);
./tex/texstringpool.c    551:     undump_int(f, lmt_string_pool_state.string_pool_data.allocated);
./tex/texstringpool.c    552:     undump_int(f, lmt_string_pool_state.string_pool_data.top); /* includes cs_offset_value */
./tex/texstringpool.c    553:     undump_int(f, lmt_string_pool_state.string_pool_data.ptr); /* includes cs_offset_value */
./tex/texstringpool.c    554:     undump_int(f, n_of_strings);
./tex/texstringpool.c    555:     undump_int(f, max_length);
./tex/texstringpool.c    556:     undump_int(f, total_length);
./tex/texstringpool.c    571:                 undump_int(f, x);
./tex/textextcodes.c    101:     dump_int(f, lmt_catcode_state.catcode_max);
./tex/textextcodes.c    102:     dump_int(f, total);
./tex/textextcodes.c    105:             dump_int(f, k);
./tex/textextcodes.c    117:     undump_int(f, lmt_catcode_state.catcode_max);
./tex/textextcodes.c    118:     undump_int(f, total);
./tex/textextcodes.c    121:         undump_int(f, x);
./tex/textextcodes.c    539:             dump_via_int(f, 1);
./tex/textextcodes.c    542:             dump_via_int(f, 0);
./tex/textextcodes.c    553:         undump_int(f, x);
./tex/textoken.c   1449:      /* check_interrupt(); */
./tex/textoken.c   2778:                 halfword v = tex_scan_int(0, NULL);
./tex/textoken.c   2780:                 tex_print_int(v);
./tex/textoken.c   2784:         case to_integer_code:
./tex/textoken.c   2788:                 halfword v = tex_scan_int(0, NULL);
./tex/textoken.c   2794:                 if (code == to_integer_code) {
./tex/textoken.c   2795:                     tex_print_int(v);
./tex/textoken.c   2837:                 tex_print_int(v);
./tex/textoken.c   2843:                 halfword v = tex_scan_int(0, NULL);
./tex/textoken.c   2859:                 halfword v = tex_scan_int(0, NULL);
./tex/textoken.c   3063:                 halfword v = tex_scan_int(0, NULL);
./tex/textoken.c   3065:                 tex_print_roman_int(v);
./tex/textoken.c   3200:         case to_integer_code:
./tex/textoken.c   3201:             tex_print_int(i);
./tex/textoken.c   3225:             tex_print_roman_int(i);
./tex/textoken.c   3606:         tex_assign_internal_dimension_value(flags, internal_dimension_location(j), v);
./tex/textoken.c   3618:         tex_assign_internal_skip_value(flags, internal_glue_location(j), v);
./tex/textoken.c   3638:         tex_assign_internal_int_value(flags, internal_int_location(j), v);
./tex/textoken.c   3640:         tex_word_define(flags, register_int_location(j), v);
./tex/textoken.c   3649:         tex_assign_internal_posit_value(flags, internal_posit_location(j), v);
./tex/textoken.c   3841:     dump_int(f, lmt_token_state.null_list); /* the only one left */
./tex/textoken.c   3842:     dump_int(f, lmt_token_memory_state.tokens_data.allocated);
./tex/textoken.c   3843:     dump_int(f, lmt_token_memory_state.tokens_data.top);
./tex/textoken.c   3844:     dump_int(f, lmt_token_memory_state.tokens_data.ptr);
./tex/textoken.c   3845:     dump_int(f, lmt_token_memory_state.available);
./tex/textoken.c   3851:     undump_int(f, lmt_token_state.null_list); /* the only one left */
./tex/textoken.c   3852:     undump_int(f, lmt_token_memory_state.tokens_data.allocated);
./tex/textoken.c   3853:     undump_int(f, lmt_token_memory_state.tokens_data.top);
./tex/textoken.c   3854:     undump_int(f, lmt_token_memory_state.tokens_data.ptr);
./tex/textoken.c   3855:     undump_int(f, lmt_token_memory_state.available);
./tex/textypes.c      9:     dump_via_int(f, max_n_of_toks_registers);
./tex/textypes.c     10:     dump_via_int(f, max_n_of_box_registers);
./tex/textypes.c     11:     dump_via_int(f, max_n_of_int_registers);
./tex/textypes.c     12:     dump_via_int(f, max_n_of_dimension_registers);
./tex/textypes.c     13:     dump_via_int(f, max_n_of_attribute_registers);
./tex/textypes.c     14:     dump_via_int(f, max_n_of_posit_registers);
./tex/textypes.c     15:     dump_via_int(f, max_n_of_glue_registers);
./tex/textypes.c     16:     dump_via_int(f, max_n_of_mu_glue_registers);
./tex/textypes.c     17:     dump_via_int(f, max_n_of_bytecodes);
./tex/textypes.c     18:     dump_via_int(f, max_n_of_math_families);
./tex/textypes.c     19:     dump_via_int(f, max_n_of_math_classes);
./tex/textypes.c     20:     dump_via_int(f, max_n_of_catcode_tables);
./tex/textypes.c     21:     dump_via_int(f, max_n_of_box_indices);
./tex/textypes.c     22:     dump_via_int(f, max_n_of_marks);
./tex/textypes.c     23:     dump_via_int(f, max_n_of_inserts);
./tex/textypes.c     24:     dump_via_int(f, max_n_of_box_indices);
./tex/textypes.c     25:     dump_via_int(f, max_n_of_bytecodes);
./tex/textypes.c     26:     dump_via_int(f, max_n_of_math_families);
./tex/textypes.c     27:     dump_via_int(f, max_n_of_math_classes);
./tex/textypes.c     33:     undump_int(f, x);
./tex/textypes.c     43:     tex_aux_check_constant(f, max_n_of_int_registers);
./utilities/auxsparsearray.c    460:     dump_int(f, a->sa_stack_step);
./utilities/auxsparsearray.c    461:     dump_int(f, a->dflt.int_value);
./utilities/auxsparsearray.c    465:         dump_via_int(f, 1);
./utilities/auxsparsearray.c    466:         dump_int(f, bytes);
./utilities/auxsparsearray.c    469:                 dump_via_int(f, 1);
./utilities/auxsparsearray.c    512:                         dump_int(f, mode);
./utilities/auxsparsearray.c    531:                         dump_via_int(f, 0);
./utilities/auxsparsearray.c    535:                 dump_via_int(f, 0);
./utilities/auxsparsearray.c    540:  //     dump_via_int(f, 0);
./utilities/auxsparsearray.c    548:     undump_int(f,a->sa_stack_step);
./utilities/auxsparsearray.c    549:     undump_int(f,a->dflt.int_value);
./utilities/auxsparsearray.c    556:     undump_int(f, x);
./utilities/auxsparsearray.c    560:         undump_int(f, bytes);
./utilities/auxsparsearray.c    563:             undump_int(f, mode); /* more a trigger */
./utilities/auxsparsearray.c    567:                     undump_int(f, mode);
./utilities/auxsystem.c    100:     static BOOL WINAPI catch_interrupt(DWORD arg)
./utilities/auxsystem.c    113:     void aux_set_interrupt_handler(void)
./utilities/auxsystem.c    115:         SetConsoleCtrlHandler(catch_interrupt, TRUE);
./utilities/auxsystem.c    120:     /* static RETSIGTYPE catch_interrupt(int arg) */
./utilities/auxsystem.c    122:     static void catch_interrupt(int arg)
./utilities/auxsystem.c    126:         (void) signal(SIGINT, catch_interrupt);
./utilities/auxsystem.c    129:     void aux_set_interrupt_handler(void)
./utilities/auxsystem.c    133:         old_handler = signal(SIGINT, catch_interrupt);
./utilities/auxsystem.c    154:  /* set_interrupt_handler(); */
./libraries/mimalloc/include/mimalloc.h    272: mi_decl_export int mi_reserve_huge_os_pages_interleave(size_t pages, size_t numa_nodes, size_t timeout_msecs) mi_attr_noexcept;
./libraries/mimalloc/include/mimalloc/atomic.h    136: typedef LONG64   msc_intptr_t;
./libraries/mimalloc/include/mimalloc/atomic.h    139: typedef LONG     msc_intptr_t;
./libraries/mimalloc/include/mimalloc/atomic.h    154:   return (uintptr_t)MI_64(_InterlockedExchangeAdd)((volatile msc_intptr_t*)p, (msc_intptr_t)add);
./libraries/mimalloc/include/mimalloc/atomic.h    158:   return (uintptr_t)MI_64(_InterlockedExchangeAdd)((volatile msc_intptr_t*)p, -((msc_intptr_t)sub));
./libraries/mimalloc/include/mimalloc/atomic.h    162:   return (uintptr_t)MI_64(_InterlockedAnd)((volatile msc_intptr_t*)p, (msc_intptr_t)x);
./libraries/mimalloc/include/mimalloc/atomic.h    166:   return (uintptr_t)MI_64(_InterlockedOr)((volatile msc_intptr_t*)p, (msc_intptr_t)x);
./libraries/mimalloc/include/mimalloc/atomic.h    170:   uintptr_t read = (uintptr_t)MI_64(_InterlockedCompareExchange)((volatile msc_intptr_t*)p, (msc_intptr_t)desired, (msc_intptr_t)(*expected));
./libraries/mimalloc/include/mimalloc/atomic.h    184:   return (uintptr_t)MI_64(_InterlockedExchange)((volatile msc_intptr_t*)p, (msc_intptr_t)exchange);
./libraries/mimalloc/include/mimalloc/internal.h    283:   mi_assert_internal(alignment != 0);
./libraries/mimalloc/include/mimalloc/internal.h    289:   mi_assert_internal(alignment != 0);
./libraries/mimalloc/include/mimalloc/internal.h    301:   mi_assert_internal(alignment != 0);
./libraries/mimalloc/include/mimalloc/internal.h    313:   mi_assert_internal(divider != 0);
./libraries/mimalloc/include/mimalloc/internal.h    329:   mi_assert_internal(size <= SIZE_MAX - sizeof(uintptr_t));
./libraries/mimalloc/include/mimalloc/internal.h    385:   mi_assert_internal(heap != NULL);
./libraries/mimalloc/include/mimalloc/internal.h    391:   mi_assert_internal(_mi_heap_main.cookie != 0);
./libraries/mimalloc/include/mimalloc/internal.h    400:   mi_assert_internal(size <= (MI_SMALL_SIZE_MAX + MI_PADDING_SIZE));
./libraries/mimalloc/include/mimalloc/internal.h    402:   mi_assert_internal(idx < MI_PAGES_DIRECT);
./libraries/mimalloc/include/mimalloc/internal.h    411:   mi_assert_internal(p != NULL);
./libraries/mimalloc/include/mimalloc/internal.h    416:   mi_assert_internal(s->slice_offset== 0 && s->slice_count > 0);
./libraries/mimalloc/include/mimalloc/internal.h    421:   mi_assert_internal(p->slice_offset== 0 && p->slice_count > 0);
./libraries/mimalloc/include/mimalloc/internal.h    428:   mi_assert_internal(segment == NULL || ((mi_slice_t*)page >= segment->slices && (mi_slice_t*)page < segment->slices + segment->slice_entries));
./libraries/mimalloc/include/mimalloc/internal.h    434:   mi_assert_internal(start >= _mi_ptr_segment(slice)->slices);
./libraries/mimalloc/include/mimalloc/internal.h    435:   mi_assert_internal(start->slice_offset == 0);
./libraries/mimalloc/include/mimalloc/internal.h    436:   mi_assert_internal(start + start->slice_count > slice);
./libraries/mimalloc/include/mimalloc/internal.h    442:   mi_assert_internal(p > (void*)segment);
./libraries/mimalloc/include/mimalloc/internal.h    444:   mi_assert_internal(diff > 0 && diff <= (ptrdiff_t)MI_SEGMENT_SIZE);
./libraries/mimalloc/include/mimalloc/internal.h    446:   mi_assert_internal(idx <= segment->slice_entries);
./libraries/mimalloc/include/mimalloc/internal.h    449:   mi_assert_internal(slice->slice_offset == 0);
./libraries/mimalloc/include/mimalloc/internal.h    450:   mi_assert_internal(slice >= segment->slices && slice < segment->slices + segment->slice_entries);
./libraries/mimalloc/include/mimalloc/internal.h    467:   mi_assert_internal(bsize > 0);
./libraries/mimalloc/include/mimalloc/internal.h    512:   mi_assert_internal(mi_page_thread_free_flag(page) != MI_DELAYED_FREEING);
./libraries/mimalloc/include/mimalloc/internal.h    536:   mi_assert_internal(page != NULL);
./libraries/mimalloc/include/mimalloc/internal.h    542:   mi_assert_internal(page != NULL && page->reserved > 0);
./libraries/mimalloc/include/mimalloc/internal.h    548:   mi_assert_internal(page != NULL);
./libraries/mimalloc/include/mimalloc/internal.h    954:   mi_assert_internal(((uintptr_t)dst % MI_INTPTR_SIZE == 0) && ((uintptr_t)src % MI_INTPTR_SIZE == 0));
./libraries/mimalloc/include/mimalloc/internal.h    961:   mi_assert_internal((uintptr_t)dst % MI_INTPTR_SIZE == 0);
./libraries/mimalloc/include/mimalloc/internal.h    968:   mi_assert_internal(((uintptr_t)dst % MI_INTPTR_SIZE == 0) && ((uintptr_t)src % MI_INTPTR_SIZE == 0));
./libraries/mimalloc/include/mimalloc/internal.h    973:   mi_assert_internal((uintptr_t)dst % MI_INTPTR_SIZE == 0);
./libraries/mimalloc/include/mimalloc/track.h     70: #include <sanitizer/asan_interface.h>
./libraries/mimalloc/include/mimalloc/track.h    136:     mi_assert_internal(mi_usable_size(p)==(reqsize)); \
./libraries/mimalloc/include/mimalloc/track.h    142:     mi_assert_internal(mi_usable_size(p)>=(reqsize)); \
./libraries/mimalloc/include/mimalloc/types.h    542: #define mi_assert_internal    mi_assert
./libraries/mimalloc/include/mimalloc/types.h    544: #define mi_assert_internal(x)
./libraries/mimalloc/src/bitmap.h     39:   mi_assert_internal(bitidx < MI_BITMAP_FIELD_BITS);
./libraries/mimalloc/src/prim/windows/etw.h    885:     _In_ const unsigned __int64  _Arg0,
./libraries/mimalloc/src/prim/windows/etw.h    886:     _In_ const unsigned __int64  _Arg1
./libraries/mimalloc/src/prim/windows/etw.h    893:     EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned __int64)  );
./libraries/mimalloc/src/prim/windows/etw.h    895:     EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const unsigned __int64)  );
./libraries/miniz/miniz.h    316: struct mz_internal_state;
./libraries/miniz/miniz.h    330:     struct mz_internal_state *state; /* internal state, allocated by zalloc/zfree */
./libraries/miniz/miniz.h    486: #define internal_state mz_internal_state
./libraries/miniz/miniz.h    546: typedef signed short mz_int16;
./libraries/miniz/miniz.h    550: typedef int64_t mz_int64;
./libraries/miniz/miniz.h    959:     mz_int16 m_look_up[TINFL_MAX_HUFF_TABLES][TINFL_FAST_LOOKUP_SIZE];
./libraries/miniz/miniz.h    960:     mz_int16 m_tree_0[TINFL_MAX_HUFF_SYMBOLS_0 * 2];
./libraries/miniz/miniz.h    961:     mz_int16 m_tree_1[TINFL_MAX_HUFF_SYMBOLS_1 * 2];
./libraries/miniz/miniz.h    962:     mz_int16 m_tree_2[TINFL_MAX_HUFF_SYMBOLS_2 * 2];
./libraries/miniz/miniz.h   1018:     mz_uint16 m_internal_attr;
./libraries/miniz/miniz.h   1055: struct mz_zip_internal_state_tag;
./libraries/miniz/miniz.h   1056: typedef struct mz_zip_internal_state_tag mz_zip_internal_state;
./libraries/miniz/miniz.h   1150:     mz_zip_internal_state *m_pState;
./libraries/pplib/ppapi.h    148: #define ppobj_get_int(o, v) ((o)->type == PPINT ? ((v = (o)->integer), 1) : 0)
./libraries/pplib/ppapi.h    161: #define ppobj_rget_int(o, v) ((o)->type == PPINT ? ((v = (o)->integer), 1) : ((o)->type == PPREF ? ppobj_get_int(ppref_obj((o)->ref), v) : 0))
./libraries/pplib/ppapi.h    172: #define ppobj_get_int_value(o) ((o)->type == PPINT ? (o)->integer : 0)
./libraries/pplib/ppapi.h    230: PPAPI int pparray_get_int (pparray *array, size_t index, ppint *v);
./libraries/pplib/ppapi.h    242: PPAPI int pparray_rget_int (pparray *array, size_t index, ppint *v);
./libraries/pplib/ppapi.h    260: PPAPI int ppdict_get_int (ppdict *dict, const char *name, ppint *v);
./libraries/pplib/ppapi.h    272: PPAPI int ppdict_rget_int (ppdict *dict, const char *name, ppint *v);
./libraries/pplib/ppload.h     51: ppstring * ppstring_internal (const void *data, size_t size, ppheap *heap);
./libraries/pplib/util/utiliof.h    481: #define iof_scan_integer(I, c, number) _scan_integer(c, number, iof_next(I))
./libraries/pplib/util/utiliof.h    483: #define iof_read_integer(I, c, number) _read_integer(c, number, iof_next(I))
./libraries/pplib/util/utiliof.h    490: UTILAPI int iof_get_int32 (iof *I, int32_t *number);
./libraries/pplib/util/utiliof.h    492: UTILAPI int iof_get_int64 (iof *I, int64_t *number);
./libraries/pplib/util/utiliof.h    499: UTILAPI int iof_get_int32_radix (iof *I, int32_t *number, int radix);
./libraries/pplib/util/utiliof.h    501: UTILAPI int iof_get_int64_radix (iof *I, int64_t *number, int radix);
./libraries/pplib/util/utiliof.h    509: #  define iof_get_intlw(I, number) iof_get_int64(I, number)
./libraries/pplib/util/utiliof.h    511: #  define iof_get_intlw_radix(I, number, radix) iof_get_int64_radix(I, number, radix)
./libraries/pplib/util/utiliof.h    514: #  define iof_get_intlw(I, number) iof_get_slong(I, number)
./libraries/pplib/util/utiliof.h    516: #  define iof_get_intlw_radix(I, number, radix) iof_get_slong_radix(I, number, radix)
./libraries/pplib/util/utiliof.h    530: UTILAPI size_t iof_put_int32 (iof *O, int32_t number);
./libraries/pplib/util/utiliof.h    532: UTILAPI size_t iof_put_int64 (iof *O, int64_t number);
./libraries/pplib/util/utiliof.h    539: UTILAPI size_t iof_put_int32_radix (iof *O, int32_t number, int radix, int uc);
./libraries/pplib/util/utiliof.h    541: UTILAPI size_t iof_put_int64_radix (iof *O, int64_t number, int radix, int uc);
./libraries/pplib/util/utiliof.h    549: #  define iof_put_intlw(O, number) iof_put_int64(O, number)
./libraries/pplib/util/utiliof.h    551: #  define iof_put_intlw_radix(O, number, radix, uc) iof_put_int64_radix(O, number, radix, uc)
./libraries/pplib/util/utiliof.h    554: #  define iof_put_intlw(O, number) iof_put_slong(O, number)
./libraries/pplib/util/utiliof.h    556: #  define iof_put_intlw_radix(O, number, radix, uc) iof_put_slong_radix(O, number, radix, uc)
./libraries/pplib/util/utilnumber.h    115: UTILAPI const char * string_to_int32 (const char *s, int32_t *number);
./libraries/pplib/util/utilnumber.h    117: UTILAPI const char * string_to_int64 (const char *s, int64_t *number);
./libraries/pplib/util/utilnumber.h    124: UTILAPI const char * radix_to_int32 (const char *s, int32_t *number, int radix);
./libraries/pplib/util/utilnumber.h    126: UTILAPI const char * radix_to_int64 (const char *s, int64_t *number, int radix);
./libraries/pplib/util/utilnumber.h    188: #  define string_to_intlw(s, number) string_to_int64(s, number)
./libraries/pplib/util/utilnumber.h    191: #  define radix_to_intlw(s, number, radix) radix_to_int64(s, number, radix)
./libraries/pplib/util/utilnumber.h    213: #  define string_to_intlw(s, number) string_to_slong(s, number)
./libraries/pplib/util/utilnumber.h    216: #  define radix_to_intlw(s, number, radix) radix_to_slong(s, number, radix)
./libraries/pplib/util/utilnumber.h    312: #define read_int16_native(s)  (*((int16_t *)(s)))
./libraries/pplib/util/utilnumber.h    313: #define read_int32_native(s)  (*((int32_t *)(s)))
./libraries/pplib/util/utilnumber.h    323: #define scan_int16_native(s)  (s += 2, read_int16_native(s-2))
./libraries/pplib/util/utilnumber.h    324: #define scan_int32_native(s)  (s += 4, read_int32_native(s-4))
./libraries/pplib/util/utilnumber.h    339: #define _scan_integer(c, number, next) \
./libraries/pplib/util/utilnumber.h    344: #define _read_integer(c, number, next) \
./libraries/pplib/util/utilnumber.h    360:     _scan_integer(c, eexponent10, next); \
./libraries/softposit/source/include/softposit.h    138: int_fast64_t p8_int( posit8_t );
./libraries/softposit/source/include/softposit.h    227: int_fast64_t p16_int( posit16_t);
./libraries/softposit/source/include/softposit.h    314: int64_t p32_int( posit32_t);
./libraries/softposit/source/include/softposit.h    417: int64_t pX2_int( posit_2_t );
./libraries/softposit/source/include/softposit.h    533: int64_t pX1_int( posit_1_t );
./libraries/softposit/source/include/softposit_cpp.h    251: 		return p8_int(castP8(value));
./libraries/softposit/source/include/softposit_cpp.h    491: 		return p16_int(castP16(value));
./libraries/softposit/source/include/softposit_cpp.h    733: 		return p32_int(castP32(value));
./libraries/softposit/source/include/softposit_cpp.h    985: 		return pX2_int(castPX2(value));
./lua/lmtcallbacklib.h     83:     callback_integer_key   = 'd', /*tex an integer */
./lua/lmtinterface.h    168: # define lua_push_integer(L,x)  lua_pushinteger(L, (int)         (x))
./lua/lmtinterface.h    175: # define lua_push_integer_at_index(L,i,x) \
./lua/lmtinterface.h    200: # define lua_push_integer_at_key(L,k,x) \
./lua/lmtinterface.h    343: typedef struct lmt_interface_info {
./lua/lmtinterface.h    373: } lmt_interface_info ;
./lua/lmtinterface.h    375: extern lmt_interface_info lmt_interface;
./lua/lmtinterface.h    377: # define lmt_push_pack_type(L,n)           lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.pack_type_values          [n].lua)
./lua/lmtinterface.h    378: # define lmt_push_group_code(L,n)          lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.group_code_values         [n].lua)
./lua/lmtinterface.h    379: # define lmt_push_par_context(L,n)         lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.par_context_values        [n].lua)
./lua/lmtinterface.h    380: # define lmt_push_page_context(L,n)        lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.page_context_values       [n].lua)
./lua/lmtinterface.h    381: # define lmt_push_append_line_context(L,n) lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.append_line_context_values[n].lua)
./lua/lmtinterface.h    382: # define lmt_push_alignment_context(L,n)   lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.alignment_context_values  [n].lua)
./lua/lmtinterface.h    383: # define lmt_push_par_begin(L,n)           lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.par_begin_values          [n].lua)
./lua/lmtinterface.h    384: # define lmt_push_par_mode(L,n)            lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.par_mode_values           [n].lua)
./lua/lmtinterface.h    385: # define lmt_push_math_style_name(L,n)     lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.math_style_name_values    [n].lua)
./lua/lmtinterface.h    386: # define lmt_push_math_style_variant(L,n)  lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.math_style_variant_values [n].lua)
./lua/lmtinterface.h    387: # define lmt_push_math_noad_option(L,n)    lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.math_noad_option_values   [n].lua)
./lua/lmtinterface.h    388: # define lmt_push_lua_function_values(L,n) lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.lua_function_values       [n].lua)
./lua/lmtinterface.h    389: # define lmt_push_direction(L,n)           lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.direction_values          [n].lua)
./lua/lmtinterface.h    390: # define lmt_push_node_fill(L,n)           lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.node_fill_values          [n].lua)
./lua/lmtinterface.h    391: # define lmt_push_page_contribute(L,n)     lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.page_contribute_values    [n].lua)
./lua/lmtinterface.h    392: # define lmt_push_math_style(L,n)          lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.math_style_values         [n].lua)
./lua/lmtinterface.h    393: # define lmt_push_math_parameter(L,n)      lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.math_parameter_values     [n].lua)
./lua/lmtinterface.h    394: # define lmt_push_math_font_parameter(L,n) lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.math_font_parameter_values[n].lua)
./lua/lmtinterface.h    395: # define lmt_push_math_indirect(L,n)       lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.math_indirect_values      [n].lua)
./lua/lmtinterface.h    396: # define lmt_push_field_type(L,n)          lua_rawgeti(L, LUA_REGISTRYINDEX, lmt_interface.field_type_values         [n].lua)
./lua/lmtinterface.h    398: # define lmt_name_of_pack_type(n)           lmt_interface.pack_type_values          [n].name
./lua/lmtinterface.h    399: # define lmt_name_of_group_code(n)          lmt_interface.group_code_values         [n].name
./lua/lmtinterface.h    400: # define lmt_name_of_par_context(n)         lmt_interface.par_context_values        [n].name
./lua/lmtinterface.h    401: # define lmt_name_of_page_context(n)        lmt_interface.page_context_values       [n].name
./lua/lmtinterface.h    402: # define lmt_name_of_append_line_context(n) lmt_interface.append_line_context_values[n].name
./lua/lmtinterface.h    403: # define lmt_name_of_alignment_context(n)   lmt_interface.alignment_context_values  [n].name
./lua/lmtinterface.h    404: # define lmt_name_of_par_begin(n)           lmt_interface.par_begin_values          [n].name
./lua/lmtinterface.h    405: # define lmt_name_of_par_mode(n)            lmt_interface.par_mode_values           [n].name
./lua/lmtinterface.h    406: # define lmt_name_of_math_style_name(n)     lmt_interface.math_style_name_values    [n].name
./lua/lmtinterface.h    407: # define lmt_name_of_math_style_variant(n)  lmt_interface.math_style_variant_values [n].name
./lua/lmtinterface.h    408: # define lmt_name_of_math_noad_option(n)    lmt_interface.math_noad_option_values   [n].name
./lua/lmtinterface.h    409: # define lmt_name_of_lua_function_values(n) lmt_interface.lua_function_values       [n].name
./lua/lmtinterface.h    410: # define lmt_name_of_direction(n)           lmt_interface.direction_values          [n].name
./lua/lmtinterface.h    411: # define lmt_name_of_node_fill(n)           lmt_interface.node_fill_values          [n].name
./lua/lmtinterface.h    412: # define lmt_name_of_page_contribute(n)     lmt_interface.page_contribute_values    [n].name
./lua/lmtinterface.h    413: # define lmt_name_of_math_style(n)          lmt_interface.math_style_values         [n].name
./lua/lmtinterface.h    414: # define lmt_name_of_math_parameter(n)      lmt_interface.math_parameter_values     [n].name
./lua/lmtinterface.h    415: # define lmt_name_of_math_font_parameter(n) lmt_interface.math_font_parameter_values[n].name
./lua/lmtinterface.h    416: # define lmt_name_of_math_indirect(n)       lmt_interface.math_indirect_values      [n].name
./lua/lmtinterface.h    417: # define lmt_name_of_field_type(n)          lmt_interface.field_type_values         [n].name
./lua/lmtinterface.h    807: make_lua_key(L, internal_int);\
./lua/lmtinterface.h    808: make_lua_key(L, internal_int_reference);\
./lua/lmtinterface.h   1128: make_lua_key(L, register_int);\
./lua/lmtinterface.h   1129: make_lua_key(L, register_int_reference);\
./lua/lmtinterface.h   1187: make_lua_key(L, set_interaction);\
./lua/lmtinterface.h   1500: make_lua_key(L, run_internal);\
./lua/lmtinterface.h   1651: extern void lmt_initialize_interface(void);
./lua/lmtinterface.h   1668: static inline void lua_set_integer_by_key(lua_State *L, const char *a, int b)
./lua/lmtinterface.h   1674: static inline void lua_set_integer_by_index(lua_State *L, int a, int b)
./luacore/lua54/src/lauxlib.h    161: #define luaL_intop(op,v1,v2)  \
./luacore/lua54/src/lcode.h     71: LUAI_FUNC void luaK_int (FuncState *fs, int reg, lua_Integer n);
./luacore/lua54/src/ldebug.h     14: #define pcRel(pc, p)	(cast_int((pc) - (p)->code) - 1)
./luacore/lua54/src/lfunc.h     14: #define sizeCclosure(n)	(cast_int(offsetof(CClosure, upvalue)) + \
./luacore/lua54/src/lfunc.h     15:                          cast_int(sizeof(TValue)) * (n))
./luacore/lua54/src/lfunc.h     17: #define sizeLclosure(n)	(cast_int(offsetof(LClosure, upvals)) + \
./luacore/lua54/src/lfunc.h     18:                          cast_int(sizeof(TValue *)) * (n))
./luacore/lua54/src/llex.h     46: #define NUM_RESERVED	(cast_int(TK_WHILE-FIRST_RESERVED + 1))
./luacore/lua54/src/llimits.h    141: #define cast_int(i)	cast(int, (i))
./luacore/lua54/src/lobject.h    789: 	(check_exp((size&(size-1))==0, (cast_int((s) & ((size)-1)))))
./luacore/lua54/src/lopcodes.h    121: #define getarg(i,pos,size)	(cast_int(((i)>>(pos)) & MASK1(size,0)))
./luacore/lua54/src/lopcodes.h    136: #define TESTARG_k(i)	check_exp(checkopm(i, iABC), (cast_int(((i) & (1u << POS_k)))))
./luacore/lua54/src/lstate.h    147: #define stacksize(th)	cast_int((th)->stack_last.p - (th)->stack.p)
./luacore/lua54/src/luaconf.h    130: ** C89 ('long' and 'double'); Windows always has '__int64', so it does
./luacore/lua54/src/luaconf.h    503: @@ lua_integer2str converts an integer to a string.
./luacore/lua54/src/luaconf.h    513: #define lua_integer2str(s,sz,n)  \
./luacore/lua54/src/luaconf.h    562: #define LUA_INTEGER		__int64
./mp/mpc/mp.h     45: typedef void  (*mp_internal_runner) (MP, int action, int n, int type, const char *iname);
./mp/mpc/mp.h     63: enum mp_interaction_mode {
./mp/mpc/mp.h    240:     mp_internal_runner run_internal;
./mp/mpc/mp.h    252:     int run_internal_id;
./mp/mpc/mp.h    304: void mp_set_internal (MP mp, char *n, char *v, int isstring);
./mp/mpc/mp.h    326: void mp_push_integer_value   (MP mp, int i);
./mp/mpc/mp.h    387:     mp_interim_command,
./mp/mpc/mp.h    389:     mp_new_internal_command,
./mp/mpc/mp.h    414:     mp_internal_command,
./mp/mpc/mp.h    540:     mp_internal_operation,
./mp/mpc/mp.h    636:     mp_intertimes_operation,
./mp/mpc/mp.h    637:     mp_intertimes_list_operation,
./mp/mpc/mp.h    778: typedef void   (*number_from_int_func)              (mp_number *A, int B);
./mp/mpc/mp.h    788: typedef void   (*number_from_int_div_func)          (mp_number *A, mp_number *B, int C);
./mp/mpc/mp.h    789: typedef void   (*number_from_int_mul_func)          (mp_number *A, mp_number *B, int C);
./mp/mpc/mp.h    803: typedef void   (*number_multiply_int_func)          (mp_number *A, int b);
./mp/mpc/mp.h    804: typedef void   (*number_divide_int_func)            (mp_number *A, int b);
./mp/mpc/mp.h    805: typedef int    (*number_to_int_func)                (mp_number *A);
./mp/mpc/mp.h    879:     number_from_int_func              md_from_int;
./mp/mpc/mp.h    889:     number_from_int_div_func          md_from_int_div;
./mp/mpc/mp.h    890:     number_from_int_mul_func          md_from_int_mul;
./mp/mpc/mp.h    904:     number_multiply_int_func          md_multiply_int;
./mp/mpc/mp.h    905:     number_divide_int_func            md_divide_int;
./mp/mpc/mp.h    906:     number_to_int_func                md_to_int;
./mp/mpc/mp.h    970: typedef enum mp_given_internal {
./mp/mpc/mp.h    971:     mp_number_system_internal = 1,
./mp/mpc/mp.h    972:     mp_number_precision_internal,
./mp/mpc/mp.h    973:     mp_job_name_internal,
./mp/mpc/mp.h    974:     mp_tracing_titles_internal,
./mp/mpc/mp.h    975:     mp_tracing_equations_internal,
./mp/mpc/mp.h    976:     mp_tracing_capsules_internal,
./mp/mpc/mp.h    977:     mp_tracing_choices_internal,
./mp/mpc/mp.h    978:     mp_tracing_specs_internal,
./mp/mpc/mp.h    979:     mp_tracing_commands_internal,
./mp/mpc/mp.h    980:     mp_tracing_restores_internal,
./mp/mpc/mp.h    981:     mp_tracing_macros_internal,
./mp/mpc/mp.h    982:     mp_tracing_output_internal,
./mp/mpc/mp.h    983:     mp_tracing_stats_internal,
./mp/mpc/mp.h    984:     mp_tracing_online_internal,
./mp/mpc/mp.h    985:     mp_year_internal,
./mp/mpc/mp.h    986:     mp_month_internal,
./mp/mpc/mp.h    987:     mp_day_internal,
./mp/mpc/mp.h    988:     mp_time_internal,
./mp/mpc/mp.h    989:     mp_hour_internal,
./mp/mpc/mp.h    990:     mp_minute_internal,
./mp/mpc/mp.h    991:     mp_char_code_internal,
./mp/mpc/mp.h    992:     mp_char_wd_internal,
./mp/mpc/mp.h    993:     mp_char_ht_internal,
./mp/mpc/mp.h    994:     mp_char_dp_internal,
./mp/mpc/mp.h    995:     mp_char_ic_internal,
./mp/mpc/mp.h    996:     mp_pausing_internal,
./mp/mpc/mp.h    997:     mp_showstopping_internal,
./mp/mpc/mp.h    998:     mp_texscriptmode_internal,
./mp/mpc/mp.h    999:     mp_overloadmode_internal,
./mp/mpc/mp.h   1000:     mp_linejoin_internal,
./mp/mpc/mp.h   1001:     mp_linecap_internal,
./mp/mpc/mp.h   1002:     mp_stacking_internal,
./mp/mpc/mp.h   1003:     mp_miterlimit_internal,
./mp/mpc/mp.h   1004:     mp_warning_check_internal,
./mp/mpc/mp.h   1005:     mp_true_corners_internal,
./mp/mpc/mp.h   1006:     mp_default_color_model_internal,
./mp/mpc/mp.h   1007:     mp_restore_clip_color_internal,
./mp/mpc/mp.h   1008: } mp_given_internal;
./mp/mpc/mp.h   1009: typedef struct mp_internal {
./mp/mpc/mp.h   1014: } mp_internal;
./mp/mpc/mp.h   1038:     mp_internal          value;
./mp/mpc/mp.h   1091:     mp_internal_runner run_internal;
./mp/mpc/mp.h   1103:     int run_internal_id;
./mp/mpc/mp.h   1174:     mp_internal *internal;
./mp/mpc/mp.h   1176:     int          max_internal;
./mp/mpc/mp.h   1311: void mp_grow_internals (MP mp, int l);
./mp/mpc/mp.h   1363: # define set_internal_string(A,B) mp->internal[(A)].v.data.str=(B)
./mp/mpc/mp.h   1365: # define set_internal_name(A,B)   mp->internal[(A)].intname=(B)
./mp/mpc/mp.h   1367: # define set_internal_type(A,B)   mp->internal[(A)].v.type=(B)
./mp/mpc/mp.h   1369: # define set_internal_run(A,B)    mp->internal[(A)].run=(B)
./mp/mpc/mpstrings.h     34: mp_string mp_intern (MP mp, const char *s);
./tex/texalign.h     21: extern void     tex_alignment_interwoven_error (int n);
./tex/texarithmetic.h     18: extern scaled tex_multiply_integers (int n, scaled x);
./tex/texcommands.h     22:     Next are the ordinary run-of-the-mill command codes. Codes that are |min_internal| or more
./tex/texcommands.h     26:     internal registers or tables. Codes that are |max_internal| or less represent internal
./tex/texcommands.h    206:     internal_int_cmd,                 /*tex integer (|\tolerance|, |\day|, etc.) */
./tex/texcommands.h    207:     register_int_cmd,                 /*tex user-defined integers */
./tex/texcommands.h    251:     set_interaction_cmd,              /*tex define level of interaction (|\batchmode|, etc.) */
./tex/texcommands.h    315:     internal_int_reference_cmd,
./tex/texcommands.h    316:     register_int_reference_cmd,
./tex/texcommands.h    330: # define min_internal_cmd     char_given_cmd      /*tex the smallest code that can follow |the| */
./tex/texcommands.h    332: # define max_internal_cmd     register_cmd        /*tex the largest code that can follow |the| */
./tex/texcommands.h    333: # define max_command_cmd      set_interaction_cmd /*tex the largest command code seen at |big_switch| */
./tex/texcommands.h    453:     to_integer_code,          /*tex command code for |\tointeger| (also gobbles |\relax|) */
./tex/texcommands.h    556:     scaled_interword_space_code,
./tex/texcommands.h    557:     scaled_interword_stretch_code,
./tex/texcommands.h    558:     scaled_interword_shrink_code,
./tex/texcommands.h    584:     last_chk_integer_code,      /*tex |\ifchkinteger| */
./tex/texcommands.h    650:     /* we actually need set_box_int_cmd, or set_box_property */
./tex/texcommands.h    689:    sequence whose |cmd| is |assign_int| or \dots\ or |assign_mu_glue|, and the corresponding |chr|
./tex/texcommands.h   1011:     lua_value_integer_code,
./tex/texconditional.h     55:     if_int_code,            /*tex |\ifnum| */
./tex/texconditional.h     56:     if_abs_int_code,        /*tex |\ifabsnum| */ 
./tex/texconditional.h     57:     if_zero_int_code,       /*tex |\ifzeronum|*/
./tex/texconditional.h     58:     if_interval_int_code,
./tex/texconditional.h     62:     if_interval_posit_code,
./tex/texconditional.h     66:     if_interval_dim_code,
./tex/texconditional.h     80:     if_chk_int_code,        /*tex |\ifchknum| */
./tex/texconditional.h     81:     if_chk_integer_code,    /*tex |\ifchknumber| */
./tex/texconditional.h     82:     if_val_int_code,        /*tex |\ifnumval| */
./tex/texconditional.h     83:     if_cmp_int_code,        /*tex |\ifcmpnum| */
./tex/texconditional.h    130:     halfword  chk_integer;
./tex/texdumpdata.h     83: # define   dump_int(f,x)   dump_things(f,x,1)
./tex/texdumpdata.h     84: # define undump_int(f,x) undump_things(f,x,1)
./tex/texdumpdata.h     88:     Because sometimes we dump constants or the result of a function call we have |dump_via_int|
./tex/texdumpdata.h     94: # define dump_via_int(f,x) do { \
./tex/texdumpdata.h     96:     dump_int(f,x_val); \
./tex/texdumpdata.h    102:         dump_int(f,x); \
./tex/texdumpdata.h    105:         dump_via_int(f,0); \
./tex/texequivalents.h    470:     local_interline_penalty_code,
./tex/texequivalents.h    568:  // local_interline_penalty_code,       /*tex local |\interlinepenalty| */
./tex/texequivalents.h    687:     number_int_pars,
./tex/texequivalents.h    690: # define first_int_code pre_tolerance_code
./tex/texequivalents.h    691: # define last_int_code  space_factor_stretch_limit_code
./tex/texequivalents.h    793: # define internal_int_base              (register_box_base + max_n_of_box_registers)
./tex/texequivalents.h    794: # define register_int_base              (internal_int_base + number_int_pars + 1)
./tex/texequivalents.h    795: # define internal_int_location(a)       (internal_int_base + (a))
./tex/texequivalents.h    796: # define register_int_location(a)       (register_int_base + (a))
./tex/texequivalents.h    797: # define internal_int_number(a)         ((a) - internal_int_base)
./tex/texequivalents.h    798: # define register_int_number(a)         ((a) - register_int_base)
./tex/texequivalents.h    800: # define internal_attribute_base        (register_int_base + max_n_of_int_registers)
./tex/texequivalents.h   1046: # define int_parameter(A)           eq_value(internal_int_location(A))
./tex/texequivalents.h   1047: # define count_parameter(A)         eq_value(internal_int_location(A))
./tex/texequivalents.h   1562: # define local_interline_penalty_par     count_parameter(local_interline_penalty_code)
./tex/texequivalents.h   1863: # define count_register(j)     eq_value(register_int_location(j))
./tex/texequivalents.h   1935: # define update_tex_glyph_data(a,v)            tex_word_define(a, internal_int_location(glyph_data_code), v)
./tex/texequivalents.h   1936: # define update_tex_glyph_state(a,v)           tex_word_define(a, internal_int_location(glyph_state_code), v)
./tex/texequivalents.h   1937: # define update_tex_glyph_script(a,v)          tex_word_define(a, internal_int_location(glyph_script_code), v)
./tex/texequivalents.h   1938: # define update_tex_family(a,v)                tex_word_define(a, internal_int_location(family_code), v)
./tex/texequivalents.h   1939: # define update_tex_variable_family(a,v)       tex_word_define(a, internal_int_location(variable_family_code), v)
./tex/texequivalents.h   1940: # define update_tex_language(a,v)              tex_word_define(a, internal_int_location(language_code), v)
./tex/texequivalents.h   1941: # define update_tex_font(a,v)                  tex_word_define(a, internal_int_location(font_code), v)
./tex/texequivalents.h   1943: /*define update_tex_glue_data(a,v)             tex_word_define(a, internal_int_location(glue_data_code), v) */
./tex/texequivalents.h   1947: # define update_tex_hang_after(v)              tex_eq_word_define(internal_int_location(hang_after_code), v)
./tex/texequivalents.h   1949: # define update_tex_looseness(v)               tex_eq_word_define(internal_int_location(looseness_code), v)
./tex/texequivalents.h   1950: # define update_tex_inter_line_penalties(v)    tex_eq_word_define(internal_int_location(inter_line_penalties_code), v)
./tex/texequivalents.h   1951: # define update_tex_single_line_penalty(v)     tex_eq_word_define(internal_int_location(single_line_penalty_code), v)
./tex/texequivalents.h   1952: # define update_tex_math_direction(v)          tex_eq_word_define(internal_int_location(math_direction_code), v)
./tex/texequivalents.h   1953: # define update_tex_internal_par_state(v)      tex_eq_word_define(internal_int_location(internal_par_state_code), v)
./tex/texequivalents.h   1954: # define update_tex_internal_dir_state(v)      tex_eq_word_define(internal_int_location(internal_dir_state_code), v)
./tex/texequivalents.h   1955: # define update_tex_internal_math_style(v)     tex_eq_word_define(internal_int_location(internal_math_style_code), v)
./tex/texequivalents.h   1956: # define update_tex_internal_math_scale(v)     tex_eq_word_define(internal_int_location(internal_math_scale_code), v)
./tex/texequivalents.h   1957: # define update_tex_output_penalty(v)          tex_geq_word_define(internal_int_location(output_penalty_code), v)
./tex/texequivalents.h   1958: # define update_tex_par_direction(v)           tex_eq_word_define(internal_int_location(par_direction_code), v)
./tex/texequivalents.h   1959: # define update_tex_pre_display_direction(v)   tex_eq_word_define(internal_int_location(pre_display_direction_code), v)
./tex/texequivalents.h   1961: # define update_tex_text_direction(v)          tex_eq_word_define(internal_int_location(text_direction_code), v)
./tex/texequivalents.h   1963: # define update_tex_font_identifier(v)         tex_eq_word_define(internal_int_location(font_code), v)
./tex/texequivalents.h   1964: # define update_tex_glyph_scale(v)             tex_eq_word_define(internal_int_location(glyph_scale_code), v)
./tex/texequivalents.h   1965: # define update_tex_glyph_x_scale(v)           tex_eq_word_define(internal_int_location(glyph_x_scale_code), v)
./tex/texequivalents.h   1966: # define update_tex_glyph_y_scale(v)           tex_eq_word_define(internal_int_location(glyph_y_scale_code), v)
./tex/texequivalents.h   1968: # define update_tex_math_left_class(v)         tex_eq_word_define(internal_int_location(math_left_class_code), v)
./tex/texequivalents.h   1969: # define update_tex_math_right_class(v)        tex_eq_word_define(internal_int_location(math_right_class_code), v)
./tex/texequivalents.h   1994: # define update_tex_insert_mode(a,v)           tex_word_define(a, internal_int_location(insert_mode_code), v)
./tex/texequivalents.h   2001: # define update_tex_local_interline_penalty(v) tex_eq_word_define(internal_int_location(local_interline_penalty_code), v);
./tex/texequivalents.h   2002: # define update_tex_local_broken_penalty(v)    tex_eq_word_define(internal_int_location(local_broken_penalty_code), v);
./tex/texequivalents.h   2003: # define update_tex_local_tolerance(v)         tex_eq_word_define(internal_int_location(local_tolerance_code), v);
./tex/texequivalents.h   2004: # define update_tex_local_pre_tolerance(v)     tex_eq_word_define(internal_int_location(local_pre_tolerance_code), v);
./tex/texerrors.h     24: # define last_interaction_level error_stop_mode
./tex/texerrors.h     35:     int          last_intercept;    /*tex error state number / dimen scanner */
./tex/texlinebreak.h     87:     halfword internal_penalty_interline;
./tex/texlocalboxes.h     29: extern halfword   tex_get_local_interline_penalty (halfword p);
./tex/texlocalboxes.h     34: extern void       tex_set_local_interline_penalty (halfword p, halfword penalty);
./tex/texmaincontrol.h     71: extern void     tex_assign_internal_int_value       (int a, halfword p, int val);
./tex/texmaincontrol.h     72: extern void     tex_assign_internal_attribute_value (int a, halfword p, int val);
./tex/texmaincontrol.h     73: extern void     tex_assign_internal_posit_value     (int a, halfword p, int val);
./tex/texmaincontrol.h     74: extern void     tex_assign_internal_dimension_value (int a, halfword p, int val);
./tex/texmaincontrol.h     75: extern void     tex_assign_internal_skip_value      (int a, halfword p, int val);
./tex/texmaincontrol.h     76: extern void     tex_assign_internal_unit_value      (int a, halfword p, int val);
./tex/texmath.h     49:     indirect_math_integer,
./tex/texmath.h     53:     indirect_math_register_integer,
./tex/texmath.h     57:     indirect_math_internal_integer,
./tex/texmath.h     58:     indirect_math_internal_dimension,
./tex/texmath.h     59:     indirect_math_internal_gluespec,
./tex/texmath.h     60:     indirect_math_internal_mugluespec,
./tex/texmath.h     63: # define last_math_indirect indirect_math_internal_mugluespec
./tex/texmath.h     66:     math_int_parameter,
./tex/texmath.h    294:         return lmt_interface.math_parameter_values[n].type;
./tex/texmathcodes.h     66: extern mathcodeval tex_mathchar_from_integer      (int value, int extcode);
./tex/texnodes.h   1378: static inline int tex_nodetype_is_visible     (halfword t) { return (t >= 0) && (t <= max_node_type) && lmt_interface.node_data[t].visible; }
./tex/texnodes.h   1388: # define get_node_size(i) (lmt_interface.node_data[i].size)
./tex/texnodes.h   1389: # define get_node_name(i) (lmt_interface.node_data[i].name)
./tex/texnodes.h   1390: /*       get_etex_code(i) (lmt_interface.node_data[i].etex) */
./tex/texnodes.h   1881: // typedef enum noad_options : unsigned __int64 {
./tex/texnodes.h   2326:     par_inter_line_penalty_code,
./tex/texnodes.h   2337:     par_inter_line_penalties_code,
./tex/texnodes.h   2408:     par_line_penalty_category,    // par_inter_line_penalty_code
./tex/texnodes.h   2419:     par_line_penalty_category,    // par_inter_line_penalties_code
./tex/texnodes.h   2465: # define par_inter_line_penalty(a)      vlink(a,14) /* */
./tex/texnodes.h   2475: # define par_inter_line_penalties(a)    vlink(a,19)
./tex/texnodes.h   2504: // define par_lousyness(a)              vinfo(a,2) /* par_penalty_interline */
./tex/texnodes.h   2526: /*     halfword    tex_internal_to_par_code (halfword cmd, halfword index); */
./tex/texnodes.h   2591: # define passive_pen_inter(a)              vinfo(a,2)
./tex/texprinting.h     61: extern void        tex_print_int              (int n);
./tex/texprinting.h     65: extern void        tex_print_roman_int        (int n);
./tex/texscanning.h     82: extern halfword    tex_scan_int                       (int optional_equal, int *radix);
./tex/texscanning.h     83: extern void        tex_scan_int_validate              (void);
./tex/texscanning.h     84: extern halfword    tex_scan_positive_int              (int optional_equal);
./tex/texscanning.h    116: extern halfword    tex_scan_int_register_number       (void);
./tex/textypes.h    151: # define max_integer                       0x7FFFFFFF /*tex aka |infinity| */
./tex/textypes.h    152: # define min_integer                      -0x7FFFFFFF /*tex aka |min_infinity| */
./tex/textypes.h    264:     # define max_int_register_index       0xFFFF /* 0xFFFF 0xFFFF 0x3FFF */ /* 64 64 16 */
./tex/textypes.h    275:     # define max_int_register_index       0x1FFF
./tex/textypes.h    287: # define max_n_of_int_registers       (max_int_register_index       + 1)
./utilities/auxposit.h     31: # define posit_to_integer       p32_to_i64
./utilities/auxposit.h     33: # define posit_round_to_integer p32_roundToInt
./utilities/auxposit.h     72: static inline posit_t posit_round   (posit_t v)            { return posit_round_to_integer(v); }   
./utilities/auxposit.h     84: static inline int     posit_i_round (posit_t v)            { return (int) posit_to_integer(v); }   
./utilities/auxposit.h    105: # define tex_integer_to_posit(p)        integer_to_posit((int32_t) p)      
./utilities/auxposit.h    106: # define tex_posit_to_integer(p)        posit_to_integer((tex_posit) { .v = (uint32_t) p })      
./utilities/auxposit.h    108: # define tex_posit_round_to_integer(p)  posit_round_to_integer((tex_posit) { .v = (uint32_t) p })
./utilities/auxposit.h    123: # define tex_posit_mul_by(p,q)          (halfword) posit_mul((tex_posit) { .v = (uint32_t) p }, tex_integer_to_posit(q)).v
./utilities/auxposit.h    124: # define tex_posit_div_by(p,q)          (halfword) posit_div((tex_posit) { .v = (uint32_t) p }, tex_integer_to_posit(q)).v
./utilities/auxposit.h    158:     return (halfword) posit_to_integer(p32_mul(x, i32_to_p32(65536)));     
./utilities/auxsystem.h     11: extern void   aux_set_interrupt_handler (void);
